
eink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080f0  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2e0  0800e2e0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2e0  0800e2e0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2e0  0800e2e0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2e0  0800e2e0  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2e4  0800e2e4  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000008c  0800e374  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800e374  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001329f  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eea  00000000  00000000  00033354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00036240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  000374c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c05  00000000  00000000  000385d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001649a  00000000  00000000  0003d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009110a  00000000  00000000  0005366f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  000e47cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080061d8 	.word	0x080061d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080061d8 	.word	0x080061d8

0800014c <__io_putchar>:
RTC_DateTypeDef current_date, temp_date, alarm_date;

UBYTE *BlackImage, *RedImage;
UWORD Imagesize = ((EPD_1IN54B_WIDTH % 8 == 0)? (EPD_1IN54B_WIDTH / 8 ): (EPD_1IN54B_WIDTH / 8 + 1)) * EPD_1IN54B_HEIGHT;

int __io_putchar(uint8_t ch){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 10);
 8000156:	1df9      	adds	r1, r7, #7
 8000158:	230a      	movs	r3, #10
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f004 fd2f 	bl	8004bc0 <HAL_UART_Transmit>
	return ch;
 8000162:	79fb      	ldrb	r3, [r7, #7]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200001a4 	.word	0x200001a4

08000170 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	/*Reset timer counter*/
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800017a:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	; 0x24

	if(GPIO_Pin == GPIO_PIN_8){
 8000182:	88fb      	ldrh	r3, [r7, #6]
 8000184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000188:	d102      	bne.n	8000190 <HAL_GPIO_EXTI_Callback+0x20>
		flag = BUTTON_0;
 800018a:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <HAL_GPIO_EXTI_Callback+0x58>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_9){
 8000190:	88fb      	ldrh	r3, [r7, #6]
 8000192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000196:	d102      	bne.n	800019e <HAL_GPIO_EXTI_Callback+0x2e>
		flag = BUTTON_1;
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <HAL_GPIO_EXTI_Callback+0x58>)
 800019a:	2202      	movs	r2, #2
 800019c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_11){
 800019e:	88fb      	ldrh	r3, [r7, #6]
 80001a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001a4:	d102      	bne.n	80001ac <HAL_GPIO_EXTI_Callback+0x3c>
		flag = BUTTON_2;
 80001a6:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <HAL_GPIO_EXTI_Callback+0x58>)
 80001a8:	2203      	movs	r2, #3
 80001aa:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_12){
 80001ac:	88fb      	ldrh	r3, [r7, #6]
 80001ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b2:	d102      	bne.n	80001ba <HAL_GPIO_EXTI_Callback+0x4a>
		flag = BUTTON_3;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_GPIO_EXTI_Callback+0x58>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	701a      	strb	r2, [r3, #0]
	}
}
 80001ba:	bf00      	nop
 80001bc:	370c      	adds	r7, #12
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	20000114 	.word	0x20000114
 80001c8:	200001ec 	.word	0x200001ec

080001cc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	flag = ALARM;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <HAL_RTC_AlarmAEventCallback+0x18>)
 80001d6:	2205      	movs	r2, #5
 80001d8:	701a      	strb	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	200001ec 	.word	0x200001ec

080001e8 <HAL_TIM_PeriodElapsedCallback>:

uint8_t tmp = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b0d      	ldr	r3, [pc, #52]	; (800022c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d102      	bne.n	8000202 <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag = SLEEP;
 80001fc:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001fe:	2206      	movs	r2, #6
 8000200:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == htim3.Instance){
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d10a      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x3c>
		tmp++;
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	3301      	adds	r3, #1
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4b08      	ldr	r3, [pc, #32]	; (8000238 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000218:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800021a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021e:	4807      	ldr	r0, [pc, #28]	; (800023c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000220:	f002 fa53 	bl	80026ca <HAL_GPIO_TogglePin>
	}
}
 8000224:	bf00      	nop
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000114 	.word	0x20000114
 8000230:	200001ec 	.word	0x200001ec
 8000234:	2000015c 	.word	0x2000015c
 8000238:	20000200 	.word	0x20000200
 800023c:	40011000 	.word	0x40011000

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f001 fe47 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8cb 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 fa63 	bl	8000718 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000252:	f000 f965 	bl	8000520 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000256:	f000 fa35 	bl	80006c4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800025a:	f000 f917 	bl	800048c <MX_RTC_Init>
  MX_TIM2_Init();
 800025e:	f000 f995 	bl	800058c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000262:	f000 f9e1 	bl	8000628 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000266:	4853      	ldr	r0, [pc, #332]	; (80003b4 <main+0x174>)
 8000268:	f004 f8ac 	bl	80043c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800026c:	4852      	ldr	r0, [pc, #328]	; (80003b8 <main+0x178>)
 800026e:	f004 f8a9 	bl	80043c4 <HAL_TIM_Base_Start_IT>
  DEV_Module_Init();
 8000272:	f000 fdff 	bl	8000e74 <DEV_Module_Init>
  EPD_1IN54B_Init();
 8000276:	f001 fd0b 	bl	8001c90 <EPD_1IN54B_Init>

  if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800027a:	4b50      	ldr	r3, [pc, #320]	; (80003bc <main+0x17c>)
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	f005 fa9c 	bl	80057bc <malloc>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	4b4d      	ldr	r3, [pc, #308]	; (80003c0 <main+0x180>)
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	4b4c      	ldr	r3, [pc, #304]	; (80003c0 <main+0x180>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d105      	bne.n	80002a0 <main+0x60>
      printf("Failed to apply for black memory...\r\n");
 8000294:	484b      	ldr	r0, [pc, #300]	; (80003c4 <main+0x184>)
 8000296:	f005 fbf3 	bl	8005a80 <puts>
      return -1;
 800029a:	f04f 33ff 	mov.w	r3, #4294967295
 800029e:	e085      	b.n	80003ac <main+0x16c>
  }
  if((RedImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80002a0:	4b46      	ldr	r3, [pc, #280]	; (80003bc <main+0x17c>)
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f005 fa89 	bl	80057bc <malloc>
 80002aa:	4603      	mov	r3, r0
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b46      	ldr	r3, [pc, #280]	; (80003c8 <main+0x188>)
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <main+0x188>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d105      	bne.n	80002c6 <main+0x86>
      printf("Failed to apply for red memory...\r\n");
 80002ba:	4844      	ldr	r0, [pc, #272]	; (80003cc <main+0x18c>)
 80002bc:	f005 fbe0 	bl	8005a80 <puts>
      return -1;
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	e072      	b.n	80003ac <main+0x16c>
  }

  Paint_NewImage(BlackImage, EPD_1IN54B_WIDTH, EPD_1IN54B_HEIGHT, 270, WHITE);
 80002c6:	4b3e      	ldr	r3, [pc, #248]	; (80003c0 <main+0x180>)
 80002c8:	6818      	ldr	r0, [r3, #0]
 80002ca:	23ff      	movs	r3, #255	; 0xff
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80002d2:	22c8      	movs	r2, #200	; 0xc8
 80002d4:	21c8      	movs	r1, #200	; 0xc8
 80002d6:	f000 fe03 	bl	8000ee0 <Paint_NewImage>
  Paint_NewImage(RedImage, EPD_1IN54B_WIDTH, EPD_1IN54B_HEIGHT, 270, WHITE);
 80002da:	4b3b      	ldr	r3, [pc, #236]	; (80003c8 <main+0x188>)
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	23ff      	movs	r3, #255	; 0xff
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80002e6:	22c8      	movs	r2, #200	; 0xc8
 80002e8:	21c8      	movs	r1, #200	; 0xc8
 80002ea:	f000 fdf9 	bl	8000ee0 <Paint_NewImage>
  Paint_SelectImage(BlackImage);
 80002ee:	4b34      	ldr	r3, [pc, #208]	; (80003c0 <main+0x180>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fe48 	bl	8000f88 <Paint_SelectImage>
  Paint_Clear(WHITE);
 80002f8:	20ff      	movs	r0, #255	; 0xff
 80002fa:	f000 ff9f 	bl	800123c <Paint_Clear>
  Paint_DrawBitMap(stitch);
 80002fe:	4834      	ldr	r0, [pc, #208]	; (80003d0 <main+0x190>)
 8000300:	f001 fb6a 	bl	80019d8 <Paint_DrawBitMap>
  Paint_SelectImage(RedImage);
 8000304:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <main+0x188>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fe3d 	bl	8000f88 <Paint_SelectImage>
  Paint_Clear(WHITE);
 800030e:	20ff      	movs	r0, #255	; 0xff
 8000310:	f000 ff94 	bl	800123c <Paint_Clear>
  Paint_DrawBitMap(stitch);
 8000314:	482e      	ldr	r0, [pc, #184]	; (80003d0 <main+0x190>)
 8000316:	f001 fb5f 	bl	80019d8 <Paint_DrawBitMap>
  EPD_1IN54B_Display(BlackImage, RedImage);
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <main+0x180>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <main+0x188>)
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f001 fd01 	bl	8001d2c <EPD_1IN54B_Display>

  if(SET){
	  current_time.Hours = 17;
 800032a:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <main+0x194>)
 800032c:	2211      	movs	r2, #17
 800032e:	701a      	strb	r2, [r3, #0]
	  current_time.Minutes = 24;
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <main+0x194>)
 8000332:	2218      	movs	r2, #24
 8000334:	705a      	strb	r2, [r3, #1]
	  current_time.Seconds = 30;
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <main+0x194>)
 8000338:	221e      	movs	r2, #30
 800033a:	709a      	strb	r2, [r3, #2]
	  current_date.Date = 3;
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <main+0x198>)
 800033e:	2203      	movs	r2, #3
 8000340:	709a      	strb	r2, [r3, #2]
	  current_date.Month = 2;
 8000342:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <main+0x198>)
 8000344:	2202      	movs	r2, #2
 8000346:	705a      	strb	r2, [r3, #1]
	  current_date.Year = 24;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <main+0x198>)
 800034a:	2218      	movs	r2, #24
 800034c:	70da      	strb	r2, [r3, #3]
	  current_date.WeekDay = 5;
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <main+0x198>)
 8000350:	2205      	movs	r2, #5
 8000352:	701a      	strb	r2, [r3, #0]
	  HAL_RTC_SetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8000354:	2200      	movs	r2, #0
 8000356:	491f      	ldr	r1, [pc, #124]	; (80003d4 <main+0x194>)
 8000358:	4820      	ldr	r0, [pc, #128]	; (80003dc <main+0x19c>)
 800035a:	f003 f82f 	bl	80033bc <HAL_RTC_SetTime>
	  HAL_RTC_SetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800035e:	2200      	movs	r2, #0
 8000360:	491d      	ldr	r1, [pc, #116]	; (80003d8 <main+0x198>)
 8000362:	481e      	ldr	r0, [pc, #120]	; (80003dc <main+0x19c>)
 8000364:	f003 f99a 	bl	800369c <HAL_RTC_SetDate>
  }
  flag = IDLE;
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <main+0x1a0>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
  TIM2->CNT = 0;
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_Base_Start_IT(&htim2);
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <main+0x174>)
 8000378:	f004 f824 	bl	80043c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800037c:	480e      	ldr	r0, [pc, #56]	; (80003b8 <main+0x178>)
 800037e:	f004 f821 	bl	80043c4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (flag) {
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <main+0x1a0>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b06      	cmp	r3, #6
 8000388:	d102      	bne.n	8000390 <main+0x150>
		case SLEEP:
			sleep_mode();
 800038a:	f000 fa5f 	bl	800084c <sleep_mode>
			break;
 800038e:	e00c      	b.n	80003aa <main+0x16a>
		default:
		  HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8000390:	2200      	movs	r2, #0
 8000392:	4910      	ldr	r1, [pc, #64]	; (80003d4 <main+0x194>)
 8000394:	4811      	ldr	r0, [pc, #68]	; (80003dc <main+0x19c>)
 8000396:	f003 f8a9 	bl	80034ec <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800039a:	2200      	movs	r2, #0
 800039c:	490e      	ldr	r1, [pc, #56]	; (80003d8 <main+0x198>)
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <main+0x19c>)
 80003a0:	f003 fa32 	bl	8003808 <HAL_RTC_GetDate>
		  display_mode();
 80003a4:	f000 faa4 	bl	80008f0 <display_mode>
		  break;
 80003a8:	bf00      	nop
	  switch (flag) {
 80003aa:	e7ea      	b.n	8000382 <main+0x142>
	}
  }
  /* USER CODE END 3 */
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000114 	.word	0x20000114
 80003b8:	2000015c 	.word	0x2000015c
 80003bc:	20000000 	.word	0x20000000
 80003c0:	200001f8 	.word	0x200001f8
 80003c4:	080061f0 	.word	0x080061f0
 80003c8:	200001fc 	.word	0x200001fc
 80003cc:	08006218 	.word	0x08006218
 80003d0:	0800664c 	.word	0x0800664c
 80003d4:	200001f0 	.word	0x200001f0
 80003d8:	200001f4 	.word	0x200001f4
 80003dc:	200000a8 	.word	0x200000a8
 80003e0:	200001ec 	.word	0x200001ec

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b094      	sub	sp, #80	; 0x50
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ee:	2228      	movs	r2, #40	; 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 f9f2 	bl	80057dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000414:	230a      	movs	r3, #10
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000418:	2301      	movs	r3, #1
 800041a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800041c:	2310      	movs	r3, #16
 800041e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000420:	2301      	movs	r3, #1
 8000422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000424:	2300      	movs	r3, #0
 8000426:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042c:	4618      	mov	r0, r3
 800042e:	f002 f9bd 	bl	80027ac <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000438:	f000 fa54 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f002 fc2a 	bl	8002cb0 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000462:	f000 fa3f 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000466:	2301      	movs	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800046a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800046e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fdaa 	bl	8002fcc <HAL_RCCEx_PeriphCLKConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800047e:	f000 fa31 	bl	80008e4 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3750      	adds	r7, #80	; 0x50
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2100      	movs	r1, #0
 8000496:	460a      	mov	r2, r1
 8000498:	801a      	strh	r2, [r3, #0]
 800049a:	460a      	mov	r2, r1
 800049c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800049e:	2300      	movs	r3, #0
 80004a0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <MX_RTC_Init+0x8c>)
 80004a4:	4a1d      	ldr	r2, [pc, #116]	; (800051c <MX_RTC_Init+0x90>)
 80004a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <MX_RTC_Init+0x8c>)
 80004aa:	f04f 32ff 	mov.w	r2, #4294967295
 80004ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <MX_RTC_Init+0x8c>)
 80004b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004b8:	4817      	ldr	r0, [pc, #92]	; (8000518 <MX_RTC_Init+0x8c>)
 80004ba:	f002 fef3 	bl	80032a4 <HAL_RTC_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80004c4:	f000 fa0e 	bl	80008e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2201      	movs	r2, #1
 80004d8:	4619      	mov	r1, r3
 80004da:	480f      	ldr	r0, [pc, #60]	; (8000518 <MX_RTC_Init+0x8c>)
 80004dc:	f002 ff6e 	bl	80033bc <HAL_RTC_SetTime>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80004e6:	f000 f9fd 	bl	80008e4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80004ea:	2301      	movs	r3, #1
 80004ec:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80004ee:	2301      	movs	r3, #1
 80004f0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80004fa:	463b      	mov	r3, r7
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_RTC_Init+0x8c>)
 8000502:	f003 f8cb 	bl	800369c <HAL_RTC_SetDate>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800050c:	f000 f9ea 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	200000a8 	.word	0x200000a8
 800051c:	40002800 	.word	0x40002800

08000520 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_SPI1_Init+0x64>)
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <MX_SPI1_Init+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_SPI1_Init+0x64>)
 800052c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_SPI1_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <MX_SPI1_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_SPI1_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_SPI1_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_SPI1_Init+0x64>)
 800054c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_SPI1_Init+0x64>)
 8000554:	2208      	movs	r2, #8
 8000556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MX_SPI1_Init+0x64>)
 800055a:	2200      	movs	r2, #0
 800055c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_SPI1_Init+0x64>)
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <MX_SPI1_Init+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_SPI1_Init+0x64>)
 800056c:	220a      	movs	r2, #10
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_SPI1_Init+0x64>)
 8000572:	f003 fc69 	bl	8003e48 <HAL_SPI_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800057c:	f000 f9b2 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200000bc 	.word	0x200000bc
 8000588:	40013000 	.word	0x40013000

0800058c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_TIM2_Init+0x98>)
 80005aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_TIM2_Init+0x98>)
 80005b2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_TIM2_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_TIM2_Init+0x98>)
 80005c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80005c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_TIM2_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_TIM2_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <MX_TIM2_Init+0x98>)
 80005d4:	f003 fea6 	bl	8004324 <HAL_TIM_Base_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005de:	f000 f981 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_TIM2_Init+0x98>)
 80005f0:	f004 f842 	bl	8004678 <HAL_TIM_ConfigClockSource>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005fa:	f000 f973 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_TIM2_Init+0x98>)
 800060c:	f004 fa18 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000616:	f000 f965 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000114 	.word	0x20000114

08000628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_TIM3_Init+0x94>)
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <MX_TIM3_Init+0x98>)
 8000648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_TIM3_Init+0x94>)
 800064c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000650:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_TIM3_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_TIM3_Init+0x94>)
 800065a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800065e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_TIM3_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_TIM3_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800066c:	4813      	ldr	r0, [pc, #76]	; (80006bc <MX_TIM3_Init+0x94>)
 800066e:	f003 fe59 	bl	8004324 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000678:	f000 f934 	bl	80008e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_TIM3_Init+0x94>)
 800068a:	f003 fff5 	bl	8004678 <HAL_TIM_ConfigClockSource>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 f926 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_TIM3_Init+0x94>)
 80006a6:	f004 f9cb 	bl	8004a40 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006b0:	f000 f918 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000015c 	.word	0x2000015c
 80006c0:	40000400 	.word	0x40000400

080006c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART1_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART1_UART_Init+0x4c>)
 80006fc:	f004 fa10 	bl	8004b20 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f8ed 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001a4 	.word	0x200001a4
 8000714:	40013800 	.word	0x40013800

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <MX_GPIO_Init+0x120>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a41      	ldr	r2, [pc, #260]	; (8000838 <MX_GPIO_Init+0x120>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <MX_GPIO_Init+0x120>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <MX_GPIO_Init+0x120>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a3b      	ldr	r2, [pc, #236]	; (8000838 <MX_GPIO_Init+0x120>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <MX_GPIO_Init+0x120>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_GPIO_Init+0x120>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a35      	ldr	r2, [pc, #212]	; (8000838 <MX_GPIO_Init+0x120>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0x120>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077a:	4830      	ldr	r0, [pc, #192]	; (800083c <MX_GPIO_Init+0x124>)
 800077c:	f001 ff8d 	bl	800269a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|SPI_CS_Pin|PWR_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2156      	movs	r1, #86	; 0x56
 8000784:	482e      	ldr	r0, [pc, #184]	; (8000840 <MX_GPIO_Init+0x128>)
 8000786:	f001 ff88 	bl	800269a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4826      	ldr	r0, [pc, #152]	; (800083c <MX_GPIO_Init+0x124>)
 80007a4:	f001 fdde 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin DC_Pin SPI_CS_Pin PWR_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|SPI_CS_Pin|PWR_Pin;
 80007a8:	2356      	movs	r3, #86	; 0x56
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	4820      	ldr	r0, [pc, #128]	; (8000840 <MX_GPIO_Init+0x128>)
 80007c0:	f001 fdd0 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0x128>)
 80007d8:	f001 fdc4 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0x12c>)
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_GPIO_Init+0x128>)
 80007f2:	f001 fdb7 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_GPIO_Init+0x12c>)
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0x130>)
 800080c:	f001 fdaa 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2017      	movs	r0, #23
 8000816:	f001 fcbc 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800081a:	2017      	movs	r0, #23
 800081c:	f001 fcd5 	bl	80021ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f001 fcb4 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082a:	2028      	movs	r0, #40	; 0x28
 800082c:	f001 fccd 	bl	80021ca <HAL_NVIC_EnableIRQ>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	40011000 	.word	0x40011000
 8000840:	40010800 	.word	0x40010800
 8000844:	10110000 	.word	0x10110000
 8000848:	40010c00 	.word	0x40010c00

0800084c <sleep_mode>:

/* USER CODE BEGIN 4 */
void sleep_mode(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af02      	add	r7, sp, #8
	  Paint_SelectImage(RedImage);
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <sleep_mode+0x80>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fb96 	bl	8000f88 <Paint_SelectImage>
	  Paint_DrawString_EN(20, 160, "SLEEPING", &Font32, WHITE, RED);
 800085c:	2300      	movs	r3, #0
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	23ff      	movs	r3, #255	; 0xff
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <sleep_mode+0x84>)
 8000866:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <sleep_mode+0x88>)
 8000868:	21a0      	movs	r1, #160	; 0xa0
 800086a:	2014      	movs	r0, #20
 800086c:	f000 fe2e 	bl	80014cc <Paint_DrawString_EN>
	  EPD_1IN54B_Display(BlackImage, RedImage);
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <sleep_mode+0x8c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <sleep_mode+0x80>)
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fa56 	bl	8001d2c <EPD_1IN54B_Display>

	  EPD_1IN54B_Sleep();
 8000880:	f001 fb02 	bl	8001e88 <EPD_1IN54B_Sleep>
	  free(BlackImage);
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <sleep_mode+0x8c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f004 ff9f 	bl	80057cc <free>
	  free(RedImage);
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <sleep_mode+0x80>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f004 ff9a 	bl	80057cc <free>
	  BlackImage = NULL;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <sleep_mode+0x8c>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
	  RedImage = NULL;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <sleep_mode+0x80>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
	  DEV_Module_Exit();
 80008a4:	f000 fb02 	bl	8000eac <DEV_Module_Exit>
	  printf("Goto Sleep...\r\n");
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <sleep_mode+0x90>)
 80008aa:	f005 f8e9 	bl	8005a80 <puts>

	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <sleep_mode+0x94>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <sleep_mode+0x94>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6013      	str	r3, [r2, #0]
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80008ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008be:	f001 ff41 	bl	8002744 <HAL_PWR_EnableWakeUpPin>
	  HAL_PWR_EnterSTANDBYMode();
 80008c2:	f001 ff5b 	bl	800277c <HAL_PWR_EnterSTANDBYMode>
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001fc 	.word	0x200001fc
 80008d0:	20000010 	.word	0x20000010
 80008d4:	0800623c 	.word	0x0800623c
 80008d8:	200001f8 	.word	0x200001f8
 80008dc:	08006248 	.word	0x08006248
 80008e0:	40007000 	.word	0x40007000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <display_mode>:
 *  Created on: Feb 3, 2024
 *      Author: Vy
 */
#include "mode.h"

void display_mode(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af02      	add	r7, sp, #8
	  Paint_SelectImage(RedImage);
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <display_mode+0x78>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fb44 	bl	8000f88 <Paint_SelectImage>
	  Paint_Clear(WHITE);
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	f000 fc9b 	bl	800123c <Paint_Clear>
	  Paint_DrawString_EN(0, 10, "PIFLab", &Font32, WHITE, RED);
 8000906:	2300      	movs	r3, #0
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	23ff      	movs	r3, #255	; 0xff
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <display_mode+0x7c>)
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <display_mode+0x80>)
 8000912:	210a      	movs	r1, #10
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fdd9 	bl	80014cc <Paint_DrawString_EN>
	  Paint_SelectImage(BlackImage);
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <display_mode+0x84>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb32 	bl	8000f88 <Paint_SelectImage>
	  Paint_Clear(WHITE);
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	f000 fc89 	bl	800123c <Paint_Clear>
	  Paint_DrawTime(30, 50, &current_time, &Font48, WHITE, BLACK);
 800092a:	2300      	movs	r3, #0
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	23ff      	movs	r3, #255	; 0xff
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <display_mode+0x88>)
 8000934:	4a11      	ldr	r2, [pc, #68]	; (800097c <display_mode+0x8c>)
 8000936:	2132      	movs	r1, #50	; 0x32
 8000938:	201e      	movs	r0, #30
 800093a:	f000 fe1b 	bl	8001574 <Paint_DrawTime>
	  Paint_DrawDate(30, 110, &current_date, &Font24, WHITE, BLACK);
 800093e:	2300      	movs	r3, #0
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	23ff      	movs	r3, #255	; 0xff
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <display_mode+0x90>)
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <display_mode+0x94>)
 800094a:	216e      	movs	r1, #110	; 0x6e
 800094c:	201e      	movs	r0, #30
 800094e:	f000 feb5 	bl	80016bc <Paint_DrawDate>
	  EPD_1IN54B_Display(BlackImage, RedImage);
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <display_mode+0x84>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <display_mode+0x78>)
 8000958:	6812      	ldr	r2, [r2, #0]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 f9e5 	bl	8001d2c <EPD_1IN54B_Display>
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001fc 	.word	0x200001fc
 800096c:	20000010 	.word	0x20000010
 8000970:	08006258 	.word	0x08006258
 8000974:	200001f8 	.word	0x200001f8
 8000978:	20000018 	.word	0x20000018
 800097c:	200001f0 	.word	0x200001f0
 8000980:	20000008 	.word	0x20000008
 8000984:	200001f4 	.word	0x200001f4

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_MspInit+0x5c>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_MspInit+0x5c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_MspInit+0x5c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x5c>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x5c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x5c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_MspInit+0x60>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_MspInit+0x60>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010000 	.word	0x40010000

080009ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_RTC_MspInit+0x4c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d118      	bne.n	8000a30 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009fe:	f001 fe95 	bl	800272c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_RTC_MspInit+0x50>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_RTC_MspInit+0x50>)
 8000a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_RTC_MspInit+0x50>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_RTC_MspInit+0x54>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2029      	movs	r0, #41	; 0x29
 8000a26:	f001 fbb4 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a2a:	2029      	movs	r0, #41	; 0x29
 8000a2c:	f001 fbcd 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40002800 	.word	0x40002800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	4242043c 	.word	0x4242043c

08000a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <HAL_SPI_MspInit+0x70>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d123      	bne.n	8000aac <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_SPI_MspInit+0x74>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_SPI_MspInit+0x74>)
 8000a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_SPI_MspInit+0x74>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_SPI_MspInit+0x74>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_SPI_MspInit+0x74>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_SPI_MspInit+0x74>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a94:	23a0      	movs	r3, #160	; 0xa0
 8000a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_SPI_MspInit+0x78>)
 8000aa8:	f001 fc5c 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40013000 	.word	0x40013000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010800 	.word	0x40010800

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d114      	bne.n	8000afc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2102      	movs	r1, #2
 8000aee:	201c      	movs	r0, #28
 8000af0:	f001 fb4f 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af4:	201c      	movs	r0, #28
 8000af6:	f001 fb68 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000afa:	e018      	b.n	8000b2e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_TIM_Base_MspInit+0x7c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d113      	bne.n	8000b2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_TIM_Base_MspInit+0x78>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	201d      	movs	r0, #29
 8000b24:	f001 fb35 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b28:	201d      	movs	r0, #29
 8000b2a:	f001 fb4e 	bl	80021ca <HAL_NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40000400 	.word	0x40000400

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a20      	ldr	r2, [pc, #128]	; (8000bdc <HAL_UART_MspInit+0x9c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d139      	bne.n	8000bd4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_UART_MspInit+0xa0>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <HAL_UART_MspInit+0xa0>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_UART_MspInit+0xa0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0xa0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_UART_MspInit+0xa0>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_UART_MspInit+0xa0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <HAL_UART_MspInit+0xa4>)
 8000ba6:	f001 fbdd 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_UART_MspInit+0xa4>)
 8000bc0:	f001 fbd0 	bl	8002364 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2025      	movs	r0, #37	; 0x25
 8000bca:	f001 fae2 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bce:	2025      	movs	r0, #37	; 0x25
 8000bd0:	f001 fafb 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010800 	.word	0x40010800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f001 f999 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c3e:	f001 fd5d 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000c42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c46:	f001 fd59 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM2_IRQHandler+0x10>)
 8000c56:	f003 fc07 	bl	8004468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000114 	.word	0x20000114

08000c64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM3_IRQHandler+0x10>)
 8000c6a:	f003 fbfd 	bl	8004468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000015c 	.word	0x2000015c

08000c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <USART1_IRQHandler+0x10>)
 8000c7e:	f004 f823 	bl	8004cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200001a4 	.word	0x200001a4

08000c8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c94:	f001 fd32 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c9c:	f001 fd2e 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <RTC_Alarm_IRQHandler+0x10>)
 8000caa:	f002 fe01 	bl	80038b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000a8 	.word	0x200000a8

08000cb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	e00a      	b.n	8000ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cca:	f3af 8000 	nop.w
 8000cce:	4601      	mov	r1, r0
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	b2ca      	uxtb	r2, r1
 8000cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf0      	blt.n	8000cca <_read+0x12>
  }

  return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e009      	b.n	8000d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fa1d 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbf1      	blt.n	8000d04 <_write+0x12>
  }
  return len;
 8000d20:	687b      	ldr	r3, [r7, #4]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_close>:

int _close(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d50:	605a      	str	r2, [r3, #4]
  return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f004 fcd4 	bl	8005768 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20005000 	.word	0x20005000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	20000204 	.word	0x20000204
 8000df4:	20000238 	.word	0x20000238

08000df8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e04:	f7ff fff8 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e20:	4c09      	ldr	r4, [pc, #36]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f004 fca1 	bl	8005774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e32:	f7ff fa05 	bl	8000240 <main>
  bx lr
 8000e36:	4770      	bx	lr
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000e40:	0800e2e8 	.word	0x0800e2e8
  ldr r2, =_sbss
 8000e44:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000e48:	20000234 	.word	0x20000234

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000e5a:	1df9      	adds	r1, r7, #7
 8000e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e60:	2201      	movs	r2, #1
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <DEV_SPI_WriteByte+0x20>)
 8000e64:	f003 f874 	bl	8003f50 <HAL_SPI_Transmit>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200000bc 	.word	0x200000bc

08000e74 <DEV_Module_Init>:
{
    HAL_SPI_Transmit(&hspi1, value, len, 1000);
}

int DEV_Module_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <DEV_Module_Init+0x34>)
 8000e7e:	f001 fc0c 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2110      	movs	r1, #16
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <DEV_Module_Init+0x34>)
 8000e88:	f001 fc07 	bl	800269a <HAL_GPIO_WritePin>
	DEV_Digital_Write(EPD_PWR_PIN, 1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <DEV_Module_Init+0x34>)
 8000e92:	f001 fc02 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <DEV_Module_Init+0x34>)
 8000e9c:	f001 fbfd 	bl	800269a <HAL_GPIO_WritePin>
		return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40010800 	.word	0x40010800

08000eac <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <DEV_Module_Exit+0x30>)
 8000eb6:	f001 fbf0 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2110      	movs	r1, #16
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <DEV_Module_Exit+0x30>)
 8000ec0:	f001 fbeb 	bl	800269a <HAL_GPIO_WritePin>

    //close 5V
	DEV_Digital_Write(EPD_PWR_PIN, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <DEV_Module_Exit+0x30>)
 8000eca:	f001 fbe6 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4802      	ldr	r0, [pc, #8]	; (8000edc <DEV_Module_Exit+0x30>)
 8000ed4:	f001 fbe1 	bl	800269a <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40010800 	.word	0x40010800

08000ee0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	4608      	mov	r0, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	817b      	strh	r3, [r7, #10]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	813b      	strh	r3, [r7, #8]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <Paint_NewImage+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f08:	897b      	ldrh	r3, [r7, #10]
 8000f0a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f0e:	893b      	ldrh	r3, [r7, #8]
 8000f10:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f14:	8b3b      	ldrh	r3, [r7, #24]
 8000f16:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <Paint_NewImage+0x52>
 8000f2a:	897b      	ldrh	r3, [r7, #10]
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	e004      	b.n	8000f3c <Paint_NewImage+0x5c>
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f3e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f42:	893b      	ldrh	r3, [r7, #8]
 8000f44:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <Paint_NewImage+0x7e>
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2bb4      	cmp	r3, #180	; 0xb4
 8000f5c:	d106      	bne.n	8000f6c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f60:	897b      	ldrh	r3, [r7, #10]
 8000f62:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	80d3      	strh	r3, [r2, #6]
 8000f6a:	e006      	b.n	8000f7a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f6e:	893b      	ldrh	r3, [r7, #8]
 8000f70:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <Paint_NewImage+0xa4>)
 8000f74:	897b      	ldrh	r3, [r7, #10]
 8000f76:	80d3      	strh	r3, [r2, #6]
    }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000208 	.word	0x20000208

08000f88 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <Paint_SelectImage+0x18>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000208 	.word	0x20000208

08000fa4 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000fb6:	4b9f      	ldr	r3, [pc, #636]	; (8001234 <Paint_SetPixel+0x290>)
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d804      	bhi.n	8000fca <Paint_SetPixel+0x26>
 8000fc0:	4b9c      	ldr	r3, [pc, #624]	; (8001234 <Paint_SetPixel+0x290>)
 8000fc2:	88db      	ldrh	r3, [r3, #6]
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d903      	bls.n	8000fd2 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 8000fca:	489b      	ldr	r0, [pc, #620]	; (8001238 <Paint_SetPixel+0x294>)
 8000fcc:	f004 fd58 	bl	8005a80 <puts>
        return;
 8000fd0:	e12d      	b.n	800122e <Paint_SetPixel+0x28a>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000fd2:	4b98      	ldr	r3, [pc, #608]	; (8001234 <Paint_SetPixel+0x290>)
 8000fd4:	89db      	ldrh	r3, [r3, #14]
 8000fd6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000fda:	d02b      	beq.n	8001034 <Paint_SetPixel+0x90>
 8000fdc:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000fe0:	f300 8122 	bgt.w	8001228 <Paint_SetPixel+0x284>
 8000fe4:	2bb4      	cmp	r3, #180	; 0xb4
 8000fe6:	d016      	beq.n	8001016 <Paint_SetPixel+0x72>
 8000fe8:	2bb4      	cmp	r3, #180	; 0xb4
 8000fea:	f300 811d 	bgt.w	8001228 <Paint_SetPixel+0x284>
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <Paint_SetPixel+0x54>
 8000ff2:	2b5a      	cmp	r3, #90	; 0x5a
 8000ff4:	d005      	beq.n	8001002 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000ff6:	e117      	b.n	8001228 <Paint_SetPixel+0x284>
        X = Xpoint;
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000ffc:	88bb      	ldrh	r3, [r7, #4]
 8000ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001000:	e022      	b.n	8001048 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 8001002:	4b8c      	ldr	r3, [pc, #560]	; (8001234 <Paint_SetPixel+0x290>)
 8001004:	891a      	ldrh	r2, [r3, #8]
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	b29b      	uxth	r3, r3
 800100c:	3b01      	subs	r3, #1
 800100e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001014:	e018      	b.n	8001048 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 8001016:	4b87      	ldr	r3, [pc, #540]	; (8001234 <Paint_SetPixel+0x290>)
 8001018:	891a      	ldrh	r2, [r3, #8]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b29b      	uxth	r3, r3
 8001020:	3b01      	subs	r3, #1
 8001022:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001024:	4b83      	ldr	r3, [pc, #524]	; (8001234 <Paint_SetPixel+0x290>)
 8001026:	895a      	ldrh	r2, [r3, #10]
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001032:	e009      	b.n	8001048 <Paint_SetPixel+0xa4>
        X = Ypoint;
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8001038:	4b7e      	ldr	r3, [pc, #504]	; (8001234 <Paint_SetPixel+0x290>)
 800103a:	895a      	ldrh	r2, [r3, #10]
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001046:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001048:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <Paint_SetPixel+0x290>)
 800104a:	8a1b      	ldrh	r3, [r3, #16]
 800104c:	2b03      	cmp	r3, #3
 800104e:	f200 80ed 	bhi.w	800122c <Paint_SetPixel+0x288>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <Paint_SetPixel+0xb4>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	080010a7 	.word	0x080010a7
 800105c:	08001069 	.word	0x08001069
 8001060:	08001079 	.word	0x08001079
 8001064:	08001089 	.word	0x08001089
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001068:	4b72      	ldr	r3, [pc, #456]	; (8001234 <Paint_SetPixel+0x290>)
 800106a:	891a      	ldrh	r2, [r3, #8]
 800106c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b29b      	uxth	r3, r3
 8001072:	3b01      	subs	r3, #1
 8001074:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8001076:	e017      	b.n	80010a8 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001078:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <Paint_SetPixel+0x290>)
 800107a:	895a      	ldrh	r2, [r3, #10]
 800107c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001086:	e00f      	b.n	80010a8 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <Paint_SetPixel+0x290>)
 800108a:	891a      	ldrh	r2, [r3, #8]
 800108c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8001096:	4b67      	ldr	r3, [pc, #412]	; (8001234 <Paint_SetPixel+0x290>)
 8001098:	895a      	ldrh	r2, [r3, #10]
 800109a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	3b01      	subs	r3, #1
 80010a2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80010a4:	e000      	b.n	80010a8 <Paint_SetPixel+0x104>
        break;
 80010a6:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80010a8:	4b62      	ldr	r3, [pc, #392]	; (8001234 <Paint_SetPixel+0x290>)
 80010aa:	891b      	ldrh	r3, [r3, #8]
 80010ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d804      	bhi.n	80010bc <Paint_SetPixel+0x118>
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <Paint_SetPixel+0x290>)
 80010b4:	895b      	ldrh	r3, [r3, #10]
 80010b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d903      	bls.n	80010c4 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 80010bc:	485e      	ldr	r0, [pc, #376]	; (8001238 <Paint_SetPixel+0x294>)
 80010be:	f004 fcdf 	bl	8005a80 <puts>
        return;
 80010c2:	e0b4      	b.n	800122e <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 80010c4:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <Paint_SetPixel+0x290>)
 80010c6:	8adb      	ldrh	r3, [r3, #22]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d139      	bne.n	8001140 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80010cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ce:	08db      	lsrs	r3, r3, #3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	4a57      	ldr	r2, [pc, #348]	; (8001234 <Paint_SetPixel+0x290>)
 80010d8:	8a52      	ldrh	r2, [r2, #18]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	440b      	add	r3, r1
 80010e0:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80010e2:	4b54      	ldr	r3, [pc, #336]	; (8001234 <Paint_SetPixel+0x290>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d113      	bne.n	800111c <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80010f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	fa42 f303 	asr.w	r3, r2, r3
 8001100:	b25b      	sxtb	r3, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	b25a      	sxtb	r2, r3
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4013      	ands	r3, r2
 800110c:	b259      	sxtb	r1, r3
 800110e:	4b49      	ldr	r3, [pc, #292]	; (8001234 <Paint_SetPixel+0x290>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4413      	add	r3, r2
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e088      	b.n	800122e <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800111c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	fa42 f303 	asr.w	r3, r2, r3
 8001128:	b25a      	sxtb	r2, r3
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4313      	orrs	r3, r2
 8001130:	b259      	sxtb	r1, r3
 8001132:	4b40      	ldr	r3, [pc, #256]	; (8001234 <Paint_SetPixel+0x290>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4413      	add	r3, r2
 800113a:	b2ca      	uxtb	r2, r1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e076      	b.n	800122e <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <Paint_SetPixel+0x290>)
 8001142:	8adb      	ldrh	r3, [r3, #22]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d137      	bne.n	80011b8 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	b29b      	uxth	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001152:	4a38      	ldr	r2, [pc, #224]	; (8001234 <Paint_SetPixel+0x290>)
 8001154:	8a52      	ldrh	r2, [r2, #18]
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	440b      	add	r3, r1
 800115c:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <Paint_SetPixel+0x290>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8001172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	22c0      	movs	r2, #192	; 0xc0
 800117c:	fa42 f303 	asr.w	r3, r2, r3
 8001180:	b25b      	sxtb	r3, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	b25a      	sxtb	r2, r3
 8001186:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800118a:	4013      	ands	r3, r2
 800118c:	b25b      	sxtb	r3, r3
 800118e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	019a      	lsls	r2, r3, #6
 8001194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b259      	sxtb	r1, r3
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <Paint_SetPixel+0x290>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4413      	add	r3, r2
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e03a      	b.n	800122e <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <Paint_SetPixel+0x290>)
 80011ba:	8adb      	ldrh	r3, [r3, #22]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d136      	bne.n	800122e <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80011c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011c2:	085b      	lsrs	r3, r3, #1
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011ca:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <Paint_SetPixel+0x290>)
 80011cc:	8a52      	ldrh	r2, [r2, #18]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	440b      	add	r3, r1
 80011d4:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <Paint_SetPixel+0x290>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80011e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	22f0      	movs	r2, #240	; 0xf0
 80011ec:	fa42 f303 	asr.w	r3, r2, r3
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011fa:	4013      	ands	r3, r2
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	011a      	lsls	r2, r3, #4
 8001204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa42 f303 	asr.w	r3, r2, r3
 8001210:	b25a      	sxtb	r2, r3
 8001212:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001216:	4313      	orrs	r3, r2
 8001218:	b259      	sxtb	r1, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <Paint_SetPixel+0x290>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	4413      	add	r3, r2
 8001222:	b2ca      	uxtb	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e002      	b.n	800122e <Paint_SetPixel+0x28a>
        return;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <Paint_SetPixel+0x28a>
        return;
 800122c:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000208 	.word	0x20000208
 8001238:	08006388 	.word	0x08006388

0800123c <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8001246:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <Paint_Clear+0x13c>)
 8001248:	8adb      	ldrh	r3, [r3, #22]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d125      	bne.n	800129a <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800124e:	2300      	movs	r3, #0
 8001250:	83fb      	strh	r3, [r7, #30]
 8001252:	e01c      	b.n	800128e <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001254:	2300      	movs	r3, #0
 8001256:	83bb      	strh	r3, [r7, #28]
 8001258:	e011      	b.n	800127e <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 800125a:	8bba      	ldrh	r2, [r7, #28]
 800125c:	8bfb      	ldrh	r3, [r7, #30]
 800125e:	4946      	ldr	r1, [pc, #280]	; (8001378 <Paint_Clear+0x13c>)
 8001260:	8a49      	ldrh	r1, [r1, #18]
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <Paint_Clear+0x13c>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8001278:	8bbb      	ldrh	r3, [r7, #28]
 800127a:	3301      	adds	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <Paint_Clear+0x13c>)
 8001280:	8a5b      	ldrh	r3, [r3, #18]
 8001282:	8bba      	ldrh	r2, [r7, #28]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3e8      	bcc.n	800125a <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001288:	8bfb      	ldrh	r3, [r7, #30]
 800128a:	3301      	adds	r3, #1
 800128c:	83fb      	strh	r3, [r7, #30]
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <Paint_Clear+0x13c>)
 8001290:	8a9b      	ldrh	r3, [r3, #20]
 8001292:	8bfa      	ldrh	r2, [r7, #30]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3dd      	bcc.n	8001254 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8001298:	e068      	b.n	800136c <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <Paint_Clear+0x13c>)
 800129c:	8adb      	ldrh	r3, [r3, #22]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d135      	bne.n	800130e <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	837b      	strh	r3, [r7, #26]
 80012a6:	e02c      	b.n	8001302 <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	833b      	strh	r3, [r7, #24]
 80012ac:	e021      	b.n	80012f2 <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80012ae:	8b3a      	ldrh	r2, [r7, #24]
 80012b0:	8b7b      	ldrh	r3, [r7, #26]
 80012b2:	4931      	ldr	r1, [pc, #196]	; (8001378 <Paint_Clear+0x13c>)
 80012b4:	8a49      	ldrh	r1, [r1, #18]
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	019b      	lsls	r3, r3, #6
 80012c2:	b25a      	sxtb	r2, r3
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b259      	sxtb	r1, r3
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <Paint_Clear+0x13c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	b2ca      	uxtb	r2, r1
 80012ea:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80012ec:	8b3b      	ldrh	r3, [r7, #24]
 80012ee:	3301      	adds	r3, #1
 80012f0:	833b      	strh	r3, [r7, #24]
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <Paint_Clear+0x13c>)
 80012f4:	8a5b      	ldrh	r3, [r3, #18]
 80012f6:	8b3a      	ldrh	r2, [r7, #24]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3d8      	bcc.n	80012ae <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80012fc:	8b7b      	ldrh	r3, [r7, #26]
 80012fe:	3301      	adds	r3, #1
 8001300:	837b      	strh	r3, [r7, #26]
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <Paint_Clear+0x13c>)
 8001304:	8a9b      	ldrh	r3, [r3, #20]
 8001306:	8b7a      	ldrh	r2, [r7, #26]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3cd      	bcc.n	80012a8 <Paint_Clear+0x6c>
}
 800130c:	e02e      	b.n	800136c <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <Paint_Clear+0x13c>)
 8001310:	8adb      	ldrh	r3, [r3, #22]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d12a      	bne.n	800136c <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8001316:	2300      	movs	r3, #0
 8001318:	82fb      	strh	r3, [r7, #22]
 800131a:	e022      	b.n	8001362 <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800131c:	2300      	movs	r3, #0
 800131e:	82bb      	strh	r3, [r7, #20]
 8001320:	e017      	b.n	8001352 <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8001322:	8aba      	ldrh	r2, [r7, #20]
 8001324:	8afb      	ldrh	r3, [r7, #22]
 8001326:	4914      	ldr	r1, [pc, #80]	; (8001378 <Paint_Clear+0x13c>)
 8001328:	8a49      	ldrh	r1, [r1, #18]
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	4413      	add	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	b25a      	sxtb	r2, r3
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	b25b      	sxtb	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b259      	sxtb	r1, r3
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <Paint_Clear+0x13c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4413      	add	r3, r2
 8001348:	b2ca      	uxtb	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800134c:	8abb      	ldrh	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	82bb      	strh	r3, [r7, #20]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <Paint_Clear+0x13c>)
 8001354:	8a5b      	ldrh	r3, [r3, #18]
 8001356:	8aba      	ldrh	r2, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3e2      	bcc.n	8001322 <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	3301      	adds	r3, #1
 8001360:	82fb      	strh	r3, [r7, #22]
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <Paint_Clear+0x13c>)
 8001364:	8a9b      	ldrh	r3, [r3, #20]
 8001366:	8afa      	ldrh	r2, [r7, #22]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3d7      	bcc.n	800131c <Paint_Clear+0xe0>
}
 800136c:	bf00      	nop
 800136e:	3724      	adds	r7, #36	; 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000208 	.word	0x20000208

0800137c <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4603      	mov	r3, r0
 8001386:	81fb      	strh	r3, [r7, #14]
 8001388:	460b      	mov	r3, r1
 800138a:	81bb      	strh	r3, [r7, #12]
 800138c:	4613      	mov	r3, r2
 800138e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001390:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <Paint_DrawChar+0x148>)
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	89fa      	ldrh	r2, [r7, #14]
 8001396:	429a      	cmp	r2, r3
 8001398:	d804      	bhi.n	80013a4 <Paint_DrawChar+0x28>
 800139a:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <Paint_DrawChar+0x148>)
 800139c:	88db      	ldrh	r3, [r3, #6]
 800139e:	89ba      	ldrh	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d903      	bls.n	80013ac <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80013a4:	4848      	ldr	r0, [pc, #288]	; (80014c8 <Paint_DrawChar+0x14c>)
 80013a6:	f004 fb6b 	bl	8005a80 <puts>
        return;
 80013aa:	e087      	b.n	80014bc <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	3b20      	subs	r3, #32
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	88d2      	ldrh	r2, [r2, #6]
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	8892      	ldrh	r2, [r2, #4]
 80013bc:	08d2      	lsrs	r2, r2, #3
 80013be:	b292      	uxth	r2, r2
 80013c0:	4611      	mov	r1, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	8892      	ldrh	r2, [r2, #4]
 80013c6:	f002 0207 	and.w	r2, r2, #7
 80013ca:	b292      	uxth	r2, r2
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	bf14      	ite	ne
 80013d0:	2201      	movne	r2, #1
 80013d2:	2200      	moveq	r2, #0
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440a      	add	r2, r1
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4413      	add	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	83fb      	strh	r3, [r7, #30]
 80013ec:	e061      	b.n	80014b2 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	83bb      	strh	r3, [r7, #28]
 80013f2:	e04c      	b.n	800148e <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80013f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013f6:	2bff      	cmp	r3, #255	; 0xff
 80013f8:	d118      	bne.n	800142c <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	8bbb      	ldrh	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	fa42 f303 	asr.w	r3, r2, r3
 800140c:	400b      	ands	r3, r1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d031      	beq.n	8001476 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001412:	89fa      	ldrh	r2, [r7, #14]
 8001414:	8bbb      	ldrh	r3, [r7, #28]
 8001416:	4413      	add	r3, r2
 8001418:	b298      	uxth	r0, r3
 800141a:	89ba      	ldrh	r2, [r7, #12]
 800141c:	8bfb      	ldrh	r3, [r7, #30]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fdbd 	bl	8000fa4 <Paint_SetPixel>
 800142a:	e024      	b.n	8001476 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	8bbb      	ldrh	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	fa42 f303 	asr.w	r3, r2, r3
 800143e:	400b      	ands	r3, r1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00c      	beq.n	800145e <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001444:	89fa      	ldrh	r2, [r7, #14]
 8001446:	8bbb      	ldrh	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	b298      	uxth	r0, r3
 800144c:	89ba      	ldrh	r2, [r7, #12]
 800144e:	8bfb      	ldrh	r3, [r7, #30]
 8001450:	4413      	add	r3, r2
 8001452:	b29b      	uxth	r3, r3
 8001454:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fda4 	bl	8000fa4 <Paint_SetPixel>
 800145c:	e00b      	b.n	8001476 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800145e:	89fa      	ldrh	r2, [r7, #14]
 8001460:	8bbb      	ldrh	r3, [r7, #28]
 8001462:	4413      	add	r3, r2
 8001464:	b298      	uxth	r0, r3
 8001466:	89ba      	ldrh	r2, [r7, #12]
 8001468:	8bfb      	ldrh	r3, [r7, #30]
 800146a:	4413      	add	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fd97 	bl	8000fa4 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001476:	8bbb      	ldrh	r3, [r7, #28]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b07      	cmp	r3, #7
 8001480:	d102      	bne.n	8001488 <Paint_DrawChar+0x10c>
                ptr++;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	83bb      	strh	r3, [r7, #28]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	889b      	ldrh	r3, [r3, #4]
 8001492:	8bba      	ldrh	r2, [r7, #28]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3ad      	bcc.n	80013f4 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <Paint_DrawChar+0x130>
            ptr++;
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80014ac:	8bfb      	ldrh	r3, [r7, #30]
 80014ae:	3301      	adds	r3, #1
 80014b0:	83fb      	strh	r3, [r7, #30]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	88db      	ldrh	r3, [r3, #6]
 80014b6:	8bfa      	ldrh	r2, [r7, #30]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d398      	bcc.n	80013ee <Paint_DrawChar+0x72>
    }// Write all
}
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000208 	.word	0x20000208
 80014c8:	080064ec 	.word	0x080064ec

080014cc <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	60ba      	str	r2, [r7, #8]
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4603      	mov	r3, r0
 80014d8:	81fb      	strh	r3, [r7, #14]
 80014da:	460b      	mov	r3, r1
 80014dc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80014e6:	4b21      	ldr	r3, [pc, #132]	; (800156c <Paint_DrawString_EN+0xa0>)
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	89fa      	ldrh	r2, [r7, #14]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d804      	bhi.n	80014fa <Paint_DrawString_EN+0x2e>
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <Paint_DrawString_EN+0xa0>)
 80014f2:	88db      	ldrh	r3, [r3, #6]
 80014f4:	89ba      	ldrh	r2, [r7, #12]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d931      	bls.n	800155e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <Paint_DrawString_EN+0xa4>)
 80014fc:	f004 fac0 	bl	8005a80 <puts>
        return;
 8001500:	e031      	b.n	8001566 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	8892      	ldrh	r2, [r2, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <Paint_DrawString_EN+0xa0>)
 800150c:	8892      	ldrh	r2, [r2, #4]
 800150e:	4293      	cmp	r3, r2
 8001510:	dd06      	ble.n	8001520 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	88da      	ldrh	r2, [r3, #6]
 800151a:	8abb      	ldrh	r3, [r7, #20]
 800151c:	4413      	add	r3, r2
 800151e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001520:	8abb      	ldrh	r3, [r7, #20]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	88d2      	ldrh	r2, [r2, #6]
 8001526:	4413      	add	r3, r2
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <Paint_DrawString_EN+0xa0>)
 800152a:	88d2      	ldrh	r2, [r2, #6]
 800152c:	4293      	cmp	r3, r2
 800152e:	dd03      	ble.n	8001538 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001534:	89bb      	ldrh	r3, [r7, #12]
 8001536:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	8ab9      	ldrh	r1, [r7, #20]
 800153e:	8af8      	ldrh	r0, [r7, #22]
 8001540:	8c3b      	ldrh	r3, [r7, #32]
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f7ff ff17 	bl	800137c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	889a      	ldrh	r2, [r3, #4]
 8001558:	8afb      	ldrh	r3, [r7, #22]
 800155a:	4413      	add	r3, r2
 800155c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1cd      	bne.n	8001502 <Paint_DrawString_EN+0x36>
    }
}
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000208 	.word	0x20000208
 8001570:	0800652c 	.word	0x0800652c

08001574 <Paint_DrawTime>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawTime(UWORD Xstart, UWORD Ystart, RTC_TimeTypeDef *pTime, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af02      	add	r7, sp, #8
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4603      	mov	r3, r0
 8001580:	81fb      	strh	r3, [r7, #14]
 8001582:	460b      	mov	r3, r1
 8001584:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 8001586:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <Paint_DrawTime+0x140>)
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	ca07      	ldmia	r2, {r0, r1, r2}
 800158e:	c303      	stmia	r3!, {r0, r1}
 8001590:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	889b      	ldrh	r3, [r3, #4]
 8001596:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    Paint_DrawChar(Xstart                           , Ystart, value[pTime->Hours / 10], Font, Color_Background, Color_Foreground);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <Paint_DrawTime+0x144>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3320      	adds	r3, #32
 80015a8:	443b      	add	r3, r7
 80015aa:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80015ae:	89b9      	ldrh	r1, [r7, #12]
 80015b0:	89f8      	ldrh	r0, [r7, #14]
 80015b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f7ff fede 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pTime->Hours % 10], Font, Color_Background, Color_Foreground);
 80015c0:	89fa      	ldrh	r2, [r7, #14]
 80015c2:	8bfb      	ldrh	r3, [r7, #30]
 80015c4:	4413      	add	r3, r2
 80015c6:	b298      	uxth	r0, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <Paint_DrawTime+0x144>)
 80015ce:	fba3 1302 	umull	r1, r3, r3, r2
 80015d2:	08d9      	lsrs	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3320      	adds	r3, #32
 80015e2:	443b      	add	r3, r7
 80015e4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80015e8:	89b9      	ldrh	r1, [r7, #12]
 80015ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f7ff fec2 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 80015f8:	89fa      	ldrh	r2, [r7, #14]
 80015fa:	8bfb      	ldrh	r3, [r7, #30]
 80015fc:	4413      	add	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	8bfb      	ldrh	r3, [r7, #30]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	b29b      	uxth	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b29a      	uxth	r2, r3
 800160a:	8bfb      	ldrh	r3, [r7, #30]
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	b298      	uxth	r0, r3
 8001614:	89b9      	ldrh	r1, [r7, #12]
 8001616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	223a      	movs	r2, #58	; 0x3a
 8001622:	f7ff feab 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pTime->Minutes / 10] , Font, Color_Background, Color_Foreground);
 8001626:	8bfb      	ldrh	r3, [r7, #30]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	4413      	add	r3, r2
 8001630:	b29a      	uxth	r2, r3
 8001632:	8bfb      	ldrh	r3, [r7, #30]
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	4413      	add	r3, r2
 800163a:	b298      	uxth	r0, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <Paint_DrawTime+0x144>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3320      	adds	r3, #32
 800164c:	443b      	add	r3, r7
 800164e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001652:	89b9      	ldrh	r1, [r7, #12]
 8001654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f7ff fe8d 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pTime->Minutes % 10] , Font, Color_Background, Color_Foreground);
 8001662:	8bfb      	ldrh	r3, [r7, #30]
 8001664:	461a      	mov	r2, r3
 8001666:	0052      	lsls	r2, r2, #1
 8001668:	4413      	add	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	4413      	add	r3, r2
 8001670:	b29a      	uxth	r2, r3
 8001672:	8bfb      	ldrh	r3, [r7, #30]
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b298      	uxth	r0, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	785a      	ldrb	r2, [r3, #1]
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <Paint_DrawTime+0x144>)
 8001682:	fba3 1302 	umull	r1, r3, r3, r2
 8001686:	08d9      	lsrs	r1, r3, #3
 8001688:	460b      	mov	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	3320      	adds	r3, #32
 8001696:	443b      	add	r3, r7
 8001698:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800169c:	89b9      	ldrh	r1, [r7, #12]
 800169e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f7ff fe68 	bl	800137c <Paint_DrawChar>
//    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
//    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pTime->Seconds / 10] , Font, Color_Background, Color_Foreground);
//    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pTime->Seconds % 10] , Font, Color_Background, Color_Foreground);
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	080065ac 	.word	0x080065ac
 80016b8:	cccccccd 	.word	0xcccccccd

080016bc <Paint_DrawDate>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawDate(UWORD Xstart, UWORD Ystart, RTC_DateTypeDef *pDate, sFONT* Font,
                    UWORD Color_Foreground, UWORD Color_Background)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60ba      	str	r2, [r7, #8]
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4603      	mov	r3, r0
 80016c8:	81fb      	strh	r3, [r7, #14]
 80016ca:	460b      	mov	r3, r1
 80016cc:	81bb      	strh	r3, [r7, #12]
    uint8_t value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 80016ce:	4a44      	ldr	r2, [pc, #272]	; (80017e0 <Paint_DrawDate+0x124>)
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016d6:	c303      	stmia	r3!, {r0, r1}
 80016d8:	801a      	strh	r2, [r3, #0]

    UWORD Dx = Font->Width;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	889b      	ldrh	r3, [r3, #4]
 80016de:	83fb      	strh	r3, [r7, #30]

    //Write data into the cache
    switch (pDate->WeekDay) {
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	f200 808b 	bhi.w	8001800 <Paint_DrawDate+0x144>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <Paint_DrawDate+0x34>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	0800170d 	.word	0x0800170d
 80016f4:	0800172b 	.word	0x0800172b
 80016f8:	08001749 	.word	0x08001749
 80016fc:	08001767 	.word	0x08001767
 8001700:	08001785 	.word	0x08001785
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017c1 	.word	0x080017c1
		case 0:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Monday", Font, Color_Foreground, Color_Background);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	88da      	ldrh	r2, [r3, #6]
 8001710:	89bb      	ldrh	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	b299      	uxth	r1, r3
 8001716:	89f8      	ldrh	r0, [r7, #14]
 8001718:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <Paint_DrawDate+0x128>)
 8001724:	f7ff fed2 	bl	80014cc <Paint_DrawString_EN>
			break;
 8001728:	e06e      	b.n	8001808 <Paint_DrawDate+0x14c>
		case 1:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Tuesday", Font, Color_Foreground, Color_Background);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	88da      	ldrh	r2, [r3, #6]
 800172e:	89bb      	ldrh	r3, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	b299      	uxth	r1, r3
 8001734:	89f8      	ldrh	r0, [r7, #14]
 8001736:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <Paint_DrawDate+0x12c>)
 8001742:	f7ff fec3 	bl	80014cc <Paint_DrawString_EN>
			break;
 8001746:	e05f      	b.n	8001808 <Paint_DrawDate+0x14c>
		case 2:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Wednesday", Font, Color_Foreground, Color_Background);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	88da      	ldrh	r2, [r3, #6]
 800174c:	89bb      	ldrh	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	b299      	uxth	r1, r3
 8001752:	89f8      	ldrh	r0, [r7, #14]
 8001754:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a23      	ldr	r2, [pc, #140]	; (80017ec <Paint_DrawDate+0x130>)
 8001760:	f7ff feb4 	bl	80014cc <Paint_DrawString_EN>
			break;
 8001764:	e050      	b.n	8001808 <Paint_DrawDate+0x14c>
		case 3:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Thursday", Font, Color_Foreground, Color_Background);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	88da      	ldrh	r2, [r3, #6]
 800176a:	89bb      	ldrh	r3, [r7, #12]
 800176c:	4413      	add	r3, r2
 800176e:	b299      	uxth	r1, r3
 8001770:	89f8      	ldrh	r0, [r7, #14]
 8001772:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <Paint_DrawDate+0x134>)
 800177e:	f7ff fea5 	bl	80014cc <Paint_DrawString_EN>
			break;
 8001782:	e041      	b.n	8001808 <Paint_DrawDate+0x14c>
		case 4:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Friday", Font, Color_Foreground, Color_Background);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	88da      	ldrh	r2, [r3, #6]
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	b299      	uxth	r1, r3
 800178e:	89f8      	ldrh	r0, [r7, #14]
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <Paint_DrawDate+0x138>)
 800179c:	f7ff fe96 	bl	80014cc <Paint_DrawString_EN>
			break;
 80017a0:	e032      	b.n	8001808 <Paint_DrawDate+0x14c>
		case 5:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Saturday", Font, Color_Foreground, Color_Background);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	88da      	ldrh	r2, [r3, #6]
 80017a6:	89bb      	ldrh	r3, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	b299      	uxth	r1, r3
 80017ac:	89f8      	ldrh	r0, [r7, #14]
 80017ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <Paint_DrawDate+0x13c>)
 80017ba:	f7ff fe87 	bl	80014cc <Paint_DrawString_EN>
			break;
 80017be:	e023      	b.n	8001808 <Paint_DrawDate+0x14c>
		case 6:
			Paint_DrawString_EN(Xstart, Ystart + Font->Height, "Sunday", Font, Color_Foreground, Color_Background);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	88da      	ldrh	r2, [r3, #6]
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	b299      	uxth	r1, r3
 80017ca:	89f8      	ldrh	r0, [r7, #14]
 80017cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <Paint_DrawDate+0x140>)
 80017d8:	f7ff fe78 	bl	80014cc <Paint_DrawString_EN>
			break;
 80017dc:	e014      	b.n	8001808 <Paint_DrawDate+0x14c>
 80017de:	bf00      	nop
 80017e0:	080065ac 	.word	0x080065ac
 80017e4:	080065b8 	.word	0x080065b8
 80017e8:	080065c0 	.word	0x080065c0
 80017ec:	080065c8 	.word	0x080065c8
 80017f0:	080065d4 	.word	0x080065d4
 80017f4:	080065e0 	.word	0x080065e0
 80017f8:	080065e8 	.word	0x080065e8
 80017fc:	080065f4 	.word	0x080065f4
		default:
			printf("Paint_DrawDate errror\n");
 8001800:	4873      	ldr	r0, [pc, #460]	; (80019d0 <Paint_DrawDate+0x314>)
 8001802:	f004 f93d 	bl	8005a80 <puts>
			break;
 8001806:	bf00      	nop
	}
    Paint_DrawChar(Xstart                           , Ystart, value[pDate->Date / 10], Font, Color_Background, Color_Foreground);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	4a71      	ldr	r2, [pc, #452]	; (80019d4 <Paint_DrawDate+0x318>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3320      	adds	r3, #32
 8001818:	443b      	add	r3, r7
 800181a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800181e:	89b9      	ldrh	r1, [r7, #12]
 8001820:	89f8      	ldrh	r0, [r7, #14]
 8001822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f7ff fda6 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx                      , Ystart, value[pDate->Date % 10], Font, Color_Background, Color_Foreground);
 8001830:	89fa      	ldrh	r2, [r7, #14]
 8001832:	8bfb      	ldrh	r3, [r7, #30]
 8001834:	4413      	add	r3, r2
 8001836:	b298      	uxth	r0, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	789a      	ldrb	r2, [r3, #2]
 800183c:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <Paint_DrawDate+0x318>)
 800183e:	fba3 1302 	umull	r1, r3, r3, r2
 8001842:	08d9      	lsrs	r1, r3, #3
 8001844:	460b      	mov	r3, r1
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3320      	adds	r3, #32
 8001852:	443b      	add	r3, r7
 8001854:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001858:	89b9      	ldrh	r1, [r7, #12]
 800185a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f7ff fd8a 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx  + Dx / 4 + Dx / 2   , Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 8001868:	89fa      	ldrh	r2, [r7, #14]
 800186a:	8bfb      	ldrh	r3, [r7, #30]
 800186c:	4413      	add	r3, r2
 800186e:	b29a      	uxth	r2, r3
 8001870:	8bfb      	ldrh	r3, [r7, #30]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	b29b      	uxth	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b29a      	uxth	r2, r3
 800187a:	8bfb      	ldrh	r3, [r7, #30]
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b298      	uxth	r0, r3
 8001884:	89b9      	ldrh	r1, [r7, #12]
 8001886:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	223a      	movs	r2, #58	; 0x3a
 8001892:	f7ff fd73 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 2 + Dx / 2         , Ystart, value[pDate->Month / 10] , Font, Color_Background, Color_Foreground);
 8001896:	8bfb      	ldrh	r3, [r7, #30]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	89fb      	ldrh	r3, [r7, #14]
 800189e:	4413      	add	r3, r2
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	8bfb      	ldrh	r3, [r7, #30]
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	b298      	uxth	r0, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <Paint_DrawDate+0x318>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	08db      	lsrs	r3, r3, #3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3320      	adds	r3, #32
 80018bc:	443b      	add	r3, r7
 80018be:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80018c2:	89b9      	ldrh	r1, [r7, #12]
 80018c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f7ff fd55 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 3 + Dx / 2         , Ystart, value[pDate->Month % 10] , Font, Color_Background, Color_Foreground);
 80018d2:	8bfb      	ldrh	r3, [r7, #30]
 80018d4:	461a      	mov	r2, r3
 80018d6:	0052      	lsls	r2, r2, #1
 80018d8:	4413      	add	r3, r2
 80018da:	b29a      	uxth	r2, r3
 80018dc:	89fb      	ldrh	r3, [r7, #14]
 80018de:	4413      	add	r3, r2
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	8bfb      	ldrh	r3, [r7, #30]
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b298      	uxth	r0, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	785a      	ldrb	r2, [r3, #1]
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <Paint_DrawDate+0x318>)
 80018f2:	fba3 1302 	umull	r1, r3, r3, r2
 80018f6:	08d9      	lsrs	r1, r3, #3
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	3320      	adds	r3, #32
 8001906:	443b      	add	r3, r7
 8001908:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800190c:	89b9      	ldrh	r1, [r7, #12]
 800190e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f7ff fd30 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 4 + Dx / 2 - Dx / 4, Ystart, ':'                    , Font, Color_Background, Color_Foreground);
 800191c:	8bfb      	ldrh	r3, [r7, #30]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	b29a      	uxth	r2, r3
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	4413      	add	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	8bfb      	ldrh	r3, [r7, #30]
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	4413      	add	r3, r2
 8001930:	b29a      	uxth	r2, r3
 8001932:	8bfb      	ldrh	r3, [r7, #30]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	b29b      	uxth	r3, r3
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b298      	uxth	r0, r3
 800193c:	89b9      	ldrh	r1, [r7, #12]
 800193e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	223a      	movs	r2, #58	; 0x3a
 800194a:	f7ff fd17 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 5                  , Ystart, value[pDate->Year / 10] , Font, Color_Background, Color_Foreground);
 800194e:	8bfb      	ldrh	r3, [r7, #30]
 8001950:	461a      	mov	r2, r3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4413      	add	r3, r2
 8001956:	b29a      	uxth	r2, r3
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	4413      	add	r3, r2
 800195c:	b298      	uxth	r0, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	78db      	ldrb	r3, [r3, #3]
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <Paint_DrawDate+0x318>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3320      	adds	r3, #32
 800196e:	443b      	add	r3, r7
 8001970:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001974:	89b9      	ldrh	r1, [r7, #12]
 8001976:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f7ff fcfc 	bl	800137c <Paint_DrawChar>
    Paint_DrawChar(Xstart + Dx * 6                  , Ystart, value[pDate->Year % 10] , Font, Color_Background, Color_Foreground);
 8001984:	8bfb      	ldrh	r3, [r7, #30]
 8001986:	461a      	mov	r2, r3
 8001988:	0052      	lsls	r2, r2, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	4413      	add	r3, r2
 8001994:	b298      	uxth	r0, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	78da      	ldrb	r2, [r3, #3]
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <Paint_DrawDate+0x318>)
 800199c:	fba3 1302 	umull	r1, r3, r3, r2
 80019a0:	08d9      	lsrs	r1, r3, #3
 80019a2:	460b      	mov	r3, r1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3320      	adds	r3, #32
 80019b0:	443b      	add	r3, r7
 80019b2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80019b6:	89b9      	ldrh	r1, [r7, #12]
 80019b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f7ff fcdb 	bl	800137c <Paint_DrawChar>
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	080065fc 	.word	0x080065fc
 80019d4:	cccccccd 	.word	0xcccccccd

080019d8 <Paint_DrawBitMap>:
info:
    Use a computer to convert the image into a corresponding array,
    and then embed the array directly into Imagedata.cpp as a .c file.
******************************************************************************/
void Paint_DrawBitMap(const unsigned char* image_buffer)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    UWORD x, y;
    UDOUBLE Addr = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]

    for (y = 0; y < Paint.HeightByte; y++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	81bb      	strh	r3, [r7, #12]
 80019e8:	e01e      	b.n	8001a28 <Paint_DrawBitMap+0x50>
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 80019ea:	2300      	movs	r3, #0
 80019ec:	81fb      	strh	r3, [r7, #14]
 80019ee:	e013      	b.n	8001a18 <Paint_DrawBitMap+0x40>
            Addr = x + y * Paint.WidthByte;
 80019f0:	89fa      	ldrh	r2, [r7, #14]
 80019f2:	89bb      	ldrh	r3, [r7, #12]
 80019f4:	4912      	ldr	r1, [pc, #72]	; (8001a40 <Paint_DrawBitMap+0x68>)
 80019f6:	8a49      	ldrh	r1, [r1, #18]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
            Paint.Image[Addr] = (unsigned char)image_buffer[Addr];
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	441a      	add	r2, r3
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <Paint_DrawBitMap+0x68>)
 8001a08:	6819      	ldr	r1, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	7812      	ldrb	r2, [r2, #0]
 8001a10:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < Paint.WidthByte; x++) {//8 pixel =  1 byte
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	3301      	adds	r3, #1
 8001a16:	81fb      	strh	r3, [r7, #14]
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <Paint_DrawBitMap+0x68>)
 8001a1a:	8a5b      	ldrh	r3, [r3, #18]
 8001a1c:	89fa      	ldrh	r2, [r7, #14]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e6      	bcc.n	80019f0 <Paint_DrawBitMap+0x18>
    for (y = 0; y < Paint.HeightByte; y++) {
 8001a22:	89bb      	ldrh	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	81bb      	strh	r3, [r7, #12]
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <Paint_DrawBitMap+0x68>)
 8001a2a:	8a9b      	ldrh	r3, [r3, #20]
 8001a2c:	89ba      	ldrh	r2, [r7, #12]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3db      	bcc.n	80019ea <Paint_DrawBitMap+0x12>
        }
    }
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000208 	.word	0x20000208

08001a44 <EPD_1IN54B_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_1IN54B_Reset(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <EPD_1IN54B_Reset+0x38>)
 8001a4e:	f000 fe24 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001a52:	2064      	movs	r0, #100	; 0x64
 8001a54:	f000 faa2 	bl	8001f9c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <EPD_1IN54B_Reset+0x38>)
 8001a5e:	f000 fe1c 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8001a62:	2002      	movs	r0, #2
 8001a64:	f000 fa9a 	bl	8001f9c <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <EPD_1IN54B_Reset+0x38>)
 8001a6e:	f000 fe14 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001a72:	2064      	movs	r0, #100	; 0x64
 8001a74:	f000 fa92 	bl	8001f9c <HAL_Delay>
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010800 	.word	0x40010800

08001a80 <EPD_1IN54B_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54B_SendCommand(UBYTE Reg)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <EPD_1IN54B_SendCommand+0x38>)
 8001a90:	f000 fe03 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2110      	movs	r1, #16
 8001a98:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <EPD_1IN54B_SendCommand+0x38>)
 8001a9a:	f000 fdfe 	bl	800269a <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f9d5 	bl	8000e50 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2110      	movs	r1, #16
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <EPD_1IN54B_SendCommand+0x38>)
 8001aac:	f000 fdf5 	bl	800269a <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40010800 	.word	0x40010800

08001abc <EPD_1IN54B_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54B_SendData(UBYTE Data)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2104      	movs	r1, #4
 8001aca:	480a      	ldr	r0, [pc, #40]	; (8001af4 <EPD_1IN54B_SendData+0x38>)
 8001acc:	f000 fde5 	bl	800269a <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	4807      	ldr	r0, [pc, #28]	; (8001af4 <EPD_1IN54B_SendData+0x38>)
 8001ad6:	f000 fde0 	bl	800269a <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f9b7 	bl	8000e50 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <EPD_1IN54B_SendData+0x38>)
 8001ae8:	f000 fdd7 	bl	800269a <HAL_GPIO_WritePin>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010800 	.word	0x40010800

08001af8 <EPD_1IN54B_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54B_ReadBusy(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8001afc:	4809      	ldr	r0, [pc, #36]	; (8001b24 <EPD_1IN54B_ReadBusy+0x2c>)
 8001afe:	f003 ffbf 	bl	8005a80 <puts>
    while(1) {
        if(DEV_Digital_Read(EPD_BUSY_PIN) == 1)
 8001b02:	2108      	movs	r1, #8
 8001b04:	4808      	ldr	r0, [pc, #32]	; (8001b28 <EPD_1IN54B_ReadBusy+0x30>)
 8001b06:	f000 fdb1 	bl	800266c <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d000      	beq.n	8001b12 <EPD_1IN54B_ReadBusy+0x1a>
 8001b10:	e7f7      	b.n	8001b02 <EPD_1IN54B_ReadBusy+0xa>
            break;
 8001b12:	bf00      	nop
    }
    DEV_Delay_ms(200);
 8001b14:	20c8      	movs	r0, #200	; 0xc8
 8001b16:	f000 fa41 	bl	8001f9c <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8001b1a:	4804      	ldr	r0, [pc, #16]	; (8001b2c <EPD_1IN54B_ReadBusy+0x34>)
 8001b1c:	f003 ffb0 	bl	8005a80 <puts>
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	08006614 	.word	0x08006614
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	0800662c 	.word	0x0800662c

08001b30 <EPD_1IN54B_SetLutBw>:
/******************************************************************************
function :	Set the look-up black and white tables
parameter:
******************************************************************************/
static void EPD_1IN54B_SetLutBw(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
    UWORD count;
    EPD_1IN54B_SendCommand(0x20);// g vcom
 8001b36:	2020      	movs	r0, #32
 8001b38:	f7ff ffa2 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	80fb      	strh	r3, [r7, #6]
 8001b40:	e008      	b.n	8001b54 <EPD_1IN54B_SetLutBw+0x24>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_vcom0[count]);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4a2b      	ldr	r2, [pc, #172]	; (8001bf4 <EPD_1IN54B_SetLutBw+0xc4>)
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ffb7 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	3301      	adds	r3, #1
 8001b52:	80fb      	strh	r3, [r7, #6]
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	2b0e      	cmp	r3, #14
 8001b58:	d9f3      	bls.n	8001b42 <EPD_1IN54B_SetLutBw+0x12>
    }
    EPD_1IN54B_SendCommand(0x21);// g ww --
 8001b5a:	2021      	movs	r0, #33	; 0x21
 8001b5c:	f7ff ff90 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	80fb      	strh	r3, [r7, #6]
 8001b64:	e008      	b.n	8001b78 <EPD_1IN54B_SetLutBw+0x48>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_w[count]);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <EPD_1IN54B_SetLutBw+0xc8>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffa5 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	3301      	adds	r3, #1
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	2b0e      	cmp	r3, #14
 8001b7c:	d9f3      	bls.n	8001b66 <EPD_1IN54B_SetLutBw+0x36>
    }
    EPD_1IN54B_SendCommand(0x22);// g bw r
 8001b7e:	2022      	movs	r0, #34	; 0x22
 8001b80:	f7ff ff7e 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	80fb      	strh	r3, [r7, #6]
 8001b88:	e008      	b.n	8001b9c <EPD_1IN54B_SetLutBw+0x6c>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_b[count]);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	; (8001bfc <EPD_1IN54B_SetLutBw+0xcc>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff93 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	2b0e      	cmp	r3, #14
 8001ba0:	d9f3      	bls.n	8001b8a <EPD_1IN54B_SetLutBw+0x5a>
    }
    EPD_1IN54B_SendCommand(0x23);// g wb w
 8001ba2:	2023      	movs	r0, #35	; 0x23
 8001ba4:	f7ff ff6c 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	80fb      	strh	r3, [r7, #6]
 8001bac:	e008      	b.n	8001bc0 <EPD_1IN54B_SetLutBw+0x90>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_g1[count]);
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4a13      	ldr	r2, [pc, #76]	; (8001c00 <EPD_1IN54B_SetLutBw+0xd0>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff81 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	2b0e      	cmp	r3, #14
 8001bc4:	d9f3      	bls.n	8001bae <EPD_1IN54B_SetLutBw+0x7e>
    }
    EPD_1IN54B_SendCommand(0x24);// g bb b
 8001bc6:	2024      	movs	r0, #36	; 0x24
 8001bc8:	f7ff ff5a 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	80fb      	strh	r3, [r7, #6]
 8001bd0:	e008      	b.n	8001be4 <EPD_1IN54B_SetLutBw+0xb4>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_g2[count]);
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <EPD_1IN54B_SetLutBw+0xd4>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff6f 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	3301      	adds	r3, #1
 8001be2:	80fb      	strh	r3, [r7, #6]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	2b0e      	cmp	r3, #14
 8001be8:	d9f3      	bls.n	8001bd2 <EPD_1IN54B_SetLutBw+0xa2>
    }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800e1d4 	.word	0x0800e1d4
 8001bf8:	0800e1e4 	.word	0x0800e1e4
 8001bfc:	0800e1f4 	.word	0x0800e1f4
 8001c00:	0800e204 	.word	0x0800e204
 8001c04:	0800e214 	.word	0x0800e214

08001c08 <EPD_1IN54B_SetLutRed>:
/******************************************************************************
function :	Set the look-up red tables
parameter:
******************************************************************************/
static void EPD_1IN54B_SetLutRed(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
    UWORD count;
    EPD_1IN54B_SendCommand(0x25);
 8001c0e:	2025      	movs	r0, #37	; 0x25
 8001c10:	f7ff ff36 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001c14:	2300      	movs	r3, #0
 8001c16:	80fb      	strh	r3, [r7, #6]
 8001c18:	e008      	b.n	8001c2c <EPD_1IN54B_SetLutRed+0x24>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_vcom1[count]);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <EPD_1IN54B_SetLutRed+0x7c>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff4b 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	80fb      	strh	r3, [r7, #6]
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	2b0e      	cmp	r3, #14
 8001c30:	d9f3      	bls.n	8001c1a <EPD_1IN54B_SetLutRed+0x12>
    }
    EPD_1IN54B_SendCommand(0x26);
 8001c32:	2026      	movs	r0, #38	; 0x26
 8001c34:	f7ff ff24 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	80fb      	strh	r3, [r7, #6]
 8001c3c:	e008      	b.n	8001c50 <EPD_1IN54B_SetLutRed+0x48>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_red0[count]);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <EPD_1IN54B_SetLutRed+0x80>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff39 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	80fb      	strh	r3, [r7, #6]
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b0e      	cmp	r3, #14
 8001c54:	d9f3      	bls.n	8001c3e <EPD_1IN54B_SetLutRed+0x36>
    }
    EPD_1IN54B_SendCommand(0x27);
 8001c56:	2027      	movs	r0, #39	; 0x27
 8001c58:	f7ff ff12 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for(count = 0; count < 15; count++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	80fb      	strh	r3, [r7, #6]
 8001c60:	e008      	b.n	8001c74 <EPD_1IN54B_SetLutRed+0x6c>
        EPD_1IN54B_SendData(EPD_1IN54B_lut_red1[count]);
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <EPD_1IN54B_SetLutRed+0x84>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff27 	bl	8001abc <EPD_1IN54B_SendData>
    for(count = 0; count < 15; count++) {
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	3301      	adds	r3, #1
 8001c72:	80fb      	strh	r3, [r7, #6]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	2b0e      	cmp	r3, #14
 8001c78:	d9f3      	bls.n	8001c62 <EPD_1IN54B_SetLutRed+0x5a>
    }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0800e224 	.word	0x0800e224
 8001c88:	0800e234 	.word	0x0800e234
 8001c8c:	0800e244 	.word	0x0800e244

08001c90 <EPD_1IN54B_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54B_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    EPD_1IN54B_Reset();
 8001c94:	f7ff fed6 	bl	8001a44 <EPD_1IN54B_Reset>

    EPD_1IN54B_SendCommand(0x01);// POWER_SETTING
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff fef1 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x07);
 8001c9e:	2007      	movs	r0, #7
 8001ca0:	f7ff ff0c 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff ff09 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x08);
 8001caa:	2008      	movs	r0, #8
 8001cac:	f7ff ff06 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff ff03 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x06);// BOOSTER_SOFT_START
 8001cb6:	2006      	movs	r0, #6
 8001cb8:	f7ff fee2 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x07);
 8001cbc:	2007      	movs	r0, #7
 8001cbe:	f7ff fefd 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x07);
 8001cc2:	2007      	movs	r0, #7
 8001cc4:	f7ff fefa 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x07);
 8001cc8:	2007      	movs	r0, #7
 8001cca:	f7ff fef7 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x04);// POWER_ON
 8001cce:	2004      	movs	r0, #4
 8001cd0:	f7ff fed6 	bl	8001a80 <EPD_1IN54B_SendCommand>

    EPD_1IN54B_ReadBusy();
 8001cd4:	f7ff ff10 	bl	8001af8 <EPD_1IN54B_ReadBusy>

    EPD_1IN54B_SendCommand(0X00);// PANEL_SETTING
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fed1 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0xcf);
 8001cde:	20cf      	movs	r0, #207	; 0xcf
 8001ce0:	f7ff feec 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0X50);// VCOM_AND_DATA_INTERVAL_SETTING
 8001ce4:	2050      	movs	r0, #80	; 0x50
 8001ce6:	f7ff fecb 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x37);// 0xF0
 8001cea:	2037      	movs	r0, #55	; 0x37
 8001cec:	f7ff fee6 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x30);// PLL_CONTROL
 8001cf0:	2030      	movs	r0, #48	; 0x30
 8001cf2:	f7ff fec5 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x39);
 8001cf6:	2039      	movs	r0, #57	; 0x39
 8001cf8:	f7ff fee0 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x61);// TCON_RESOLUTION set x and y
 8001cfc:	2061      	movs	r0, #97	; 0x61
 8001cfe:	f7ff febf 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0xC8);// 200
 8001d02:	20c8      	movs	r0, #200	; 0xc8
 8001d04:	f7ff feda 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);// y High eight: 0
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff fed7 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0xC8);// y Low eight: 200
 8001d0e:	20c8      	movs	r0, #200	; 0xc8
 8001d10:	f7ff fed4 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x82);// VCM_DC_SETTING_REGISTER
 8001d14:	2082      	movs	r0, #130	; 0x82
 8001d16:	f7ff feb3 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x0E);
 8001d1a:	200e      	movs	r0, #14
 8001d1c:	f7ff fece 	bl	8001abc <EPD_1IN54B_SendData>

    EPD_1IN54B_SetLutBw();
 8001d20:	f7ff ff06 	bl	8001b30 <EPD_1IN54B_SetLutBw>
    EPD_1IN54B_SetLutRed();
 8001d24:	f7ff ff70 	bl	8001c08 <EPD_1IN54B_SetLutRed>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <EPD_1IN54B_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54B_Display(const UBYTE *blackimage, const UBYTE *redimage)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
    UBYTE Temp = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	77fb      	strb	r3, [r7, #31]
    UWORD Width, Height;
    Width = (EPD_1IN54B_WIDTH % 8 == 0)? (EPD_1IN54B_WIDTH / 8 ): (EPD_1IN54B_WIDTH / 8 + 1);
 8001d3a:	2319      	movs	r3, #25
 8001d3c:	817b      	strh	r3, [r7, #10]
    Height = EPD_1IN54B_HEIGHT;
 8001d3e:	23c8      	movs	r3, #200	; 0xc8
 8001d40:	813b      	strh	r3, [r7, #8]

    EPD_1IN54B_SendCommand(0x10);// DATA_START_TRANSMISSION_1
 8001d42:	2010      	movs	r0, #16
 8001d44:	f7ff fe9c 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	83bb      	strh	r3, [r7, #28]
 8001d4c:	e065      	b.n	8001e1a <EPD_1IN54B_Display+0xee>
        for (UWORD i = 0; i < Width; i++) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	837b      	strh	r3, [r7, #26]
 8001d52:	e05b      	b.n	8001e0c <EPD_1IN54B_Display+0xe0>
            Temp = 0x00;
 8001d54:	2300      	movs	r3, #0
 8001d56:	77fb      	strb	r3, [r7, #31]
            for (int bit = 0; bit < 4; bit++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e01f      	b.n	8001d9e <EPD_1IN54B_Display+0x72>
                if ((blackimage[i + j * Width] & (0x80 >> bit)) != 0) {
 8001d5e:	8b7a      	ldrh	r2, [r7, #26]
 8001d60:	8bbb      	ldrh	r3, [r7, #28]
 8001d62:	8979      	ldrh	r1, [r7, #10]
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	2280      	movs	r2, #128	; 0x80
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa42 f303 	asr.w	r3, r2, r3
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <EPD_1IN54B_Display+0x6c>
                    Temp |= 0xC0 >> (bit * 2);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	22c0      	movs	r2, #192	; 0xc0
 8001d88:	fa42 f303 	asr.w	r3, r2, r3
 8001d8c:	b25a      	sxtb	r2, r3
 8001d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	77fb      	strb	r3, [r7, #31]
            for (int bit = 0; bit < 4; bit++) {
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	dddc      	ble.n	8001d5e <EPD_1IN54B_Display+0x32>
                }
            }
            EPD_1IN54B_SendData(Temp);
 8001da4:	7ffb      	ldrb	r3, [r7, #31]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fe88 	bl	8001abc <EPD_1IN54B_SendData>
            Temp = 0x00;
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
            for (int bit = 4; bit < 8; bit++) {
 8001db0:	2304      	movs	r3, #4
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e020      	b.n	8001df8 <EPD_1IN54B_Display+0xcc>
                if ((blackimage[i + j * Width] & (0x80 >> bit)) != 0) {
 8001db6:	8b7a      	ldrh	r2, [r7, #26]
 8001db8:	8bbb      	ldrh	r3, [r7, #28]
 8001dba:	8979      	ldrh	r1, [r7, #10]
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	fa42 f303 	asr.w	r3, r2, r3
 8001dd4:	400b      	ands	r3, r1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <EPD_1IN54B_Display+0xc6>
                    Temp |= 0xC0 >> ((bit - 4) * 2);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	3b04      	subs	r3, #4
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	22c0      	movs	r2, #192	; 0xc0
 8001de2:	fa42 f303 	asr.w	r3, r2, r3
 8001de6:	b25a      	sxtb	r2, r3
 8001de8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	77fb      	strb	r3, [r7, #31]
            for (int bit = 4; bit < 8; bit++) {
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	3301      	adds	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	dddb      	ble.n	8001db6 <EPD_1IN54B_Display+0x8a>
                }
            }
            EPD_1IN54B_SendData(Temp);
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fe5b 	bl	8001abc <EPD_1IN54B_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001e06:	8b7b      	ldrh	r3, [r7, #26]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	837b      	strh	r3, [r7, #26]
 8001e0c:	8b7a      	ldrh	r2, [r7, #26]
 8001e0e:	897b      	ldrh	r3, [r7, #10]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d39f      	bcc.n	8001d54 <EPD_1IN54B_Display+0x28>
    for (UWORD j = 0; j < Height; j++) {
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	83bb      	strh	r3, [r7, #28]
 8001e1a:	8bba      	ldrh	r2, [r7, #28]
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d395      	bcc.n	8001d4e <EPD_1IN54B_Display+0x22>
        }
    }
    DEV_Delay_ms(2);
 8001e22:	2002      	movs	r0, #2
 8001e24:	f000 f8ba 	bl	8001f9c <HAL_Delay>

    EPD_1IN54B_SendCommand(0x13);// DATA_START_TRANSMISSION_2
 8001e28:	2013      	movs	r0, #19
 8001e2a:	f7ff fe29 	bl	8001a80 <EPD_1IN54B_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	81fb      	strh	r3, [r7, #14]
 8001e32:	e019      	b.n	8001e68 <EPD_1IN54B_Display+0x13c>
        for (UWORD i = 0; i < Width; i++) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	81bb      	strh	r3, [r7, #12]
 8001e38:	e00f      	b.n	8001e5a <EPD_1IN54B_Display+0x12e>
            EPD_1IN54B_SendData(redimage[i + j * Width]);
 8001e3a:	89ba      	ldrh	r2, [r7, #12]
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	461a      	mov	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fe34 	bl	8001abc <EPD_1IN54B_SendData>
        for (UWORD i = 0; i < Width; i++) {
 8001e54:	89bb      	ldrh	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	81bb      	strh	r3, [r7, #12]
 8001e5a:	89ba      	ldrh	r2, [r7, #12]
 8001e5c:	897b      	ldrh	r3, [r7, #10]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d3eb      	bcc.n	8001e3a <EPD_1IN54B_Display+0x10e>
    for (UWORD j = 0; j < Height; j++) {
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	3301      	adds	r3, #1
 8001e66:	81fb      	strh	r3, [r7, #14]
 8001e68:	89fa      	ldrh	r2, [r7, #14]
 8001e6a:	893b      	ldrh	r3, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d3e1      	bcc.n	8001e34 <EPD_1IN54B_Display+0x108>
        }
    }
    DEV_Delay_ms(2);
 8001e70:	2002      	movs	r0, #2
 8001e72:	f000 f893 	bl	8001f9c <HAL_Delay>

    //Display refresh
    EPD_1IN54B_SendCommand(0x12);// DISPLAY_REFRESH
 8001e76:	2012      	movs	r0, #18
 8001e78:	f7ff fe02 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_ReadBusy();
 8001e7c:	f7ff fe3c 	bl	8001af8 <EPD_1IN54B_ReadBusy>
}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <EPD_1IN54B_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54B_Sleep(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
    EPD_1IN54B_SendCommand(0x50);// VCOM_AND_DATA_INTERVAL_SETTING
 8001e8c:	2050      	movs	r0, #80	; 0x50
 8001e8e:	f7ff fdf7 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x17);
 8001e92:	2017      	movs	r0, #23
 8001e94:	f7ff fe12 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x82);// VCM_DC_SETTING_REGISTER
 8001e98:	2082      	movs	r0, #130	; 0x82
 8001e9a:	f7ff fdf1 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fe0c 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendCommand(0x01);// POWER_SETTING
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff fdeb 	bl	8001a80 <EPD_1IN54B_SendCommand>
    EPD_1IN54B_SendData(0x02);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fe06 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fe03 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fe00 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_SendData(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fdfd 	bl	8001abc <EPD_1IN54B_SendData>
    EPD_1IN54B_ReadBusy();
 8001ec2:	f7ff fe19 	bl	8001af8 <EPD_1IN54B_ReadBusy>
    DEV_Delay_ms(1000);
 8001ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eca:	f000 f867 	bl	8001f9c <HAL_Delay>
	
    EPD_1IN54B_SendCommand(0x02);// POWER_OFF
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7ff fdd6 	bl	8001a80 <EPD_1IN54B_SendCommand>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x28>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x28>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f947 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7fe fd48 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f95f 	bl	80021e6 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f927 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	20000024 	.word	0x20000024
 8001f60:	20000020 	.word	0x20000020

08001f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_IncTick+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x20>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <HAL_IncTick+0x20>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20000024 	.word	0x20000024
 8001f84:	20000220 	.word	0x20000220

08001f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <HAL_GetTick+0x10>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	20000220 	.word	0x20000220

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fff0 	bl	8001f88 <HAL_GetTick>
 8001fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc2:	bf00      	nop
 8001fc4:	f7ff ffe0 	bl	8001f88 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000024 	.word	0x20000024

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4906      	ldr	r1, [pc, #24]	; (800207c <__NVIC_EnableIRQ+0x34>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f7ff ff90 	bl	8002080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff2d 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff42 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff90 	bl	80020d4 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff5f 	bl	8002080 <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff35 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffa2 	bl	8002138 <SysTick_Config>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d008      	beq.n	8002228 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2204      	movs	r2, #4
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e020      	b.n	800226a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 020e 	bic.w	r2, r2, #14
 8002236:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d005      	beq.n	8002298 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2204      	movs	r2, #4
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e051      	b.n	800233c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 020e 	bic.w	r2, r2, #14
 80022a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_DMA_Abort_IT+0xd4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d029      	beq.n	8002316 <HAL_DMA_Abort_IT+0xa2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a21      	ldr	r2, [pc, #132]	; (800234c <HAL_DMA_Abort_IT+0xd8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_Abort_IT+0x9e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_DMA_Abort_IT+0xdc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01a      	beq.n	800230c <HAL_DMA_Abort_IT+0x98>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_DMA_Abort_IT+0xe0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d012      	beq.n	8002306 <HAL_DMA_Abort_IT+0x92>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <HAL_DMA_Abort_IT+0xe4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00a      	beq.n	8002300 <HAL_DMA_Abort_IT+0x8c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_DMA_Abort_IT+0xe8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_DMA_Abort_IT+0x86>
 80022f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022f8:	e00e      	b.n	8002318 <HAL_DMA_Abort_IT+0xa4>
 80022fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022fe:	e00b      	b.n	8002318 <HAL_DMA_Abort_IT+0xa4>
 8002300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002304:	e008      	b.n	8002318 <HAL_DMA_Abort_IT+0xa4>
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	e005      	b.n	8002318 <HAL_DMA_Abort_IT+0xa4>
 800230c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002310:	e002      	b.n	8002318 <HAL_DMA_Abort_IT+0xa4>
 8002312:	2310      	movs	r3, #16
 8002314:	e000      	b.n	8002318 <HAL_DMA_Abort_IT+0xa4>
 8002316:	2301      	movs	r3, #1
 8002318:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_DMA_Abort_IT+0xec>)
 800231a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	4798      	blx	r3
    } 
  }
  return status;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40020008 	.word	0x40020008
 800234c:	4002001c 	.word	0x4002001c
 8002350:	40020030 	.word	0x40020030
 8002354:	40020044 	.word	0x40020044
 8002358:	40020058 	.word	0x40020058
 800235c:	4002006c 	.word	0x4002006c
 8002360:	40020000 	.word	0x40020000

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b08b      	sub	sp, #44	; 0x2c
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002376:	e169      	b.n	800264c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002378:	2201      	movs	r2, #1
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8158 	bne.w	8002646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a9a      	ldr	r2, [pc, #616]	; (8002604 <HAL_GPIO_Init+0x2a0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d05e      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023a0:	4a98      	ldr	r2, [pc, #608]	; (8002604 <HAL_GPIO_Init+0x2a0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d875      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023a6:	4a98      	ldr	r2, [pc, #608]	; (8002608 <HAL_GPIO_Init+0x2a4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d058      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023ac:	4a96      	ldr	r2, [pc, #600]	; (8002608 <HAL_GPIO_Init+0x2a4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d86f      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023b2:	4a96      	ldr	r2, [pc, #600]	; (800260c <HAL_GPIO_Init+0x2a8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d052      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023b8:	4a94      	ldr	r2, [pc, #592]	; (800260c <HAL_GPIO_Init+0x2a8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d869      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023be:	4a94      	ldr	r2, [pc, #592]	; (8002610 <HAL_GPIO_Init+0x2ac>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d04c      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023c4:	4a92      	ldr	r2, [pc, #584]	; (8002610 <HAL_GPIO_Init+0x2ac>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d863      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023ca:	4a92      	ldr	r2, [pc, #584]	; (8002614 <HAL_GPIO_Init+0x2b0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d046      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023d0:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_GPIO_Init+0x2b0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d85d      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d82a      	bhi.n	8002430 <HAL_GPIO_Init+0xcc>
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d859      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <HAL_GPIO_Init+0x80>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	0800245f 	.word	0x0800245f
 80023e8:	08002439 	.word	0x08002439
 80023ec:	0800244b 	.word	0x0800244b
 80023f0:	0800248d 	.word	0x0800248d
 80023f4:	08002493 	.word	0x08002493
 80023f8:	08002493 	.word	0x08002493
 80023fc:	08002493 	.word	0x08002493
 8002400:	08002493 	.word	0x08002493
 8002404:	08002493 	.word	0x08002493
 8002408:	08002493 	.word	0x08002493
 800240c:	08002493 	.word	0x08002493
 8002410:	08002493 	.word	0x08002493
 8002414:	08002493 	.word	0x08002493
 8002418:	08002493 	.word	0x08002493
 800241c:	08002493 	.word	0x08002493
 8002420:	08002493 	.word	0x08002493
 8002424:	08002493 	.word	0x08002493
 8002428:	08002441 	.word	0x08002441
 800242c:	08002455 	.word	0x08002455
 8002430:	4a79      	ldr	r2, [pc, #484]	; (8002618 <HAL_GPIO_Init+0x2b4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002436:	e02c      	b.n	8002492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e029      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	3304      	adds	r3, #4
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e024      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	3308      	adds	r3, #8
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e01f      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	330c      	adds	r3, #12
 800245a:	623b      	str	r3, [r7, #32]
          break;
 800245c:	e01a      	b.n	8002494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002466:	2304      	movs	r3, #4
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e013      	b.n	8002494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002474:	2308      	movs	r3, #8
 8002476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	611a      	str	r2, [r3, #16]
          break;
 800247e:	e009      	b.n	8002494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002480:	2308      	movs	r3, #8
 8002482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	615a      	str	r2, [r3, #20]
          break;
 800248a:	e003      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x130>
          break;
 8002492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d801      	bhi.n	800249e <HAL_GPIO_Init+0x13a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	e001      	b.n	80024a2 <HAL_GPIO_Init+0x13e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d802      	bhi.n	80024b0 <HAL_GPIO_Init+0x14c>
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	3b08      	subs	r3, #8
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	210f      	movs	r1, #15
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80b1 	beq.w	8002646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <HAL_GPIO_Init+0x2c0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_GPIO_Init+0x1ec>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_GPIO_Init+0x2c4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00d      	beq.n	800254c <HAL_GPIO_Init+0x1e8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3e      	ldr	r2, [pc, #248]	; (800262c <HAL_GPIO_Init+0x2c8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x1e4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <HAL_GPIO_Init+0x2cc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_GPIO_Init+0x1e0>
 8002540:	2303      	movs	r3, #3
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002544:	2304      	movs	r3, #4
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002550:	2300      	movs	r3, #0
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4093      	lsls	r3, r2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002562:	492f      	ldr	r1, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	492c      	ldr	r1, [pc, #176]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4928      	ldr	r1, [pc, #160]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4922      	ldr	r1, [pc, #136]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60cb      	str	r3, [r1, #12]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	491e      	ldr	r1, [pc, #120]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4918      	ldr	r1, [pc, #96]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4914      	ldr	r1, [pc, #80]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d021      	beq.n	8002638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e021      	b.n	8002646 <HAL_GPIO_Init+0x2e2>
 8002602:	bf00      	nop
 8002604:	10320000 	.word	0x10320000
 8002608:	10310000 	.word	0x10310000
 800260c:	10220000 	.word	0x10220000
 8002610:	10210000 	.word	0x10210000
 8002614:	10120000 	.word	0x10120000
 8002618:	10110000 	.word	0x10110000
 800261c:	40021000 	.word	0x40021000
 8002620:	40010000 	.word	0x40010000
 8002624:	40010800 	.word	0x40010800
 8002628:	40010c00 	.word	0x40010c00
 800262c:	40011000 	.word	0x40011000
 8002630:	40011400 	.word	0x40011400
 8002634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_GPIO_Init+0x304>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43db      	mvns	r3, r3
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002642:	4013      	ands	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3301      	adds	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f ae8e 	bne.w	8002378 <HAL_GPIO_Init+0x14>
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	372c      	adds	r7, #44	; 0x2c
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
 80026a6:	4613      	mov	r3, r2
 80026a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026aa:	787b      	ldrb	r3, [r7, #1]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026b6:	e003      	b.n	80026c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	041a      	lsls	r2, r3, #16
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	400b      	ands	r3, r1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fd28 	bl	8000170 <HAL_GPIO_EXTI_Callback>
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010400 	.word	0x40010400

0800272c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	420e0020 	.word	0x420e0020

08002744 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002758:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_PWR_EnableWakeUpPin+0x34>)
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	461a      	mov	r2, r3
 800276a:	2301      	movs	r3, #1
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	10838020 	.word	0x10838020

0800277c <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002798:	bf30      	wfi
}
 800279a:	bf00      	nop
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40007000 	.word	0x40007000
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e272      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8087 	beq.w	80028da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027cc:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d00c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d8:	4b8f      	ldr	r3, [pc, #572]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d112      	bne.n	800280a <HAL_RCC_OscConfig+0x5e>
 80027e4:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d10b      	bne.n	800280a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d06c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x12c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d168      	bne.n	80028d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e24c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x76>
 8002814:	4b80      	ldr	r3, [pc, #512]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a7f      	ldr	r2, [pc, #508]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e02e      	b.n	8002880 <HAL_RCC_OscConfig+0xd4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x98>
 800282a:	4b7b      	ldr	r3, [pc, #492]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b78      	ldr	r3, [pc, #480]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a77      	ldr	r2, [pc, #476]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800283c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e01d      	b.n	8002880 <HAL_RCC_OscConfig+0xd4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0xbc>
 800284e:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6e      	ldr	r2, [pc, #440]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0xd4>
 8002868:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6a      	ldr	r2, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a67      	ldr	r2, [pc, #412]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800287a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d013      	beq.n	80028b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff fb7e 	bl	8001f88 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fb7a 	bl	8001f88 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e200      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0xe4>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff fb6a 	bl	8001f88 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fb66 	bl	8001f88 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1ec      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x10c>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d063      	beq.n	80029ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e6:	4b4c      	ldr	r3, [pc, #304]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f2:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x18c>
 80028fe:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b43      	ldr	r3, [pc, #268]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x176>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1c0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4939      	ldr	r1, [pc, #228]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x270>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7ff fb1f 	bl	8001f88 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294e:	f7ff fb1b 	bl	8001f88 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1a1      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4927      	ldr	r1, [pc, #156]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x270>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff fafe 	bl	8001f88 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7ff fafa 	bl	8001f88 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e180      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03a      	beq.n	8002a30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d019      	beq.n	80029f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_RCC_OscConfig+0x274>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7ff fade 	bl	8001f88 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7ff fada 	bl	8001f88 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e160      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ee:	2001      	movs	r0, #1
 80029f0:	f000 face 	bl	8002f90 <RCC_Delay>
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_RCC_OscConfig+0x274>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fc:	f7ff fac4 	bl	8001f88 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a02:	e00f      	b.n	8002a24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a04:	f7ff fac0 	bl	8001f88 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d908      	bls.n	8002a24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e146      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	42420000 	.word	0x42420000
 8002a20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	4b92      	ldr	r3, [pc, #584]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e9      	bne.n	8002a04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80a6 	beq.w	8002b8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a87      	ldr	r2, [pc, #540]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7ff fa81 	bl	8001f88 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7ff fa7d 	bl	8001f88 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e103      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4c8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x312>
 8002ab0:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	e02d      	b.n	8002b1a <HAL_RCC_OscConfig+0x36e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x334>
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	4a69      	ldr	r2, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6213      	str	r3, [r2, #32]
 8002ad2:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a66      	ldr	r2, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	6213      	str	r3, [r2, #32]
 8002ade:	e01c      	b.n	8002b1a <HAL_RCC_OscConfig+0x36e>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCC_OscConfig+0x356>
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a60      	ldr	r2, [pc, #384]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	e00b      	b.n	8002b1a <HAL_RCC_OscConfig+0x36e>
 8002b02:	4b5b      	ldr	r3, [pc, #364]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6213      	str	r3, [r2, #32]
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d015      	beq.n	8002b4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fa31 	bl	8001f88 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7ff fa2d 	bl	8001f88 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0b1      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCC_OscConfig+0x37e>
 8002b4c:	e014      	b.n	8002b78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff fa1b 	bl	8001f88 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7ff fa17 	bl	8001f88 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e09b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d061      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d146      	bne.n	8002c36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x4cc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7ff f9eb 	bl	8001f88 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7ff f9e7 	bl	8001f88 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e06d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc8:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4921      	ldr	r1, [pc, #132]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf0:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a19      	ldr	r1, [r3, #32]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	430b      	orrs	r3, r1
 8002c02:	491b      	ldr	r1, [pc, #108]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7ff f9bb 	bl	8001f88 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7ff f9b7 	bl	8001f88 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e03d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x46a>
 8002c34:	e035      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f9a4 	bl	8001f88 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7ff f9a0 	bl	8001f88 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e026      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x498>
 8002c62:	e01e      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e019      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_OscConfig+0x500>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000

08002cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0d0      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	4965      	ldr	r1, [pc, #404]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0b8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d040      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e073      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06b      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4936      	ldr	r1, [pc, #216]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7ff f8f2 	bl	8001f88 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7ff f8ee 	bl	8001f88 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e053      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d210      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	4922      	ldr	r1, [pc, #136]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e032      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4916      	ldr	r1, [pc, #88]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e3e:	f000 f821 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e42:	4602      	mov	r2, r0
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	5ccb      	ldrb	r3, [r1, r3]
 8002e52:	fa22 f303 	lsr.w	r3, r2, r3
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_RCC_ClockConfig+0x1cc>)
 8002e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1d0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff f850 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080079d4 	.word	0x080079d4
 8002e7c:	20000004 	.word	0x20000004
 8002e80:	20000020 	.word	0x20000020

08002e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x36>
 8002eb2:	e027      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002eb6:	613b      	str	r3, [r7, #16]
      break;
 8002eb8:	e027      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	0c9b      	lsrs	r3, r3, #18
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ec4:	5cd3      	ldrb	r3, [r2, r3]
 8002ec6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0c5b      	lsrs	r3, r3, #17
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ee6:	fb03 f202 	mul.w	r2, r3, r2
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e004      	b.n	8002efe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	613b      	str	r3, [r7, #16]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f06:	613b      	str	r3, [r7, #16]
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	693b      	ldr	r3, [r7, #16]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	007a1200 	.word	0x007a1200
 8002f20:	0800e254 	.word	0x0800e254
 8002f24:	0800e264 	.word	0x0800e264
 8002f28:	003d0900 	.word	0x003d0900

08002f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b02      	ldr	r3, [pc, #8]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000004 	.word	0x20000004

08002f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f44:	f7ff fff2 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	080079e4 	.word	0x080079e4

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f6c:	f7ff ffde 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	0adb      	lsrs	r3, r3, #11
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	080079e4 	.word	0x080079e4

08002f90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <RCC_Delay+0x34>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <RCC_Delay+0x38>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0a5b      	lsrs	r3, r3, #9
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fac:	bf00      	nop
  }
  while (Delay --);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1e5a      	subs	r2, r3, #1
 8002fb2:	60fa      	str	r2, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f9      	bne.n	8002fac <RCC_Delay+0x1c>
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	20000004 	.word	0x20000004
 8002fc8:	10624dd3 	.word	0x10624dd3

08002fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d07d      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a4b      	ldr	r2, [pc, #300]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	61d3      	str	r3, [r2, #28]
 8003004:	4b49      	ldr	r3, [pc, #292]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d118      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a42      	ldr	r2, [pc, #264]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302c:	f7fe ffac 	bl	8001f88 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	e008      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fe ffa8 	bl	8001f88 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e06d      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d02e      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d027      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307a:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003086:	4a29      	ldr	r2, [pc, #164]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d014      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe ff77 	bl	8001f88 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe ff73 	bl	8001f88 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e036      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ee      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4a13      	ldr	r2, [pc, #76]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	490b      	ldr	r1, [pc, #44]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	40007000 	.word	0x40007000
 8003134:	42420440 	.word	0x42420440

08003138 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b10      	cmp	r3, #16
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b10      	cmp	r3, #16
 800315e:	f200 808a 	bhi.w	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d045      	beq.n	80031f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d075      	beq.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800316e:	e082      	b.n	8003276 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003176:	4b45      	ldr	r3, [pc, #276]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d07b      	beq.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	0c9b      	lsrs	r3, r3, #18
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	4a41      	ldr	r2, [pc, #260]	; (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d015      	beq.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319a:	4b3c      	ldr	r3, [pc, #240]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0c5b      	lsrs	r3, r3, #17
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031b4:	4a38      	ldr	r2, [pc, #224]	; (8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e004      	b.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031d0:	4b2e      	ldr	r3, [pc, #184]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031dc:	d102      	bne.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	61bb      	str	r3, [r7, #24]
      break;
 80031e2:	e04a      	b.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
      break;
 80031f2:	e042      	b.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003204:	d108      	bne.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	e01f      	b.n	8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003222:	d109      	bne.n	8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003230:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e00f      	b.n	8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003242:	d11c      	bne.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d016      	beq.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003250:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003254:	61bb      	str	r3, [r7, #24]
      break;
 8003256:	e012      	b.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003258:	e011      	b.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800325a:	f7ff fe85 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 800325e:	4602      	mov	r2, r0
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0b9b      	lsrs	r3, r3, #14
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	61bb      	str	r3, [r7, #24]
      break;
 8003274:	e004      	b.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003276:	bf00      	nop
 8003278:	e002      	b.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800327e:	bf00      	nop
    }
  }
  return (frequency);
 8003280:	69bb      	ldr	r3, [r7, #24]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	0800e268 	.word	0x0800e268
 8003294:	0800e278 	.word	0x0800e278
 8003298:	007a1200 	.word	0x007a1200
 800329c:	003d0900 	.word	0x003d0900
 80032a0:	aaaaaaab 	.word	0xaaaaaaab

080032a4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07a      	b.n	80033b0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7c5b      	ldrb	r3, [r3, #17]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fb8e 	bl	80009ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fb14 	bl	8003904 <HAL_RTC_WaitForSynchro>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2204      	movs	r2, #4
 80032e6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e061      	b.n	80033b0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fbcd 	bl	8003a8c <RTC_EnterInitMode>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2204      	movs	r2, #4
 80032fc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e056      	b.n	80033b0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0207 	bic.w	r2, r2, #7
 8003310:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800331a:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <HAL_RTC_Init+0x114>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <HAL_RTC_Init+0x114>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RTC_Init+0x114>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	4921      	ldr	r1, [pc, #132]	; (80033b8 <HAL_RTC_Init+0x114>)
 8003334:	4313      	orrs	r3, r2
 8003336:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d003      	beq.n	800334a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	e00e      	b.n	8003368 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800334a:	2001      	movs	r0, #1
 800334c:	f7ff fef4 	bl	8003138 <HAL_RCCEx_GetPeriphCLKFreq>
 8003350:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e026      	b.n	80033b0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3b01      	subs	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	0c1a      	lsrs	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f002 020f 	and.w	r2, r2, #15
 8003374:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	b292      	uxth	r2, r2
 800337e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fbab 	bl	8003adc <RTC_ExitInitMode>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e00c      	b.n	80033b0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
  }
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40006c00 	.word	0x40006c00

080033bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RTC_SetTime+0x20>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e080      	b.n	80034e2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	7c1b      	ldrb	r3, [r3, #16]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_RTC_SetTime+0x30>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e07a      	b.n	80034e2 <HAL_RTC_SetTime+0x126>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2202      	movs	r2, #2
 80033f6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003408:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	4619      	mov	r1, r3
 8003412:	460b      	mov	r3, r1
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a5b      	subs	r3, r3, r1
 8003418:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800341a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003420:	4413      	add	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e01e      	b.n	8003464 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fb9b 	bl	8003b66 <RTC_Bcd2ToByte>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003438:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fb90 	bl	8003b66 <RTC_Bcd2ToByte>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003452:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	789b      	ldrb	r3, [r3, #2]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fb84 	bl	8003b66 <RTC_Bcd2ToByte>
 800345e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003460:	4423      	add	r3, r4
 8003462:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003464:	6979      	ldr	r1, [r7, #20]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 faa9 	bl	80039be <RTC_WriteTimeCounter>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2204      	movs	r2, #4
 8003476:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02f      	b.n	80034e2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0205 	bic.w	r2, r2, #5
 8003490:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 faba 	bl	8003a0c <RTC_ReadAlarmCounter>
 8003498:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d018      	beq.n	80034d4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d214      	bcs.n	80034d4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80034b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034b4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fac0 	bl	8003a3e <RTC_WriteAlarmCounter>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2204      	movs	r2, #4
 80034c8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e006      	b.n	80034e2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd90      	pop	{r4, r7, pc}
	...

080034ec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RTC_GetTime+0x28>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0b5      	b.n	8003684 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0ac      	b.n	8003684 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fa17 	bl	800395e <RTC_ReadTimeCounter>
 8003530:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4a55      	ldr	r2, [pc, #340]	; (800368c <HAL_RTC_GetTime+0x1a0>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0adb      	lsrs	r3, r3, #11
 800353c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <HAL_RTC_GetTime+0x1a0>)
 8003542:	fba3 1302 	umull	r1, r3, r3, r2
 8003546:	0adb      	lsrs	r3, r3, #11
 8003548:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_RTC_GetTime+0x1a4>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4a4a      	ldr	r2, [pc, #296]	; (800368c <HAL_RTC_GetTime+0x1a0>)
 8003564:	fba2 1203 	umull	r1, r2, r2, r3
 8003568:	0ad2      	lsrs	r2, r2, #11
 800356a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800356e:	fb01 f202 	mul.w	r2, r1, r2
 8003572:	1a9a      	subs	r2, r3, r2
 8003574:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RTC_GetTime+0x1a4>)
 8003576:	fba3 1302 	umull	r1, r3, r3, r2
 800357a:	0959      	lsrs	r1, r3, #5
 800357c:	460b      	mov	r3, r1
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a5b      	subs	r3, r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	1ad1      	subs	r1, r2, r3
 8003586:	b2ca      	uxtb	r2, r1
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b17      	cmp	r3, #23
 8003590:	d955      	bls.n	800363e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4a3f      	ldr	r2, [pc, #252]	; (8003694 <HAL_RTC_GetTime+0x1a8>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	4b3c      	ldr	r3, [pc, #240]	; (8003694 <HAL_RTC_GetTime+0x1a8>)
 80035a2:	fba3 2301 	umull	r2, r3, r3, r1
 80035a6:	091a      	lsrs	r2, r3, #4
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	1aca      	subs	r2, r1, r3
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fa27 	bl	8003a0c <RTC_ReadAlarmCounter>
 80035be:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d008      	beq.n	80035da <HAL_RTC_GetTime+0xee>
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d904      	bls.n	80035da <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e002      	b.n	80035e0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_RTC_GetTime+0x1ac>)
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035ee:	69b9      	ldr	r1, [r7, #24]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f9e4 	bl	80039be <RTC_WriteTimeCounter>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e041      	b.n	8003684 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d00c      	beq.n	8003622 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4413      	add	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003610:	69f9      	ldr	r1, [r7, #28]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa13 	bl	8003a3e <RTC_WriteAlarmCounter>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e030      	b.n	8003684 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fa0a 	bl	8003a3e <RTC_WriteAlarmCounter>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e027      	b.n	8003684 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fab2 	bl	8003ba0 <RTC_DateUpdate>
 800363c:	e003      	b.n	8003646 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01a      	beq.n	8003682 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fa6b 	bl	8003b2c <RTC_ByteToBcd2>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fa62 	bl	8003b2c <RTC_ByteToBcd2>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	789b      	ldrb	r3, [r3, #2]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fa59 	bl	8003b2c <RTC_ByteToBcd2>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	91a2b3c5 	.word	0x91a2b3c5
 8003690:	88888889 	.word	0x88888889
 8003694:	aaaaaaab 	.word	0xaaaaaaab
 8003698:	00015180 	.word	0x00015180

0800369c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_RTC_SetDate+0x24>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e097      	b.n	80037f4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	7c1b      	ldrb	r3, [r3, #16]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d101      	bne.n	80036d0 <HAL_RTC_SetDate+0x34>
 80036cc:	2302      	movs	r3, #2
 80036ce:	e091      	b.n	80037f4 <HAL_RTC_SetDate+0x158>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2202      	movs	r2, #2
 80036da:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	78da      	ldrb	r2, [r3, #3]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	785a      	ldrb	r2, [r3, #1]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	789a      	ldrb	r2, [r3, #2]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	739a      	strb	r2, [r3, #14]
 80036fa:	e01a      	b.n	8003732 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	78db      	ldrb	r3, [r3, #3]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa30 	bl	8003b66 <RTC_Bcd2ToByte>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fa27 	bl	8003b66 <RTC_Bcd2ToByte>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	789b      	ldrb	r3, [r3, #2]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fa1e 	bl	8003b66 <RTC_Bcd2ToByte>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	7bdb      	ldrb	r3, [r3, #15]
 8003736:	4618      	mov	r0, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	7b59      	ldrb	r1, [r3, #13]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	7b9b      	ldrb	r3, [r3, #14]
 8003740:	461a      	mov	r2, r3
 8003742:	f000 fb09 	bl	8003d58 <RTC_WeekDayNum>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	7b1a      	ldrb	r2, [r3, #12]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f901 	bl	800395e <RTC_ReadTimeCounter>
 800375c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_RTC_SetDate+0x160>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0adb      	lsrs	r3, r3, #11
 8003768:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b18      	cmp	r3, #24
 800376e:	d93a      	bls.n	80037e6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	4a23      	ldr	r2, [pc, #140]	; (8003800 <HAL_RTC_SetDate+0x164>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	4a22      	ldr	r2, [pc, #136]	; (8003804 <HAL_RTC_SetDate+0x168>)
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f918 	bl	80039be <RTC_WriteTimeCounter>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2204      	movs	r2, #4
 8003798:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e027      	b.n	80037f4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f931 	bl	8003a0c <RTC_ReadAlarmCounter>
 80037aa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d018      	beq.n	80037e6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d214      	bcs.n	80037e6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80037c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80037c6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80037c8:	69b9      	ldr	r1, [r7, #24]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f937 	bl	8003a3e <RTC_WriteAlarmCounter>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2204      	movs	r2, #4
 80037da:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e006      	b.n	80037f4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	91a2b3c5 	.word	0x91a2b3c5
 8003800:	aaaaaaab 	.word	0xaaaaaaab
 8003804:	00015180 	.word	0x00015180

08003808 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2100      	movs	r1, #0
 800381a:	460a      	mov	r2, r1
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	460a      	mov	r2, r1
 8003820:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_RTC_GetDate+0x26>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e03a      	b.n	80038a8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	2200      	movs	r2, #0
 8003838:	4619      	mov	r1, r3
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fe56 	bl	80034ec <HAL_RTC_GetTime>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e02e      	b.n	80038a8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	7b1a      	ldrb	r2, [r3, #12]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	7bda      	ldrb	r2, [r3, #15]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	7b5a      	ldrb	r2, [r3, #13]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	7b9a      	ldrb	r2, [r3, #14]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01a      	beq.n	80038a6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	78db      	ldrb	r3, [r3, #3]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f959 	bl	8003b2c <RTC_ByteToBcd2>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	785b      	ldrb	r3, [r3, #1]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 f950 	bl	8003b2c <RTC_ByteToBcd2>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	789b      	ldrb	r3, [r3, #2]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 f947 	bl	8003b2c <RTC_ByteToBcd2>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fc fc79 	bl	80001cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0202 	bic.w	r2, r2, #2
 80038e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RTC_AlarmIRQHandler+0x50>)
 80038ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038f0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	745a      	strb	r2, [r3, #17]
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e01d      	b.n	8003956 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0208 	bic.w	r2, r2, #8
 8003928:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800392a:	f7fe fb2d 	bl	8001f88 <HAL_GetTick>
 800392e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003930:	e009      	b.n	8003946 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003932:	f7fe fb29 	bl	8001f88 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003940:	d901      	bls.n	8003946 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e007      	b.n	8003956 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ee      	beq.n	8003932 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800395e:	b480      	push	{r7}
 8003960:	b087      	sub	sp, #28
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	827b      	strh	r3, [r7, #18]
 800396a:	2300      	movs	r3, #0
 800396c:	823b      	strh	r3, [r7, #16]
 800396e:	2300      	movs	r3, #0
 8003970:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800398e:	8a7a      	ldrh	r2, [r7, #18]
 8003990:	8a3b      	ldrh	r3, [r7, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	d008      	beq.n	80039a8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003996:	8a3b      	ldrh	r3, [r7, #16]
 8003998:	041a      	lsls	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e004      	b.n	80039b2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80039a8:	8a7b      	ldrh	r3, [r7, #18]
 80039aa:	041a      	lsls	r2, r3, #16
 80039ac:	89fb      	ldrh	r3, [r7, #14]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80039b2:	697b      	ldr	r3, [r7, #20]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f85d 	bl	8003a8c <RTC_EnterInitMode>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e011      	b.n	8003a02 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	0c12      	lsrs	r2, r2, #16
 80039e6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b292      	uxth	r2, r2
 80039f0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f872 	bl	8003adc <RTC_ExitInitMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	81fb      	strh	r3, [r7, #14]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003a2c:	89fb      	ldrh	r3, [r7, #14]
 8003a2e:	041a      	lsls	r2, r3, #16
 8003a30:	89bb      	ldrh	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f81d 	bl	8003a8c <RTC_EnterInitMode>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e011      	b.n	8003a82 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	0c12      	lsrs	r2, r2, #16
 8003a66:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f832 	bl	8003adc <RTC_ExitInitMode>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a98:	f7fe fa76 	bl	8001f88 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a9e:	e009      	b.n	8003ab4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003aa0:	f7fe fa72 	bl	8001f88 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d901      	bls.n	8003ab4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e00f      	b.n	8003ad4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0210 	orr.w	r2, r2, #16
 8003ad0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0210 	bic.w	r2, r2, #16
 8003af6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003af8:	f7fe fa46 	bl	8001f88 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003afe:	e009      	b.n	8003b14 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b00:	f7fe fa42 	bl	8001f88 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b0e:	d901      	bls.n	8003b14 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e007      	b.n	8003b24 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ee      	beq.n	8003b00 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003b3a:	e005      	b.n	8003b48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	3b0a      	subs	r3, #10
 8003b46:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d8f6      	bhi.n	8003b3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b2db      	uxtb	r3, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	b2db      	uxtb	r3, r3
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	7bdb      	ldrb	r3, [r3, #15]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7b5b      	ldrb	r3, [r3, #13]
 8003bc4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7b9b      	ldrb	r3, [r3, #14]
 8003bca:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e06f      	b.n	8003cb2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d011      	beq.n	8003bfc <RTC_DateUpdate+0x5c>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d00e      	beq.n	8003bfc <RTC_DateUpdate+0x5c>
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d00b      	beq.n	8003bfc <RTC_DateUpdate+0x5c>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b07      	cmp	r3, #7
 8003be8:	d008      	beq.n	8003bfc <RTC_DateUpdate+0x5c>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d005      	beq.n	8003bfc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d002      	beq.n	8003bfc <RTC_DateUpdate+0x5c>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	d117      	bne.n	8003c2c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b1e      	cmp	r3, #30
 8003c00:	d803      	bhi.n	8003c0a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c08:	e050      	b.n	8003cac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d005      	beq.n	8003c1c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3301      	adds	r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c16:	2301      	movs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c1a:	e047      	b.n	8003cac <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c20:	2301      	movs	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
          year++;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003c2a:	e03f      	b.n	8003cac <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d008      	beq.n	8003c44 <RTC_DateUpdate+0xa4>
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d005      	beq.n	8003c44 <RTC_DateUpdate+0xa4>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b09      	cmp	r3, #9
 8003c3c:	d002      	beq.n	8003c44 <RTC_DateUpdate+0xa4>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b0b      	cmp	r3, #11
 8003c42:	d10c      	bne.n	8003c5e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b1d      	cmp	r3, #29
 8003c48:	d803      	bhi.n	8003c52 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003c50:	e02c      	b.n	8003cac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3301      	adds	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003c5c:	e026      	b.n	8003cac <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d123      	bne.n	8003cac <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b1b      	cmp	r3, #27
 8003c68:	d803      	bhi.n	8003c72 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e01c      	b.n	8003cac <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b1c      	cmp	r3, #28
 8003c76:	d111      	bne.n	8003c9c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f839 	bl	8003cf4 <RTC_IsLeapYear>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e00d      	b.n	8003cac <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	3301      	adds	r3, #1
 8003c94:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c96:	2301      	movs	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e007      	b.n	8003cac <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b1d      	cmp	r3, #29
 8003ca0:	d104      	bne.n	8003cac <RTC_DateUpdate+0x10c>
      {
        month++;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d38b      	bcc.n	8003bd2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6978      	ldr	r0, [r7, #20]
 8003cde:	f000 f83b 	bl	8003d58 <RTC_WeekDayNum>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	731a      	strb	r2, [r3, #12]
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e01d      	b.n	8003d4a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	4a10      	ldr	r2, [pc, #64]	; (8003d54 <RTC_IsLeapYear+0x60>)
 8003d12:	fba2 1203 	umull	r1, r2, r2, r3
 8003d16:	0952      	lsrs	r2, r2, #5
 8003d18:	2164      	movs	r1, #100	; 0x64
 8003d1a:	fb01 f202 	mul.w	r2, r1, r2
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00f      	b.n	8003d4a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <RTC_IsLeapYear+0x60>)
 8003d2e:	fba2 1203 	umull	r1, r2, r2, r3
 8003d32:	09d2      	lsrs	r2, r2, #7
 8003d34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003d38:	fb01 f202 	mul.w	r2, r1, r2
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003d48:	2300      	movs	r3, #0
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	51eb851f 	.word	0x51eb851f

08003d58 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
 8003d64:	4613      	mov	r3, r2
 8003d66:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003d76:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d82d      	bhi.n	8003dda <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <RTC_WeekDayNum+0xe4>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	085a      	lsrs	r2, r3, #1
 8003d92:	78bb      	ldrb	r3, [r7, #2]
 8003d94:	441a      	add	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	441a      	add	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4926      	ldr	r1, [pc, #152]	; (8003e40 <RTC_WeekDayNum+0xe8>)
 8003da8:	fba1 1303 	umull	r1, r3, r1, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	1ad2      	subs	r2, r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3b01      	subs	r3, #1
 8003db4:	4922      	ldr	r1, [pc, #136]	; (8003e40 <RTC_WeekDayNum+0xe8>)
 8003db6:	fba1 1303 	umull	r1, r3, r1, r3
 8003dba:	09db      	lsrs	r3, r3, #7
 8003dbc:	4413      	add	r3, r2
 8003dbe:	1d1a      	adds	r2, r3, #4
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <RTC_WeekDayNum+0xec>)
 8003dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc6:	1ad1      	subs	r1, r2, r3
 8003dc8:	0849      	lsrs	r1, r1, #1
 8003dca:	440b      	add	r3, r1
 8003dcc:	0899      	lsrs	r1, r3, #2
 8003dce:	460b      	mov	r3, r1
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	1a5b      	subs	r3, r3, r1
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e029      	b.n	8003e2e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <RTC_WeekDayNum+0xe4>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	085a      	lsrs	r2, r3, #1
 8003dee:	78bb      	ldrb	r3, [r7, #2]
 8003df0:	441a      	add	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	441a      	add	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	441a      	add	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4910      	ldr	r1, [pc, #64]	; (8003e40 <RTC_WeekDayNum+0xe8>)
 8003e00:	fba1 1303 	umull	r1, r3, r1, r3
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	1ad2      	subs	r2, r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	490d      	ldr	r1, [pc, #52]	; (8003e40 <RTC_WeekDayNum+0xe8>)
 8003e0c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e10:	09db      	lsrs	r3, r3, #7
 8003e12:	4413      	add	r3, r2
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <RTC_WeekDayNum+0xec>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	1ad1      	subs	r1, r2, r3
 8003e1e:	0849      	lsrs	r1, r1, #1
 8003e20:	440b      	add	r3, r1
 8003e22:	0899      	lsrs	r1, r3, #2
 8003e24:	460b      	mov	r3, r1
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	1a5b      	subs	r3, r3, r1
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	b2db      	uxtb	r3, r3
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	38e38e39 	.word	0x38e38e39
 8003e40:	51eb851f 	.word	0x51eb851f
 8003e44:	24924925 	.word	0x24924925

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e076      	b.n	8003f48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fc fdd2 	bl	8000a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	0c1a      	lsrs	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f002 0204 	and.w	r2, r2, #4
 8003f26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_SPI_Transmit+0x22>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e12d      	b.n	80041ce <HAL_SPI_Transmit+0x27e>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f7a:	f7fe f805 	bl	8001f88 <HAL_GetTick>
 8003f7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f94:	e116      	b.n	80041c4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_Transmit+0x52>
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa6:	e10d      	b.n	80041c4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2203      	movs	r2, #3
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fee:	d10f      	bne.n	8004010 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800400e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d007      	beq.n	800402e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d14f      	bne.n	80040d8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_SPI_Transmit+0xf6>
 8004040:	8afb      	ldrh	r3, [r7, #22]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d142      	bne.n	80040cc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	1c9a      	adds	r2, r3, #2
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800406a:	e02f      	b.n	80040cc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d112      	bne.n	80040a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	1c9a      	adds	r2, r3, #2
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	86da      	strh	r2, [r3, #54]	; 0x36
 800409e:	e015      	b.n	80040cc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a0:	f7fd ff72 	bl	8001f88 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d803      	bhi.n	80040b8 <HAL_SPI_Transmit+0x168>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d102      	bne.n	80040be <HAL_SPI_Transmit+0x16e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040ca:	e07b      	b.n	80041c4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ca      	bne.n	800406c <HAL_SPI_Transmit+0x11c>
 80040d6:	e050      	b.n	800417a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_SPI_Transmit+0x196>
 80040e0:	8afb      	ldrh	r3, [r7, #22]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d144      	bne.n	8004170 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800410c:	e030      	b.n	8004170 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d113      	bne.n	8004144 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	330c      	adds	r3, #12
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	86da      	strh	r2, [r3, #54]	; 0x36
 8004142:	e015      	b.n	8004170 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004144:	f7fd ff20 	bl	8001f88 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d803      	bhi.n	800415c <HAL_SPI_Transmit+0x20c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d102      	bne.n	8004162 <HAL_SPI_Transmit+0x212>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800416e:	e029      	b.n	80041c4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1c9      	bne.n	800410e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	6839      	ldr	r1, [r7, #0]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8b2 	bl	80042e8 <SPI_EndRxTxTransaction>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e003      	b.n	80041c4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041e8:	f7fd fece 	bl	8001f88 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041f8:	f7fd fec6 	bl	8001f88 <HAL_GetTick>
 80041fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041fe:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	015b      	lsls	r3, r3, #5
 8004204:	0d1b      	lsrs	r3, r3, #20
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	e054      	b.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d050      	beq.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004218:	f7fd feb6 	bl	8001f88 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	429a      	cmp	r2, r3
 8004226:	d902      	bls.n	800422e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d13d      	bne.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800423c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004246:	d111      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004250:	d004      	beq.n	800425c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d107      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d10f      	bne.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e017      	b.n	80042da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d19b      	bne.n	8004210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000004 	.word	0x20000004

080042e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff ff6a 	bl	80041d8 <SPI_WaitFlagStateUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e000      	b.n	800431c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e041      	b.n	80043ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7fc fbb8 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fa74 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d001      	beq.n	80043dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e03a      	b.n	8004452 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_TIM_Base_Start_IT+0x98>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x58>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d009      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x58>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <HAL_TIM_Base_Start_IT+0x9c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x58>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_TIM_Base_Start_IT+0xa0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b06      	cmp	r3, #6
 800442c:	d010      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	e007      	b.n	8004450 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0202 	mvn.w	r2, #2
 8004494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f9b4 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9a7 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f9b6 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0204 	mvn.w	r2, #4
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f98a 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f97d 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f98c 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0208 	mvn.w	r2, #8
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f960 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f953 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f962 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b10      	cmp	r3, #16
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0210 	mvn.w	r2, #16
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2208      	movs	r2, #8
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f936 	bl	8004818 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f929 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f938 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10e      	bne.n	80045ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0201 	mvn.w	r2, #1
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fb fdfe 	bl	80001e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b80      	cmp	r3, #128	; 0x80
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa7b 	bl	8004b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8fc 	bl	800483c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b20      	cmp	r3, #32
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0220 	mvn.w	r2, #32
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa46 	bl	8004afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_TIM_ConfigClockSource+0x1c>
 8004690:	2302      	movs	r3, #2
 8004692:	e0b4      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x186>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d03e      	beq.n	800474c <HAL_TIM_ConfigClockSource+0xd4>
 80046ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d2:	f200 8087 	bhi.w	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	f000 8086 	beq.w	80047ea <HAL_TIM_ConfigClockSource+0x172>
 80046de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e2:	d87f      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e4:	2b70      	cmp	r3, #112	; 0x70
 80046e6:	d01a      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xa6>
 80046e8:	2b70      	cmp	r3, #112	; 0x70
 80046ea:	d87b      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ec:	2b60      	cmp	r3, #96	; 0x60
 80046ee:	d050      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x11a>
 80046f0:	2b60      	cmp	r3, #96	; 0x60
 80046f2:	d877      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b50      	cmp	r3, #80	; 0x50
 80046f6:	d03c      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0xfa>
 80046f8:	2b50      	cmp	r3, #80	; 0x50
 80046fa:	d873      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d058      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d86f      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d064      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004708:	2b30      	cmp	r3, #48	; 0x30
 800470a:	d86b      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d060      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004710:	2b20      	cmp	r3, #32
 8004712:	d867      	bhi.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d05c      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	2b10      	cmp	r3, #16
 800471a:	d05a      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x15a>
 800471c:	e062      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6899      	ldr	r1, [r3, #8]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f000 f968 	bl	8004a02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	609a      	str	r2, [r3, #8]
      break;
 800474a:	e04f      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6899      	ldr	r1, [r3, #8]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f000 f951 	bl	8004a02 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476e:	609a      	str	r2, [r3, #8]
      break;
 8004770:	e03c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f8c8 	bl	8004914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2150      	movs	r1, #80	; 0x50
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f91f 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 8004790:	e02c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 f8e6 	bl	8004970 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2160      	movs	r1, #96	; 0x60
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f90f 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80047b0:	e01c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 f8a8 	bl	8004914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2140      	movs	r1, #64	; 0x40
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f8ff 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80047d0:	e00c      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f000 f8f6 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80047e2:	e003      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      break;
 80047e8:	e000      	b.n	80047ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
	...

08004850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a29      	ldr	r2, [pc, #164]	; (8004908 <TIM_Base_SetConfig+0xb8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0x30>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0x30>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_Base_SetConfig+0xbc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0x30>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_Base_SetConfig+0xc0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d108      	bne.n	8004892 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_Base_SetConfig+0xb8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_Base_SetConfig+0x62>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d007      	beq.n	80048b2 <TIM_Base_SetConfig+0x62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <TIM_Base_SetConfig+0xbc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_Base_SetConfig+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <TIM_Base_SetConfig+0xc0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d108      	bne.n	80048c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <TIM_Base_SetConfig+0xb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d103      	bne.n	80048f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800

08004914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 030a 	bic.w	r3, r3, #10
 8004950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0210 	bic.w	r2, r3, #16
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	621a      	str	r2, [r3, #32]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f043 0307 	orr.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b087      	sub	sp, #28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	609a      	str	r2, [r3, #8]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e046      	b.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d009      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a12      	ldr	r2, [pc, #72]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800

08004afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e042      	b.n	8004bb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fb fffa 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2224      	movs	r2, #36	; 0x24
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fd71 	bl	800564c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d16d      	bne.n	8004cbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_UART_Transmit+0x2c>
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e066      	b.n	8004cbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2221      	movs	r2, #33	; 0x21
 8004bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfe:	f7fd f9c3 	bl	8001f88 <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d108      	bne.n	8004c2c <HAL_UART_Transmit+0x6c>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e003      	b.n	8004c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c34:	e02a      	b.n	8004c8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 faf9 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e036      	b.n	8004cbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e007      	b.n	8004c7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	781a      	ldrb	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cf      	bne.n	8004c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2140      	movs	r1, #64	; 0x40
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fac9 	bl	8005238 <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e006      	b.n	8004cbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0ba      	sub	sp, #232	; 0xe8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_UART_IRQHandler+0x66>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fbd1 	bl	80054ce <UART_Receive_IT>
      return;
 8004d2c:	e25b      	b.n	80051e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80de 	beq.w	8004ef4 <HAL_UART_IRQHandler+0x22c>
 8004d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80d1 	beq.w	8004ef4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_UART_IRQHandler+0xae>
 8004d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xd2>
 8004d82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f043 0202 	orr.w	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_UART_IRQHandler+0xf6>
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <HAL_UART_IRQHandler+0x126>
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dce:	f003 0320 	and.w	r3, r3, #32
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f043 0208 	orr.w	r2, r3, #8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 81f2 	beq.w	80051dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_UART_IRQHandler+0x14e>
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fb5c 	bl	80054ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_UART_IRQHandler+0x17a>
 8004e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d04f      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa66 	bl	8005314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d041      	beq.n	8004eda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3314      	adds	r3, #20
 8004e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1d9      	bne.n	8004e56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d013      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	4a7e      	ldr	r2, [pc, #504]	; (80050a8 <HAL_UART_IRQHandler+0x3e0>)
 8004eb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fd f9dc 	bl	8002274 <HAL_DMA_Abort_IT>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	e00e      	b.n	8004ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f99c 	bl	8005210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	e00a      	b.n	8004ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f998 	bl	8005210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	e006      	b.n	8004ef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f994 	bl	8005210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004eee:	e175      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	bf00      	nop
    return;
 8004ef2:	e173      	b.n	80051dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	f040 814f 	bne.w	800519c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8148 	beq.w	800519c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8141 	beq.w	800519c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80b6 	beq.w	80050ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8145 	beq.w	80051e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f080 813e 	bcs.w	80051e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	f000 8088 	beq.w	8005088 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fa4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1d9      	bne.n	8004f78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fe8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ff0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e1      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3314      	adds	r3, #20
 8005006:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005024:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800502a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e3      	bne.n	8005000 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800506a:	65ba      	str	r2, [r7, #88]	; 0x58
 800506c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e3      	bne.n	8005046 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd f8bb 	bl	80021fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005096:	b29b      	uxth	r3, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	b29b      	uxth	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f8bf 	bl	8005222 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a4:	e09c      	b.n	80051e0 <HAL_UART_IRQHandler+0x518>
 80050a6:	bf00      	nop
 80050a8:	080053d9 	.word	0x080053d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 808e 	beq.w	80051e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8089 	beq.w	80051e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	330c      	adds	r3, #12
 80050f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050f6:	647a      	str	r2, [r7, #68]	; 0x44
 80050f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e3      	bne.n	80050d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	623b      	str	r3, [r7, #32]
   return(result);
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3314      	adds	r3, #20
 800512a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800512e:	633a      	str	r2, [r7, #48]	; 0x30
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e3      	bne.n	800510a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	330c      	adds	r3, #12
 8005156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	e853 3f00 	ldrex	r3, [r3]
 800515e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0310 	bic.w	r3, r3, #16
 8005166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005174:	61fa      	str	r2, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	617b      	str	r3, [r7, #20]
   return(result);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e3      	bne.n	8005150 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800518e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f844 	bl	8005222 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800519a:	e023      	b.n	80051e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <HAL_UART_IRQHandler+0x4f4>
 80051a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f923 	bl	8005400 <UART_Transmit_IT>
    return;
 80051ba:	e014      	b.n	80051e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <HAL_UART_IRQHandler+0x51e>
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f962 	bl	800549e <UART_EndTransmit_IT>
    return;
 80051da:	e004      	b.n	80051e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80051dc:	bf00      	nop
 80051de:	e002      	b.n	80051e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051e4:	bf00      	nop
  }
}
 80051e6:	37e8      	adds	r7, #232	; 0xe8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b090      	sub	sp, #64	; 0x40
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	4613      	mov	r3, r2
 8005246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005248:	e050      	b.n	80052ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d04c      	beq.n	80052ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <UART_WaitOnFlagUntilTimeout+0x30>
 8005258:	f7fc fe96 	bl	8001f88 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005264:	429a      	cmp	r2, r3
 8005266:	d241      	bcs.n	80052ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800527e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005288:	637a      	str	r2, [r7, #52]	; 0x34
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800528e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3314      	adds	r3, #20
 80052a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	613b      	str	r3, [r7, #16]
   return(result);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3314      	adds	r3, #20
 80052ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052bc:	623a      	str	r2, [r7, #32]
 80052be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	69f9      	ldr	r1, [r7, #28]
 80052c2:	6a3a      	ldr	r2, [r7, #32]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e5      	bne.n	800529c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e00f      	b.n	800530c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4013      	ands	r3, r2
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	bf0c      	ite	eq
 80052fc:	2301      	moveq	r3, #1
 80052fe:	2300      	movne	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	429a      	cmp	r2, r3
 8005308:	d09f      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3740      	adds	r7, #64	; 0x40
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b095      	sub	sp, #84	; 0x54
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800533c:	643a      	str	r2, [r7, #64]	; 0x40
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e5      	bne.n	800531c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3314      	adds	r3, #20
 8005356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e5      	bne.n	8005350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d119      	bne.n	80053c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60bb      	str	r3, [r7, #8]
   return(result);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	647b      	str	r3, [r7, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ac:	61ba      	str	r2, [r7, #24]
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053ce:	bf00      	nop
 80053d0:	3754      	adds	r7, #84	; 0x54
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff ff0c 	bl	8005210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b21      	cmp	r3, #33	; 0x21
 8005412:	d13e      	bne.n	8005492 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541c:	d114      	bne.n	8005448 <UART_Transmit_IT+0x48>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d110      	bne.n	8005448 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	621a      	str	r2, [r3, #32]
 8005446:	e008      	b.n	800545a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	1c59      	adds	r1, r3, #1
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6211      	str	r1, [r2, #32]
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	4619      	mov	r1, r3
 8005468:	84d1      	strh	r1, [r2, #38]	; 0x26
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800547c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800548c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fe94 	bl	80051ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b08c      	sub	sp, #48	; 0x30
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b22      	cmp	r3, #34	; 0x22
 80054e0:	f040 80ae 	bne.w	8005640 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ec:	d117      	bne.n	800551e <UART_Receive_IT+0x50>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d113      	bne.n	800551e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550c:	b29a      	uxth	r2, r3
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	629a      	str	r2, [r3, #40]	; 0x28
 800551c:	e026      	b.n	800556c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005524:	2300      	movs	r3, #0
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	d007      	beq.n	8005542 <UART_Receive_IT+0x74>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <UART_Receive_IT+0x82>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e008      	b.n	8005562 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555c:	b2da      	uxtb	r2, r3
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4619      	mov	r1, r3
 800557a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800557c:	2b00      	cmp	r3, #0
 800557e:	d15d      	bne.n	800563c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0220 	bic.w	r2, r2, #32
 800558e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800559e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d135      	bne.n	8005632 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	613b      	str	r3, [r7, #16]
   return(result);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f023 0310 	bic.w	r3, r3, #16
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	623a      	str	r2, [r7, #32]
 80055ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d10a      	bne.n	8005624 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fdf9 	bl	8005222 <HAL_UARTEx_RxEventCallback>
 8005630:	e002      	b.n	8005638 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fde3 	bl	80051fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e002      	b.n	8005642 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3730      	adds	r7, #48	; 0x30
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005686:	f023 030c 	bic.w	r3, r3, #12
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	430b      	orrs	r3, r1
 8005692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a2c      	ldr	r2, [pc, #176]	; (8005760 <UART_SetConfig+0x114>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d103      	bne.n	80056bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fd fc58 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	e002      	b.n	80056c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056bc:	f7fd fc40 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 80056c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009a      	lsls	r2, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	4a22      	ldr	r2, [pc, #136]	; (8005764 <UART_SetConfig+0x118>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	0119      	lsls	r1, r3, #4
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009a      	lsls	r2, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f8:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <UART_SetConfig+0x118>)
 80056fa:	fba3 0302 	umull	r0, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2064      	movs	r0, #100	; 0x64
 8005702:	fb00 f303 	mul.w	r3, r0, r3
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	3332      	adds	r3, #50	; 0x32
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <UART_SetConfig+0x118>)
 800570e:	fba2 2303 	umull	r2, r3, r2, r3
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005718:	4419      	add	r1, r3
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009a      	lsls	r2, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <UART_SetConfig+0x118>)
 8005732:	fba3 0302 	umull	r0, r3, r3, r2
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	2064      	movs	r0, #100	; 0x64
 800573a:	fb00 f303 	mul.w	r3, r0, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	3332      	adds	r3, #50	; 0x32
 8005744:	4a07      	ldr	r2, [pc, #28]	; (8005764 <UART_SetConfig+0x118>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	440a      	add	r2, r1
 8005756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40013800 	.word	0x40013800
 8005764:	51eb851f 	.word	0x51eb851f

08005768 <__errno>:
 8005768:	4b01      	ldr	r3, [pc, #4]	; (8005770 <__errno+0x8>)
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000028 	.word	0x20000028

08005774 <__libc_init_array>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	2600      	movs	r6, #0
 8005778:	4d0c      	ldr	r5, [pc, #48]	; (80057ac <__libc_init_array+0x38>)
 800577a:	4c0d      	ldr	r4, [pc, #52]	; (80057b0 <__libc_init_array+0x3c>)
 800577c:	1b64      	subs	r4, r4, r5
 800577e:	10a4      	asrs	r4, r4, #2
 8005780:	42a6      	cmp	r6, r4
 8005782:	d109      	bne.n	8005798 <__libc_init_array+0x24>
 8005784:	f000 fd28 	bl	80061d8 <_init>
 8005788:	2600      	movs	r6, #0
 800578a:	4d0a      	ldr	r5, [pc, #40]	; (80057b4 <__libc_init_array+0x40>)
 800578c:	4c0a      	ldr	r4, [pc, #40]	; (80057b8 <__libc_init_array+0x44>)
 800578e:	1b64      	subs	r4, r4, r5
 8005790:	10a4      	asrs	r4, r4, #2
 8005792:	42a6      	cmp	r6, r4
 8005794:	d105      	bne.n	80057a2 <__libc_init_array+0x2e>
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	f855 3b04 	ldr.w	r3, [r5], #4
 800579c:	4798      	blx	r3
 800579e:	3601      	adds	r6, #1
 80057a0:	e7ee      	b.n	8005780 <__libc_init_array+0xc>
 80057a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a6:	4798      	blx	r3
 80057a8:	3601      	adds	r6, #1
 80057aa:	e7f2      	b.n	8005792 <__libc_init_array+0x1e>
 80057ac:	0800e2e0 	.word	0x0800e2e0
 80057b0:	0800e2e0 	.word	0x0800e2e0
 80057b4:	0800e2e0 	.word	0x0800e2e0
 80057b8:	0800e2e4 	.word	0x0800e2e4

080057bc <malloc>:
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <malloc+0xc>)
 80057be:	4601      	mov	r1, r0
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	f000 b87b 	b.w	80058bc <_malloc_r>
 80057c6:	bf00      	nop
 80057c8:	20000028 	.word	0x20000028

080057cc <free>:
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <free+0xc>)
 80057ce:	4601      	mov	r1, r0
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f000 b80b 	b.w	80057ec <_free_r>
 80057d6:	bf00      	nop
 80057d8:	20000028 	.word	0x20000028

080057dc <memset>:
 80057dc:	4603      	mov	r3, r0
 80057de:	4402      	add	r2, r0
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d100      	bne.n	80057e6 <memset+0xa>
 80057e4:	4770      	bx	lr
 80057e6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ea:	e7f9      	b.n	80057e0 <memset+0x4>

080057ec <_free_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4605      	mov	r5, r0
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d040      	beq.n	8005876 <_free_r+0x8a>
 80057f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f8:	1f0c      	subs	r4, r1, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfb8      	it	lt
 80057fe:	18e4      	addlt	r4, r4, r3
 8005800:	f000 fc32 	bl	8006068 <__malloc_lock>
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <_free_r+0x8c>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	b933      	cbnz	r3, 8005818 <_free_r+0x2c>
 800580a:	6063      	str	r3, [r4, #4]
 800580c:	6014      	str	r4, [r2, #0]
 800580e:	4628      	mov	r0, r5
 8005810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005814:	f000 bc2e 	b.w	8006074 <__malloc_unlock>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d908      	bls.n	800582e <_free_r+0x42>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	1821      	adds	r1, r4, r0
 8005820:	428b      	cmp	r3, r1
 8005822:	bf01      	itttt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	1809      	addeq	r1, r1, r0
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	e7ed      	b.n	800580a <_free_r+0x1e>
 800582e:	461a      	mov	r2, r3
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b10b      	cbz	r3, 8005838 <_free_r+0x4c>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d9fa      	bls.n	800582e <_free_r+0x42>
 8005838:	6811      	ldr	r1, [r2, #0]
 800583a:	1850      	adds	r0, r2, r1
 800583c:	42a0      	cmp	r0, r4
 800583e:	d10b      	bne.n	8005858 <_free_r+0x6c>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	4401      	add	r1, r0
 8005844:	1850      	adds	r0, r2, r1
 8005846:	4283      	cmp	r3, r0
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	d1e0      	bne.n	800580e <_free_r+0x22>
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4401      	add	r1, r0
 8005852:	6011      	str	r1, [r2, #0]
 8005854:	6053      	str	r3, [r2, #4]
 8005856:	e7da      	b.n	800580e <_free_r+0x22>
 8005858:	d902      	bls.n	8005860 <_free_r+0x74>
 800585a:	230c      	movs	r3, #12
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	e7d6      	b.n	800580e <_free_r+0x22>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	1821      	adds	r1, r4, r0
 8005864:	428b      	cmp	r3, r1
 8005866:	bf01      	itttt	eq
 8005868:	6819      	ldreq	r1, [r3, #0]
 800586a:	685b      	ldreq	r3, [r3, #4]
 800586c:	1809      	addeq	r1, r1, r0
 800586e:	6021      	streq	r1, [r4, #0]
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	6054      	str	r4, [r2, #4]
 8005874:	e7cb      	b.n	800580e <_free_r+0x22>
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	20000224 	.word	0x20000224

0800587c <sbrk_aligned>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	4e0e      	ldr	r6, [pc, #56]	; (80058b8 <sbrk_aligned+0x3c>)
 8005880:	460c      	mov	r4, r1
 8005882:	6831      	ldr	r1, [r6, #0]
 8005884:	4605      	mov	r5, r0
 8005886:	b911      	cbnz	r1, 800588e <sbrk_aligned+0x12>
 8005888:	f000 f902 	bl	8005a90 <_sbrk_r>
 800588c:	6030      	str	r0, [r6, #0]
 800588e:	4621      	mov	r1, r4
 8005890:	4628      	mov	r0, r5
 8005892:	f000 f8fd 	bl	8005a90 <_sbrk_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d00a      	beq.n	80058b0 <sbrk_aligned+0x34>
 800589a:	1cc4      	adds	r4, r0, #3
 800589c:	f024 0403 	bic.w	r4, r4, #3
 80058a0:	42a0      	cmp	r0, r4
 80058a2:	d007      	beq.n	80058b4 <sbrk_aligned+0x38>
 80058a4:	1a21      	subs	r1, r4, r0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f8f2 	bl	8005a90 <_sbrk_r>
 80058ac:	3001      	adds	r0, #1
 80058ae:	d101      	bne.n	80058b4 <sbrk_aligned+0x38>
 80058b0:	f04f 34ff 	mov.w	r4, #4294967295
 80058b4:	4620      	mov	r0, r4
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	20000228 	.word	0x20000228

080058bc <_malloc_r>:
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	1ccd      	adds	r5, r1, #3
 80058c2:	f025 0503 	bic.w	r5, r5, #3
 80058c6:	3508      	adds	r5, #8
 80058c8:	2d0c      	cmp	r5, #12
 80058ca:	bf38      	it	cc
 80058cc:	250c      	movcc	r5, #12
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	4607      	mov	r7, r0
 80058d2:	db01      	blt.n	80058d8 <_malloc_r+0x1c>
 80058d4:	42a9      	cmp	r1, r5
 80058d6:	d905      	bls.n	80058e4 <_malloc_r+0x28>
 80058d8:	230c      	movs	r3, #12
 80058da:	2600      	movs	r6, #0
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4630      	mov	r0, r6
 80058e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e4:	4e2e      	ldr	r6, [pc, #184]	; (80059a0 <_malloc_r+0xe4>)
 80058e6:	f000 fbbf 	bl	8006068 <__malloc_lock>
 80058ea:	6833      	ldr	r3, [r6, #0]
 80058ec:	461c      	mov	r4, r3
 80058ee:	bb34      	cbnz	r4, 800593e <_malloc_r+0x82>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4638      	mov	r0, r7
 80058f4:	f7ff ffc2 	bl	800587c <sbrk_aligned>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	4604      	mov	r4, r0
 80058fc:	d14d      	bne.n	800599a <_malloc_r+0xde>
 80058fe:	6834      	ldr	r4, [r6, #0]
 8005900:	4626      	mov	r6, r4
 8005902:	2e00      	cmp	r6, #0
 8005904:	d140      	bne.n	8005988 <_malloc_r+0xcc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	4631      	mov	r1, r6
 800590a:	4638      	mov	r0, r7
 800590c:	eb04 0803 	add.w	r8, r4, r3
 8005910:	f000 f8be 	bl	8005a90 <_sbrk_r>
 8005914:	4580      	cmp	r8, r0
 8005916:	d13a      	bne.n	800598e <_malloc_r+0xd2>
 8005918:	6821      	ldr	r1, [r4, #0]
 800591a:	3503      	adds	r5, #3
 800591c:	1a6d      	subs	r5, r5, r1
 800591e:	f025 0503 	bic.w	r5, r5, #3
 8005922:	3508      	adds	r5, #8
 8005924:	2d0c      	cmp	r5, #12
 8005926:	bf38      	it	cc
 8005928:	250c      	movcc	r5, #12
 800592a:	4638      	mov	r0, r7
 800592c:	4629      	mov	r1, r5
 800592e:	f7ff ffa5 	bl	800587c <sbrk_aligned>
 8005932:	3001      	adds	r0, #1
 8005934:	d02b      	beq.n	800598e <_malloc_r+0xd2>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	442b      	add	r3, r5
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	e00e      	b.n	800595c <_malloc_r+0xa0>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	1b52      	subs	r2, r2, r5
 8005942:	d41e      	bmi.n	8005982 <_malloc_r+0xc6>
 8005944:	2a0b      	cmp	r2, #11
 8005946:	d916      	bls.n	8005976 <_malloc_r+0xba>
 8005948:	1961      	adds	r1, r4, r5
 800594a:	42a3      	cmp	r3, r4
 800594c:	6025      	str	r5, [r4, #0]
 800594e:	bf18      	it	ne
 8005950:	6059      	strne	r1, [r3, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	bf08      	it	eq
 8005956:	6031      	streq	r1, [r6, #0]
 8005958:	5162      	str	r2, [r4, r5]
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	4638      	mov	r0, r7
 800595e:	f104 060b 	add.w	r6, r4, #11
 8005962:	f000 fb87 	bl	8006074 <__malloc_unlock>
 8005966:	f026 0607 	bic.w	r6, r6, #7
 800596a:	1d23      	adds	r3, r4, #4
 800596c:	1af2      	subs	r2, r6, r3
 800596e:	d0b6      	beq.n	80058de <_malloc_r+0x22>
 8005970:	1b9b      	subs	r3, r3, r6
 8005972:	50a3      	str	r3, [r4, r2]
 8005974:	e7b3      	b.n	80058de <_malloc_r+0x22>
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	42a3      	cmp	r3, r4
 800597a:	bf0c      	ite	eq
 800597c:	6032      	streq	r2, [r6, #0]
 800597e:	605a      	strne	r2, [r3, #4]
 8005980:	e7ec      	b.n	800595c <_malloc_r+0xa0>
 8005982:	4623      	mov	r3, r4
 8005984:	6864      	ldr	r4, [r4, #4]
 8005986:	e7b2      	b.n	80058ee <_malloc_r+0x32>
 8005988:	4634      	mov	r4, r6
 800598a:	6876      	ldr	r6, [r6, #4]
 800598c:	e7b9      	b.n	8005902 <_malloc_r+0x46>
 800598e:	230c      	movs	r3, #12
 8005990:	4638      	mov	r0, r7
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	f000 fb6e 	bl	8006074 <__malloc_unlock>
 8005998:	e7a1      	b.n	80058de <_malloc_r+0x22>
 800599a:	6025      	str	r5, [r4, #0]
 800599c:	e7de      	b.n	800595c <_malloc_r+0xa0>
 800599e:	bf00      	nop
 80059a0:	20000224 	.word	0x20000224

080059a4 <_puts_r>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	460e      	mov	r6, r1
 80059a8:	4605      	mov	r5, r0
 80059aa:	b118      	cbz	r0, 80059b4 <_puts_r+0x10>
 80059ac:	6983      	ldr	r3, [r0, #24]
 80059ae:	b90b      	cbnz	r3, 80059b4 <_puts_r+0x10>
 80059b0:	f000 fa54 	bl	8005e5c <__sinit>
 80059b4:	69ab      	ldr	r3, [r5, #24]
 80059b6:	68ac      	ldr	r4, [r5, #8]
 80059b8:	b913      	cbnz	r3, 80059c0 <_puts_r+0x1c>
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 fa4e 	bl	8005e5c <__sinit>
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <_puts_r+0xd0>)
 80059c2:	429c      	cmp	r4, r3
 80059c4:	d120      	bne.n	8005a08 <_puts_r+0x64>
 80059c6:	686c      	ldr	r4, [r5, #4]
 80059c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ca:	07db      	lsls	r3, r3, #31
 80059cc:	d405      	bmi.n	80059da <_puts_r+0x36>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	0598      	lsls	r0, r3, #22
 80059d2:	d402      	bmi.n	80059da <_puts_r+0x36>
 80059d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d6:	f000 fadf 	bl	8005f98 <__retarget_lock_acquire_recursive>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	0719      	lsls	r1, r3, #28
 80059de:	d51d      	bpl.n	8005a1c <_puts_r+0x78>
 80059e0:	6923      	ldr	r3, [r4, #16]
 80059e2:	b1db      	cbz	r3, 8005a1c <_puts_r+0x78>
 80059e4:	3e01      	subs	r6, #1
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059ec:	3b01      	subs	r3, #1
 80059ee:	60a3      	str	r3, [r4, #8]
 80059f0:	bb39      	cbnz	r1, 8005a42 <_puts_r+0x9e>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da38      	bge.n	8005a68 <_puts_r+0xc4>
 80059f6:	4622      	mov	r2, r4
 80059f8:	210a      	movs	r1, #10
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 f858 	bl	8005ab0 <__swbuf_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d011      	beq.n	8005a28 <_puts_r+0x84>
 8005a04:	250a      	movs	r5, #10
 8005a06:	e011      	b.n	8005a2c <_puts_r+0x88>
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <_puts_r+0xd4>)
 8005a0a:	429c      	cmp	r4, r3
 8005a0c:	d101      	bne.n	8005a12 <_puts_r+0x6e>
 8005a0e:	68ac      	ldr	r4, [r5, #8]
 8005a10:	e7da      	b.n	80059c8 <_puts_r+0x24>
 8005a12:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <_puts_r+0xd8>)
 8005a14:	429c      	cmp	r4, r3
 8005a16:	bf08      	it	eq
 8005a18:	68ec      	ldreq	r4, [r5, #12]
 8005a1a:	e7d5      	b.n	80059c8 <_puts_r+0x24>
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f898 	bl	8005b54 <__swsetup_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0dd      	beq.n	80059e4 <_puts_r+0x40>
 8005a28:	f04f 35ff 	mov.w	r5, #4294967295
 8005a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2e:	07da      	lsls	r2, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_puts_r+0x9a>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	059b      	lsls	r3, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_puts_r+0x9a>
 8005a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3a:	f000 faae 	bl	8005f9a <__retarget_lock_release_recursive>
 8005a3e:	4628      	mov	r0, r5
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da04      	bge.n	8005a50 <_puts_r+0xac>
 8005a46:	69a2      	ldr	r2, [r4, #24]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	dc06      	bgt.n	8005a5a <_puts_r+0xb6>
 8005a4c:	290a      	cmp	r1, #10
 8005a4e:	d004      	beq.n	8005a5a <_puts_r+0xb6>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	6022      	str	r2, [r4, #0]
 8005a56:	7019      	strb	r1, [r3, #0]
 8005a58:	e7c5      	b.n	80059e6 <_puts_r+0x42>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 f827 	bl	8005ab0 <__swbuf_r>
 8005a62:	3001      	adds	r0, #1
 8005a64:	d1bf      	bne.n	80059e6 <_puts_r+0x42>
 8005a66:	e7df      	b.n	8005a28 <_puts_r+0x84>
 8005a68:	250a      	movs	r5, #10
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	701d      	strb	r5, [r3, #0]
 8005a72:	e7db      	b.n	8005a2c <_puts_r+0x88>
 8005a74:	0800e2a0 	.word	0x0800e2a0
 8005a78:	0800e2c0 	.word	0x0800e2c0
 8005a7c:	0800e280 	.word	0x0800e280

08005a80 <puts>:
 8005a80:	4b02      	ldr	r3, [pc, #8]	; (8005a8c <puts+0xc>)
 8005a82:	4601      	mov	r1, r0
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f7ff bf8d 	b.w	80059a4 <_puts_r>
 8005a8a:	bf00      	nop
 8005a8c:	20000028 	.word	0x20000028

08005a90 <_sbrk_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	2300      	movs	r3, #0
 8005a94:	4d05      	ldr	r5, [pc, #20]	; (8005aac <_sbrk_r+0x1c>)
 8005a96:	4604      	mov	r4, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	f7fb f976 	bl	8000d8c <_sbrk>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_sbrk_r+0x1a>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_sbrk_r+0x1a>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20000230 	.word	0x20000230

08005ab0 <__swbuf_r>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	460e      	mov	r6, r1
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	b118      	cbz	r0, 8005ac2 <__swbuf_r+0x12>
 8005aba:	6983      	ldr	r3, [r0, #24]
 8005abc:	b90b      	cbnz	r3, 8005ac2 <__swbuf_r+0x12>
 8005abe:	f000 f9cd 	bl	8005e5c <__sinit>
 8005ac2:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <__swbuf_r+0x98>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	d12b      	bne.n	8005b20 <__swbuf_r+0x70>
 8005ac8:	686c      	ldr	r4, [r5, #4]
 8005aca:	69a3      	ldr	r3, [r4, #24]
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	071a      	lsls	r2, r3, #28
 8005ad2:	d52f      	bpl.n	8005b34 <__swbuf_r+0x84>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b36b      	cbz	r3, 8005b34 <__swbuf_r+0x84>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	b2f6      	uxtb	r6, r6
 8005ade:	1ac0      	subs	r0, r0, r3
 8005ae0:	6963      	ldr	r3, [r4, #20]
 8005ae2:	4637      	mov	r7, r6
 8005ae4:	4283      	cmp	r3, r0
 8005ae6:	dc04      	bgt.n	8005af2 <__swbuf_r+0x42>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f922 	bl	8005d34 <_fflush_r>
 8005af0:	bb30      	cbnz	r0, 8005b40 <__swbuf_r+0x90>
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	3001      	adds	r0, #1
 8005af6:	3b01      	subs	r3, #1
 8005af8:	60a3      	str	r3, [r4, #8]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	701e      	strb	r6, [r3, #0]
 8005b02:	6963      	ldr	r3, [r4, #20]
 8005b04:	4283      	cmp	r3, r0
 8005b06:	d004      	beq.n	8005b12 <__swbuf_r+0x62>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	07db      	lsls	r3, r3, #31
 8005b0c:	d506      	bpl.n	8005b1c <__swbuf_r+0x6c>
 8005b0e:	2e0a      	cmp	r6, #10
 8005b10:	d104      	bne.n	8005b1c <__swbuf_r+0x6c>
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 f90d 	bl	8005d34 <_fflush_r>
 8005b1a:	b988      	cbnz	r0, 8005b40 <__swbuf_r+0x90>
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <__swbuf_r+0x9c>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d101      	bne.n	8005b2a <__swbuf_r+0x7a>
 8005b26:	68ac      	ldr	r4, [r5, #8]
 8005b28:	e7cf      	b.n	8005aca <__swbuf_r+0x1a>
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <__swbuf_r+0xa0>)
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	bf08      	it	eq
 8005b30:	68ec      	ldreq	r4, [r5, #12]
 8005b32:	e7ca      	b.n	8005aca <__swbuf_r+0x1a>
 8005b34:	4621      	mov	r1, r4
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 f80c 	bl	8005b54 <__swsetup_r>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d0cb      	beq.n	8005ad8 <__swbuf_r+0x28>
 8005b40:	f04f 37ff 	mov.w	r7, #4294967295
 8005b44:	e7ea      	b.n	8005b1c <__swbuf_r+0x6c>
 8005b46:	bf00      	nop
 8005b48:	0800e2a0 	.word	0x0800e2a0
 8005b4c:	0800e2c0 	.word	0x0800e2c0
 8005b50:	0800e280 	.word	0x0800e280

08005b54 <__swsetup_r>:
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <__swsetup_r+0xcc>)
 8005b56:	b570      	push	{r4, r5, r6, lr}
 8005b58:	681d      	ldr	r5, [r3, #0]
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	b125      	cbz	r5, 8005b6a <__swsetup_r+0x16>
 8005b60:	69ab      	ldr	r3, [r5, #24]
 8005b62:	b913      	cbnz	r3, 8005b6a <__swsetup_r+0x16>
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 f979 	bl	8005e5c <__sinit>
 8005b6a:	4b2e      	ldr	r3, [pc, #184]	; (8005c24 <__swsetup_r+0xd0>)
 8005b6c:	429c      	cmp	r4, r3
 8005b6e:	d10f      	bne.n	8005b90 <__swsetup_r+0x3c>
 8005b70:	686c      	ldr	r4, [r5, #4]
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b78:	0719      	lsls	r1, r3, #28
 8005b7a:	d42c      	bmi.n	8005bd6 <__swsetup_r+0x82>
 8005b7c:	06dd      	lsls	r5, r3, #27
 8005b7e:	d411      	bmi.n	8005ba4 <__swsetup_r+0x50>
 8005b80:	2309      	movs	r3, #9
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	e03e      	b.n	8005c0e <__swsetup_r+0xba>
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <__swsetup_r+0xd4>)
 8005b92:	429c      	cmp	r4, r3
 8005b94:	d101      	bne.n	8005b9a <__swsetup_r+0x46>
 8005b96:	68ac      	ldr	r4, [r5, #8]
 8005b98:	e7eb      	b.n	8005b72 <__swsetup_r+0x1e>
 8005b9a:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <__swsetup_r+0xd8>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	bf08      	it	eq
 8005ba0:	68ec      	ldreq	r4, [r5, #12]
 8005ba2:	e7e6      	b.n	8005b72 <__swsetup_r+0x1e>
 8005ba4:	0758      	lsls	r0, r3, #29
 8005ba6:	d512      	bpl.n	8005bce <__swsetup_r+0x7a>
 8005ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005baa:	b141      	cbz	r1, 8005bbe <__swsetup_r+0x6a>
 8005bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	d002      	beq.n	8005bba <__swsetup_r+0x66>
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7ff fe19 	bl	80057ec <_free_r>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bc4:	81a3      	strh	r3, [r4, #12]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6063      	str	r3, [r4, #4]
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	b94b      	cbnz	r3, 8005bee <__swsetup_r+0x9a>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be4:	d003      	beq.n	8005bee <__swsetup_r+0x9a>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f9fd 	bl	8005fe8 <__smakebuf_r>
 8005bee:	89a0      	ldrh	r0, [r4, #12]
 8005bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bf4:	f010 0301 	ands.w	r3, r0, #1
 8005bf8:	d00a      	beq.n	8005c10 <__swsetup_r+0xbc>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60a3      	str	r3, [r4, #8]
 8005bfe:	6963      	ldr	r3, [r4, #20]
 8005c00:	425b      	negs	r3, r3
 8005c02:	61a3      	str	r3, [r4, #24]
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	b943      	cbnz	r3, 8005c1a <__swsetup_r+0xc6>
 8005c08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c0c:	d1ba      	bne.n	8005b84 <__swsetup_r+0x30>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	0781      	lsls	r1, r0, #30
 8005c12:	bf58      	it	pl
 8005c14:	6963      	ldrpl	r3, [r4, #20]
 8005c16:	60a3      	str	r3, [r4, #8]
 8005c18:	e7f4      	b.n	8005c04 <__swsetup_r+0xb0>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e7f7      	b.n	8005c0e <__swsetup_r+0xba>
 8005c1e:	bf00      	nop
 8005c20:	20000028 	.word	0x20000028
 8005c24:	0800e2a0 	.word	0x0800e2a0
 8005c28:	0800e2c0 	.word	0x0800e2c0
 8005c2c:	0800e280 	.word	0x0800e280

08005c30 <__sflush_r>:
 8005c30:	898a      	ldrh	r2, [r1, #12]
 8005c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c34:	4605      	mov	r5, r0
 8005c36:	0710      	lsls	r0, r2, #28
 8005c38:	460c      	mov	r4, r1
 8005c3a:	d457      	bmi.n	8005cec <__sflush_r+0xbc>
 8005c3c:	684b      	ldr	r3, [r1, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dc04      	bgt.n	8005c4c <__sflush_r+0x1c>
 8005c42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	dc01      	bgt.n	8005c4c <__sflush_r+0x1c>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	d0fa      	beq.n	8005c48 <__sflush_r+0x18>
 8005c52:	2300      	movs	r3, #0
 8005c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c58:	682f      	ldr	r7, [r5, #0]
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	d032      	beq.n	8005cc4 <__sflush_r+0x94>
 8005c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	075a      	lsls	r2, r3, #29
 8005c64:	d505      	bpl.n	8005c72 <__sflush_r+0x42>
 8005c66:	6863      	ldr	r3, [r4, #4]
 8005c68:	1ac0      	subs	r0, r0, r3
 8005c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c6c:	b10b      	cbz	r3, 8005c72 <__sflush_r+0x42>
 8005c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c70:	1ac0      	subs	r0, r0, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	4602      	mov	r2, r0
 8005c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c78:	4628      	mov	r0, r5
 8005c7a:	6a21      	ldr	r1, [r4, #32]
 8005c7c:	47b0      	blx	r6
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	d106      	bne.n	8005c92 <__sflush_r+0x62>
 8005c84:	6829      	ldr	r1, [r5, #0]
 8005c86:	291d      	cmp	r1, #29
 8005c88:	d82c      	bhi.n	8005ce4 <__sflush_r+0xb4>
 8005c8a:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <__sflush_r+0x100>)
 8005c8c:	40ca      	lsrs	r2, r1
 8005c8e:	07d6      	lsls	r6, r2, #31
 8005c90:	d528      	bpl.n	8005ce4 <__sflush_r+0xb4>
 8005c92:	2200      	movs	r2, #0
 8005c94:	6062      	str	r2, [r4, #4]
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	04d9      	lsls	r1, r3, #19
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	d504      	bpl.n	8005ca8 <__sflush_r+0x78>
 8005c9e:	1c42      	adds	r2, r0, #1
 8005ca0:	d101      	bne.n	8005ca6 <__sflush_r+0x76>
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	b903      	cbnz	r3, 8005ca8 <__sflush_r+0x78>
 8005ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8005ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005caa:	602f      	str	r7, [r5, #0]
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d0cb      	beq.n	8005c48 <__sflush_r+0x18>
 8005cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cb4:	4299      	cmp	r1, r3
 8005cb6:	d002      	beq.n	8005cbe <__sflush_r+0x8e>
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f7ff fd97 	bl	80057ec <_free_r>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8005cc2:	e7c2      	b.n	8005c4a <__sflush_r+0x1a>
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	1c41      	adds	r1, r0, #1
 8005cce:	d1c7      	bne.n	8005c60 <__sflush_r+0x30>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0c4      	beq.n	8005c60 <__sflush_r+0x30>
 8005cd6:	2b1d      	cmp	r3, #29
 8005cd8:	d001      	beq.n	8005cde <__sflush_r+0xae>
 8005cda:	2b16      	cmp	r3, #22
 8005cdc:	d101      	bne.n	8005ce2 <__sflush_r+0xb2>
 8005cde:	602f      	str	r7, [r5, #0]
 8005ce0:	e7b2      	b.n	8005c48 <__sflush_r+0x18>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	e7ae      	b.n	8005c4a <__sflush_r+0x1a>
 8005cec:	690f      	ldr	r7, [r1, #16]
 8005cee:	2f00      	cmp	r7, #0
 8005cf0:	d0aa      	beq.n	8005c48 <__sflush_r+0x18>
 8005cf2:	0793      	lsls	r3, r2, #30
 8005cf4:	bf18      	it	ne
 8005cf6:	2300      	movne	r3, #0
 8005cf8:	680e      	ldr	r6, [r1, #0]
 8005cfa:	bf08      	it	eq
 8005cfc:	694b      	ldreq	r3, [r1, #20]
 8005cfe:	1bf6      	subs	r6, r6, r7
 8005d00:	600f      	str	r7, [r1, #0]
 8005d02:	608b      	str	r3, [r1, #8]
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	dd9f      	ble.n	8005c48 <__sflush_r+0x18>
 8005d08:	4633      	mov	r3, r6
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	6a21      	ldr	r1, [r4, #32]
 8005d10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005d14:	47e0      	blx	ip
 8005d16:	2800      	cmp	r0, #0
 8005d18:	dc06      	bgt.n	8005d28 <__sflush_r+0xf8>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	e790      	b.n	8005c4a <__sflush_r+0x1a>
 8005d28:	4407      	add	r7, r0
 8005d2a:	1a36      	subs	r6, r6, r0
 8005d2c:	e7ea      	b.n	8005d04 <__sflush_r+0xd4>
 8005d2e:	bf00      	nop
 8005d30:	20400001 	.word	0x20400001

08005d34 <_fflush_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	690b      	ldr	r3, [r1, #16]
 8005d38:	4605      	mov	r5, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	b913      	cbnz	r3, 8005d44 <_fflush_r+0x10>
 8005d3e:	2500      	movs	r5, #0
 8005d40:	4628      	mov	r0, r5
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	b118      	cbz	r0, 8005d4e <_fflush_r+0x1a>
 8005d46:	6983      	ldr	r3, [r0, #24]
 8005d48:	b90b      	cbnz	r3, 8005d4e <_fflush_r+0x1a>
 8005d4a:	f000 f887 	bl	8005e5c <__sinit>
 8005d4e:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <_fflush_r+0x6c>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	d11b      	bne.n	8005d8c <_fflush_r+0x58>
 8005d54:	686c      	ldr	r4, [r5, #4]
 8005d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0ef      	beq.n	8005d3e <_fflush_r+0xa>
 8005d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d60:	07d0      	lsls	r0, r2, #31
 8005d62:	d404      	bmi.n	8005d6e <_fflush_r+0x3a>
 8005d64:	0599      	lsls	r1, r3, #22
 8005d66:	d402      	bmi.n	8005d6e <_fflush_r+0x3a>
 8005d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d6a:	f000 f915 	bl	8005f98 <__retarget_lock_acquire_recursive>
 8005d6e:	4628      	mov	r0, r5
 8005d70:	4621      	mov	r1, r4
 8005d72:	f7ff ff5d 	bl	8005c30 <__sflush_r>
 8005d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d78:	4605      	mov	r5, r0
 8005d7a:	07da      	lsls	r2, r3, #31
 8005d7c:	d4e0      	bmi.n	8005d40 <_fflush_r+0xc>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	059b      	lsls	r3, r3, #22
 8005d82:	d4dd      	bmi.n	8005d40 <_fflush_r+0xc>
 8005d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d86:	f000 f908 	bl	8005f9a <__retarget_lock_release_recursive>
 8005d8a:	e7d9      	b.n	8005d40 <_fflush_r+0xc>
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <_fflush_r+0x70>)
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	d101      	bne.n	8005d96 <_fflush_r+0x62>
 8005d92:	68ac      	ldr	r4, [r5, #8]
 8005d94:	e7df      	b.n	8005d56 <_fflush_r+0x22>
 8005d96:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <_fflush_r+0x74>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	bf08      	it	eq
 8005d9c:	68ec      	ldreq	r4, [r5, #12]
 8005d9e:	e7da      	b.n	8005d56 <_fflush_r+0x22>
 8005da0:	0800e2a0 	.word	0x0800e2a0
 8005da4:	0800e2c0 	.word	0x0800e2c0
 8005da8:	0800e280 	.word	0x0800e280

08005dac <std>:
 8005dac:	2300      	movs	r3, #0
 8005dae:	b510      	push	{r4, lr}
 8005db0:	4604      	mov	r4, r0
 8005db2:	e9c0 3300 	strd	r3, r3, [r0]
 8005db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dba:	6083      	str	r3, [r0, #8]
 8005dbc:	8181      	strh	r1, [r0, #12]
 8005dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8005dc0:	81c2      	strh	r2, [r0, #14]
 8005dc2:	6183      	str	r3, [r0, #24]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	305c      	adds	r0, #92	; 0x5c
 8005dca:	f7ff fd07 	bl	80057dc <memset>
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <std+0x38>)
 8005dd0:	6224      	str	r4, [r4, #32]
 8005dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <std+0x3c>)
 8005dd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <std+0x40>)
 8005dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <std+0x44>)
 8005dde:	6323      	str	r3, [r4, #48]	; 0x30
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	bf00      	nop
 8005de4:	08006081 	.word	0x08006081
 8005de8:	080060a3 	.word	0x080060a3
 8005dec:	080060db 	.word	0x080060db
 8005df0:	080060ff 	.word	0x080060ff

08005df4 <_cleanup_r>:
 8005df4:	4901      	ldr	r1, [pc, #4]	; (8005dfc <_cleanup_r+0x8>)
 8005df6:	f000 b8af 	b.w	8005f58 <_fwalk_reent>
 8005dfa:	bf00      	nop
 8005dfc:	08005d35 	.word	0x08005d35

08005e00 <__sfmoreglue>:
 8005e00:	2268      	movs	r2, #104	; 0x68
 8005e02:	b570      	push	{r4, r5, r6, lr}
 8005e04:	1e4d      	subs	r5, r1, #1
 8005e06:	4355      	muls	r5, r2
 8005e08:	460e      	mov	r6, r1
 8005e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e0e:	f7ff fd55 	bl	80058bc <_malloc_r>
 8005e12:	4604      	mov	r4, r0
 8005e14:	b140      	cbz	r0, 8005e28 <__sfmoreglue+0x28>
 8005e16:	2100      	movs	r1, #0
 8005e18:	e9c0 1600 	strd	r1, r6, [r0]
 8005e1c:	300c      	adds	r0, #12
 8005e1e:	60a0      	str	r0, [r4, #8]
 8005e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e24:	f7ff fcda 	bl	80057dc <memset>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}

08005e2c <__sfp_lock_acquire>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__sfp_lock_acquire+0x8>)
 8005e2e:	f000 b8b3 	b.w	8005f98 <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	2000022d 	.word	0x2000022d

08005e38 <__sfp_lock_release>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__sfp_lock_release+0x8>)
 8005e3a:	f000 b8ae 	b.w	8005f9a <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	2000022d 	.word	0x2000022d

08005e44 <__sinit_lock_acquire>:
 8005e44:	4801      	ldr	r0, [pc, #4]	; (8005e4c <__sinit_lock_acquire+0x8>)
 8005e46:	f000 b8a7 	b.w	8005f98 <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	2000022e 	.word	0x2000022e

08005e50 <__sinit_lock_release>:
 8005e50:	4801      	ldr	r0, [pc, #4]	; (8005e58 <__sinit_lock_release+0x8>)
 8005e52:	f000 b8a2 	b.w	8005f9a <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	2000022e 	.word	0x2000022e

08005e5c <__sinit>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	4604      	mov	r4, r0
 8005e60:	f7ff fff0 	bl	8005e44 <__sinit_lock_acquire>
 8005e64:	69a3      	ldr	r3, [r4, #24]
 8005e66:	b11b      	cbz	r3, 8005e70 <__sinit+0x14>
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6c:	f7ff bff0 	b.w	8005e50 <__sinit_lock_release>
 8005e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e74:	6523      	str	r3, [r4, #80]	; 0x50
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <__sinit+0x68>)
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <__sinit+0x6c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	bf08      	it	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	4620      	mov	r0, r4
 8005e86:	bf08      	it	eq
 8005e88:	61a3      	streq	r3, [r4, #24]
 8005e8a:	f000 f81f 	bl	8005ecc <__sfp>
 8005e8e:	6060      	str	r0, [r4, #4]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 f81b 	bl	8005ecc <__sfp>
 8005e96:	60a0      	str	r0, [r4, #8]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f817 	bl	8005ecc <__sfp>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2104      	movs	r1, #4
 8005ea2:	60e0      	str	r0, [r4, #12]
 8005ea4:	6860      	ldr	r0, [r4, #4]
 8005ea6:	f7ff ff81 	bl	8005dac <std>
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2109      	movs	r1, #9
 8005eae:	68a0      	ldr	r0, [r4, #8]
 8005eb0:	f7ff ff7c 	bl	8005dac <std>
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	2112      	movs	r1, #18
 8005eb8:	68e0      	ldr	r0, [r4, #12]
 8005eba:	f7ff ff77 	bl	8005dac <std>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61a3      	str	r3, [r4, #24]
 8005ec2:	e7d1      	b.n	8005e68 <__sinit+0xc>
 8005ec4:	0800e27c 	.word	0x0800e27c
 8005ec8:	08005df5 	.word	0x08005df5

08005ecc <__sfp>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	4607      	mov	r7, r0
 8005ed0:	f7ff ffac 	bl	8005e2c <__sfp_lock_acquire>
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <__sfp+0x84>)
 8005ed6:	681e      	ldr	r6, [r3, #0]
 8005ed8:	69b3      	ldr	r3, [r6, #24]
 8005eda:	b913      	cbnz	r3, 8005ee2 <__sfp+0x16>
 8005edc:	4630      	mov	r0, r6
 8005ede:	f7ff ffbd 	bl	8005e5c <__sinit>
 8005ee2:	3648      	adds	r6, #72	; 0x48
 8005ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	d503      	bpl.n	8005ef4 <__sfp+0x28>
 8005eec:	6833      	ldr	r3, [r6, #0]
 8005eee:	b30b      	cbz	r3, 8005f34 <__sfp+0x68>
 8005ef0:	6836      	ldr	r6, [r6, #0]
 8005ef2:	e7f7      	b.n	8005ee4 <__sfp+0x18>
 8005ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ef8:	b9d5      	cbnz	r5, 8005f30 <__sfp+0x64>
 8005efa:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <__sfp+0x88>)
 8005efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f00:	60e3      	str	r3, [r4, #12]
 8005f02:	6665      	str	r5, [r4, #100]	; 0x64
 8005f04:	f000 f847 	bl	8005f96 <__retarget_lock_init_recursive>
 8005f08:	f7ff ff96 	bl	8005e38 <__sfp_lock_release>
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	4629      	mov	r1, r5
 8005f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	61a5      	str	r5, [r4, #24]
 8005f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f20:	f7ff fc5c 	bl	80057dc <memset>
 8005f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f30:	3468      	adds	r4, #104	; 0x68
 8005f32:	e7d9      	b.n	8005ee8 <__sfp+0x1c>
 8005f34:	2104      	movs	r1, #4
 8005f36:	4638      	mov	r0, r7
 8005f38:	f7ff ff62 	bl	8005e00 <__sfmoreglue>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	6030      	str	r0, [r6, #0]
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d1d5      	bne.n	8005ef0 <__sfp+0x24>
 8005f44:	f7ff ff78 	bl	8005e38 <__sfp_lock_release>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	e7ee      	b.n	8005f2c <__sfp+0x60>
 8005f4e:	bf00      	nop
 8005f50:	0800e27c 	.word	0x0800e27c
 8005f54:	ffff0001 	.word	0xffff0001

08005f58 <_fwalk_reent>:
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	4688      	mov	r8, r1
 8005f60:	2700      	movs	r7, #0
 8005f62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f6e:	d505      	bpl.n	8005f7c <_fwalk_reent+0x24>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	2c00      	cmp	r4, #0
 8005f74:	d1f7      	bne.n	8005f66 <_fwalk_reent+0xe>
 8005f76:	4638      	mov	r0, r7
 8005f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7c:	89ab      	ldrh	r3, [r5, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d907      	bls.n	8005f92 <_fwalk_reent+0x3a>
 8005f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f86:	3301      	adds	r3, #1
 8005f88:	d003      	beq.n	8005f92 <_fwalk_reent+0x3a>
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	47c0      	blx	r8
 8005f90:	4307      	orrs	r7, r0
 8005f92:	3568      	adds	r5, #104	; 0x68
 8005f94:	e7e9      	b.n	8005f6a <_fwalk_reent+0x12>

08005f96 <__retarget_lock_init_recursive>:
 8005f96:	4770      	bx	lr

08005f98 <__retarget_lock_acquire_recursive>:
 8005f98:	4770      	bx	lr

08005f9a <__retarget_lock_release_recursive>:
 8005f9a:	4770      	bx	lr

08005f9c <__swhatbuf_r>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	460e      	mov	r6, r1
 8005fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	2900      	cmp	r1, #0
 8005fa8:	461d      	mov	r5, r3
 8005faa:	b096      	sub	sp, #88	; 0x58
 8005fac:	da08      	bge.n	8005fc0 <__swhatbuf_r+0x24>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	061a      	lsls	r2, r3, #24
 8005fb8:	d410      	bmi.n	8005fdc <__swhatbuf_r+0x40>
 8005fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fbe:	e00e      	b.n	8005fde <__swhatbuf_r+0x42>
 8005fc0:	466a      	mov	r2, sp
 8005fc2:	f000 f8c3 	bl	800614c <_fstat_r>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	dbf1      	blt.n	8005fae <__swhatbuf_r+0x12>
 8005fca:	9a01      	ldr	r2, [sp, #4]
 8005fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fd4:	425a      	negs	r2, r3
 8005fd6:	415a      	adcs	r2, r3
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	e7ee      	b.n	8005fba <__swhatbuf_r+0x1e>
 8005fdc:	2340      	movs	r3, #64	; 0x40
 8005fde:	2000      	movs	r0, #0
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	b016      	add	sp, #88	; 0x58
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fe8 <__smakebuf_r>:
 8005fe8:	898b      	ldrh	r3, [r1, #12]
 8005fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fec:	079d      	lsls	r5, r3, #30
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	d507      	bpl.n	8006004 <__smakebuf_r+0x1c>
 8005ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	6163      	str	r3, [r4, #20]
 8006000:	b002      	add	sp, #8
 8006002:	bd70      	pop	{r4, r5, r6, pc}
 8006004:	466a      	mov	r2, sp
 8006006:	ab01      	add	r3, sp, #4
 8006008:	f7ff ffc8 	bl	8005f9c <__swhatbuf_r>
 800600c:	9900      	ldr	r1, [sp, #0]
 800600e:	4605      	mov	r5, r0
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff fc53 	bl	80058bc <_malloc_r>
 8006016:	b948      	cbnz	r0, 800602c <__smakebuf_r+0x44>
 8006018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601c:	059a      	lsls	r2, r3, #22
 800601e:	d4ef      	bmi.n	8006000 <__smakebuf_r+0x18>
 8006020:	f023 0303 	bic.w	r3, r3, #3
 8006024:	f043 0302 	orr.w	r3, r3, #2
 8006028:	81a3      	strh	r3, [r4, #12]
 800602a:	e7e3      	b.n	8005ff4 <__smakebuf_r+0xc>
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <__smakebuf_r+0x7c>)
 800602e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	6020      	str	r0, [r4, #0]
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	6120      	str	r0, [r4, #16]
 800603e:	6163      	str	r3, [r4, #20]
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	b15b      	cbz	r3, 800605c <__smakebuf_r+0x74>
 8006044:	4630      	mov	r0, r6
 8006046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800604a:	f000 f891 	bl	8006170 <_isatty_r>
 800604e:	b128      	cbz	r0, 800605c <__smakebuf_r+0x74>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	89a0      	ldrh	r0, [r4, #12]
 800605e:	4305      	orrs	r5, r0
 8006060:	81a5      	strh	r5, [r4, #12]
 8006062:	e7cd      	b.n	8006000 <__smakebuf_r+0x18>
 8006064:	08005df5 	.word	0x08005df5

08006068 <__malloc_lock>:
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <__malloc_lock+0x8>)
 800606a:	f7ff bf95 	b.w	8005f98 <__retarget_lock_acquire_recursive>
 800606e:	bf00      	nop
 8006070:	2000022c 	.word	0x2000022c

08006074 <__malloc_unlock>:
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <__malloc_unlock+0x8>)
 8006076:	f7ff bf90 	b.w	8005f9a <__retarget_lock_release_recursive>
 800607a:	bf00      	nop
 800607c:	2000022c 	.word	0x2000022c

08006080 <__sread>:
 8006080:	b510      	push	{r4, lr}
 8006082:	460c      	mov	r4, r1
 8006084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006088:	f000 f894 	bl	80061b4 <_read_r>
 800608c:	2800      	cmp	r0, #0
 800608e:	bfab      	itete	ge
 8006090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006092:	89a3      	ldrhlt	r3, [r4, #12]
 8006094:	181b      	addge	r3, r3, r0
 8006096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800609a:	bfac      	ite	ge
 800609c:	6563      	strge	r3, [r4, #84]	; 0x54
 800609e:	81a3      	strhlt	r3, [r4, #12]
 80060a0:	bd10      	pop	{r4, pc}

080060a2 <__swrite>:
 80060a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a6:	461f      	mov	r7, r3
 80060a8:	898b      	ldrh	r3, [r1, #12]
 80060aa:	4605      	mov	r5, r0
 80060ac:	05db      	lsls	r3, r3, #23
 80060ae:	460c      	mov	r4, r1
 80060b0:	4616      	mov	r6, r2
 80060b2:	d505      	bpl.n	80060c0 <__swrite+0x1e>
 80060b4:	2302      	movs	r3, #2
 80060b6:	2200      	movs	r2, #0
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	f000 f868 	bl	8006190 <_lseek_r>
 80060c0:	89a3      	ldrh	r3, [r4, #12]
 80060c2:	4632      	mov	r2, r6
 80060c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c8:	81a3      	strh	r3, [r4, #12]
 80060ca:	4628      	mov	r0, r5
 80060cc:	463b      	mov	r3, r7
 80060ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060d6:	f000 b817 	b.w	8006108 <_write_r>

080060da <__sseek>:
 80060da:	b510      	push	{r4, lr}
 80060dc:	460c      	mov	r4, r1
 80060de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e2:	f000 f855 	bl	8006190 <_lseek_r>
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	bf15      	itete	ne
 80060ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060f6:	81a3      	strheq	r3, [r4, #12]
 80060f8:	bf18      	it	ne
 80060fa:	81a3      	strhne	r3, [r4, #12]
 80060fc:	bd10      	pop	{r4, pc}

080060fe <__sclose>:
 80060fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006102:	f000 b813 	b.w	800612c <_close_r>
	...

08006108 <_write_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	4608      	mov	r0, r1
 800610e:	4611      	mov	r1, r2
 8006110:	2200      	movs	r2, #0
 8006112:	4d05      	ldr	r5, [pc, #20]	; (8006128 <_write_r+0x20>)
 8006114:	602a      	str	r2, [r5, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	f7fa fdeb 	bl	8000cf2 <_write>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_write_r+0x1e>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_write_r+0x1e>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000230 	.word	0x20000230

0800612c <_close_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	2300      	movs	r3, #0
 8006130:	4d05      	ldr	r5, [pc, #20]	; (8006148 <_close_r+0x1c>)
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fa fdf7 	bl	8000d2a <_close>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_close_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_close_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20000230 	.word	0x20000230

0800614c <_fstat_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	2300      	movs	r3, #0
 8006150:	4d06      	ldr	r5, [pc, #24]	; (800616c <_fstat_r+0x20>)
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	602b      	str	r3, [r5, #0]
 800615a:	f7fa fdf1 	bl	8000d40 <_fstat>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	d102      	bne.n	8006168 <_fstat_r+0x1c>
 8006162:	682b      	ldr	r3, [r5, #0]
 8006164:	b103      	cbz	r3, 8006168 <_fstat_r+0x1c>
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	bd38      	pop	{r3, r4, r5, pc}
 800616a:	bf00      	nop
 800616c:	20000230 	.word	0x20000230

08006170 <_isatty_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	2300      	movs	r3, #0
 8006174:	4d05      	ldr	r5, [pc, #20]	; (800618c <_isatty_r+0x1c>)
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fa fdef 	bl	8000d5e <_isatty>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_isatty_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_isatty_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000230 	.word	0x20000230

08006190 <_lseek_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	4611      	mov	r1, r2
 8006198:	2200      	movs	r2, #0
 800619a:	4d05      	ldr	r5, [pc, #20]	; (80061b0 <_lseek_r+0x20>)
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fa fde7 	bl	8000d72 <_lseek>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_lseek_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_lseek_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20000230 	.word	0x20000230

080061b4 <_read_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	2200      	movs	r2, #0
 80061be:	4d05      	ldr	r5, [pc, #20]	; (80061d4 <_read_r+0x20>)
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f7fa fd78 	bl	8000cb8 <_read>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_read_r+0x1e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_read_r+0x1e>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000230 	.word	0x20000230

080061d8 <_init>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr

080061e4 <_fini>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr
