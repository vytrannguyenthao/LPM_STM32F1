
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000484c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b00  08004b00  000207c4  2**0
                  CONTENTS
  4 .ARM          00000000  08004b00  08004b00  000207c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b00  08004b00  000207c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c4  20000000  08004b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200007c4  080052cc  000207c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cb4  080052cc  00020cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047d9  00000000  00000000  000207ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001325  00000000  00000000  00024fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  000262f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d8  00000000  00000000  000268c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000232f  00000000  00000000  00026da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071fb  00000000  00000000  000290cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a987  00000000  00000000  000302ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008ac51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab0  00000000  00000000  0008aca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200007c4 	.word	0x200007c4
 800014c:	00000000 	.word	0x00000000
 8000150:	08004964 	.word	0x08004964

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200007c8 	.word	0x200007c8
 800016c:	08004964 	.word	0x08004964

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <Set_hms>:
	uint32_t temp = current_time.hour*60*60 + current_time.min*60 + current_time.sec;
	RTC_set_counter(temp);
}


void Set_hms(uint8_t hour, uint8_t min, uint8_t sec){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	460b      	mov	r3, r1
 800018c:	71bb      	strb	r3, [r7, #6]
 800018e:	4613      	mov	r3, r2
 8000190:	717b      	strb	r3, [r7, #5]
	current_time.hour = hour;
 8000192:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <Set_hms+0x58>)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	71d3      	strb	r3, [r2, #7]
	current_time.min = min;
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <Set_hms+0x58>)
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	7213      	strb	r3, [r2, #8]
	current_time.sec = sec;
 800019e:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <Set_hms+0x58>)
 80001a0:	797b      	ldrb	r3, [r7, #5]
 80001a2:	7253      	strb	r3, [r2, #9]
	/*Change the value of counter register*/
	uint32_t temp = current_time.hour*60*60 + current_time.min*60 + current_time.sec;
 80001a4:	4b0c      	ldr	r3, [pc, #48]	; (80001d8 <Set_hms+0x58>)
 80001a6:	79db      	ldrb	r3, [r3, #7]
 80001a8:	461a      	mov	r2, r3
 80001aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80001ae:	fb03 f202 	mul.w	r2, r3, r2
 80001b2:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <Set_hms+0x58>)
 80001b4:	7a1b      	ldrb	r3, [r3, #8]
 80001b6:	4619      	mov	r1, r3
 80001b8:	460b      	mov	r3, r1
 80001ba:	011b      	lsls	r3, r3, #4
 80001bc:	1a5b      	subs	r3, r3, r1
 80001be:	009b      	lsls	r3, r3, #2
 80001c0:	4413      	add	r3, r2
 80001c2:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <Set_hms+0x58>)
 80001c4:	7a52      	ldrb	r2, [r2, #9]
 80001c6:	4413      	add	r3, r2
 80001c8:	60fb      	str	r3, [r7, #12]
	RTC_set_counter(temp);
 80001ca:	68f8      	ldr	r0, [r7, #12]
 80001cc:	f003 f83e 	bl	800324c <RTC_set_counter>
}
 80001d0:	bf00      	nop
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	20000c60 	.word	0x20000c60

080001dc <Set_dmy>:

void Set_dmy(uint32_t year, uint8_t mon, uint8_t date, uint8_t day){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	4608      	mov	r0, r1
 80001e6:	4611      	mov	r1, r2
 80001e8:	461a      	mov	r2, r3
 80001ea:	4603      	mov	r3, r0
 80001ec:	70fb      	strb	r3, [r7, #3]
 80001ee:	460b      	mov	r3, r1
 80001f0:	70bb      	strb	r3, [r7, #2]
 80001f2:	4613      	mov	r3, r2
 80001f4:	707b      	strb	r3, [r7, #1]
	current_time.year = year;
 80001f6:	4a10      	ldr	r2, [pc, #64]	; (8000238 <Set_dmy+0x5c>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	6013      	str	r3, [r2, #0]
	current_time.mon = mon;
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <Set_dmy+0x5c>)
 80001fe:	78fb      	ldrb	r3, [r7, #3]
 8000200:	7113      	strb	r3, [r2, #4]
	current_time.date = date;
 8000202:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <Set_dmy+0x5c>)
 8000204:	78bb      	ldrb	r3, [r7, #2]
 8000206:	7153      	strb	r3, [r2, #5]
	current_time.day = day;
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <Set_dmy+0x5c>)
 800020a:	787b      	ldrb	r3, [r7, #1]
 800020c:	7193      	strb	r3, [r2, #6]

	/*Change data in backup register*/
	BKP_write_enable();
 800020e:	f003 f835 	bl	800327c <BKP_write_enable>
	BKP->DR1 = year;
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <Set_dmy+0x60>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	6053      	str	r3, [r2, #4]
	BKP->DR2 = mon;
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <Set_dmy+0x60>)
 800021a:	78fb      	ldrb	r3, [r7, #3]
 800021c:	6093      	str	r3, [r2, #8]
	BKP->DR3 = date;
 800021e:	4a07      	ldr	r2, [pc, #28]	; (800023c <Set_dmy+0x60>)
 8000220:	78bb      	ldrb	r3, [r7, #2]
 8000222:	60d3      	str	r3, [r2, #12]
	BKP->DR4 = day;
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <Set_dmy+0x60>)
 8000226:	787b      	ldrb	r3, [r7, #1]
 8000228:	6113      	str	r3, [r2, #16]
	BKP_write_disable();
 800022a:	f003 f835 	bl	8003298 <BKP_write_disable>
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000c60 	.word	0x20000c60
 800023c:	40006c00 	.word	0x40006c00

08000240 <Set_cycle>:


void Set_cycle(uint8_t cycle){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	/*Change data in backup register*/
	BKP_write_enable();
 800024a:	f003 f817 	bl	800327c <BKP_write_enable>
	BKP->DR5 = cycle;
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <Set_cycle+0x20>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	6153      	str	r3, [r2, #20]
	BKP_write_disable();
 8000254:	f003 f820 	bl	8003298 <BKP_write_disable>
}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40006c00 	.word	0x40006c00

08000264 <Get_cycle>:

void Get_cycle(uint8_t *cycle){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	/*Change data in backup register*/
	BKP_write_enable();
 800026c:	f003 f806 	bl	800327c <BKP_write_enable>
	*cycle = BKP->DR5;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <Get_cycle+0x24>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	701a      	strb	r2, [r3, #0]
	BKP_write_disable();
 800027a:	f003 f80d 	bl	8003298 <BKP_write_disable>
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40006c00 	.word	0x40006c00

0800028c <Set_alarm_times>:

void Set_alarm_times(uint8_t times){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	/*Change data in backup register*/
	BKP_write_enable();
 8000296:	f002 fff1 	bl	800327c <BKP_write_enable>
	BKP->DR6 = times;
 800029a:	4a04      	ldr	r2, [pc, #16]	; (80002ac <Set_alarm_times+0x20>)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	6193      	str	r3, [r2, #24]
	BKP_write_disable();
 80002a0:	f002 fffa 	bl	8003298 <BKP_write_disable>
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40006c00 	.word	0x40006c00

080002b0 <Get_alarm_times>:

void Get_alarm_times(uint8_t *times){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	/*Change data in backup register*/
	BKP_write_enable();
 80002b8:	f002 ffe0 	bl	800327c <BKP_write_enable>
	*times = BKP->DR6;
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <Get_alarm_times+0x24>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	701a      	strb	r2, [r3, #0]
	BKP_write_disable();
 80002c6:	f002 ffe7 	bl	8003298 <BKP_write_disable>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40006c00 	.word	0x40006c00

080002d8 <Set_alarm>:

void Set_alarm(uint8_t hour, uint8_t min, uint8_t sec){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	460b      	mov	r3, r1
 80002e4:	71bb      	strb	r3, [r7, #6]
 80002e6:	4613      	mov	r3, r2
 80002e8:	717b      	strb	r3, [r7, #5]
	alarm_time.hour = hour;
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <Set_alarm+0x58>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	71d3      	strb	r3, [r2, #7]
	alarm_time.min = min;
 80002f0:	4a0f      	ldr	r2, [pc, #60]	; (8000330 <Set_alarm+0x58>)
 80002f2:	79bb      	ldrb	r3, [r7, #6]
 80002f4:	7213      	strb	r3, [r2, #8]
	alarm_time.sec = sec;
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <Set_alarm+0x58>)
 80002f8:	797b      	ldrb	r3, [r7, #5]
 80002fa:	7253      	strb	r3, [r2, #9]

	/*Change the value of counter register*/
	uint32_t temp = alarm_time.hour*60*60 + alarm_time.min*60 + alarm_time.sec;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <Set_alarm+0x58>)
 80002fe:	79db      	ldrb	r3, [r3, #7]
 8000300:	461a      	mov	r2, r3
 8000302:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000306:	fb03 f202 	mul.w	r2, r3, r2
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <Set_alarm+0x58>)
 800030c:	7a1b      	ldrb	r3, [r3, #8]
 800030e:	4619      	mov	r1, r3
 8000310:	460b      	mov	r3, r1
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4413      	add	r3, r2
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <Set_alarm+0x58>)
 800031c:	7a52      	ldrb	r2, [r2, #9]
 800031e:	4413      	add	r3, r2
 8000320:	60fb      	str	r3, [r7, #12]
	RTC_set_alarm(temp);
 8000322:	68f8      	ldr	r0, [r7, #12]
 8000324:	f002 ff7a 	bl	800321c <RTC_set_alarm>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000c78 	.word	0x20000c78

08000334 <GPIO_Pin_Configure>:
#include "gpio.h"

void GPIO_Pin_Configure(uint8_t GPIO_x, uint32_t Pin, uint32_t MODE, uint32_t FUNC){
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	60b9      	str	r1, [r7, #8]
 800033c:	607a      	str	r2, [r7, #4]
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	4603      	mov	r3, r0
 8000342:	73fb      	strb	r3, [r7, #15]
	 * 2. Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL / GPIOx_CRH register.
	 * 3. Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL / GPIOx_CRH register.
	************************************************/

	/*1.Enable clock to access GPIO by setting IOPxEN in RCC_APB2ENR register*/
	RCC->APB2ENR |= GPIO_x;
 8000344:	4b62      	ldr	r3, [pc, #392]	; (80004d0 <GPIO_Pin_Configure+0x19c>)
 8000346:	699a      	ldr	r2, [r3, #24]
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	4961      	ldr	r1, [pc, #388]	; (80004d0 <GPIO_Pin_Configure+0x19c>)
 800034c:	4313      	orrs	r3, r2
 800034e:	618b      	str	r3, [r1, #24]

	if(Pin < 8){
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	2b07      	cmp	r3, #7
 8000354:	d858      	bhi.n	8000408 <GPIO_Pin_Configure+0xd4>
		switch(GPIO_x){
 8000356:	7bfb      	ldrb	r3, [r7, #15]
 8000358:	2b10      	cmp	r3, #16
 800035a:	d038      	beq.n	80003ce <GPIO_Pin_Configure+0x9a>
 800035c:	2b10      	cmp	r3, #16
 800035e:	dc4f      	bgt.n	8000400 <GPIO_Pin_Configure+0xcc>
 8000360:	2b04      	cmp	r3, #4
 8000362:	d002      	beq.n	800036a <GPIO_Pin_Configure+0x36>
 8000364:	2b08      	cmp	r3, #8
 8000366:	d019      	beq.n	800039c <GPIO_Pin_Configure+0x68>
 8000368:	e04a      	b.n	8000400 <GPIO_Pin_Configure+0xcc>
			case GPIO_A:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL register*/
				GPIOA->CRL &= ~(0xf << (Pin << 2));
 800036a:	4b5a      	ldr	r3, [pc, #360]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	68ba      	ldr	r2, [r7, #8]
 8000370:	0092      	lsls	r2, r2, #2
 8000372:	210f      	movs	r1, #15
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a55      	ldr	r2, [pc, #340]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 800037e:	400b      	ands	r3, r1
 8000380:	6013      	str	r3, [r2, #0]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL register*/
				GPIOA->CRL |= ((MODE | FUNC) << (Pin << 2));
 8000382:	4b54      	ldr	r3, [pc, #336]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	4319      	orrs	r1, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	494f      	ldr	r1, [pc, #316]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 8000396:	4313      	orrs	r3, r2
 8000398:	600b      	str	r3, [r1, #0]
			break;
 800039a:	e094      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
			case GPIO_B:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL register*/
				GPIOB->CRL &= ~(0xf << (Pin << 2));
 800039c:	4b4e      	ldr	r3, [pc, #312]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	0092      	lsls	r2, r2, #2
 80003a4:	210f      	movs	r1, #15
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a4a      	ldr	r2, [pc, #296]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 80003b0:	400b      	ands	r3, r1
 80003b2:	6013      	str	r3, [r2, #0]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL register*/
				GPIOB->CRL |= ((MODE | FUNC) << (Pin << 2));
 80003b4:	4b48      	ldr	r3, [pc, #288]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	6879      	ldr	r1, [r7, #4]
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	4319      	orrs	r1, r3
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	fa01 f303 	lsl.w	r3, r1, r3
 80003c6:	4944      	ldr	r1, [pc, #272]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 80003c8:	4313      	orrs	r3, r2
 80003ca:	600b      	str	r3, [r1, #0]
			break;
 80003cc:	e07b      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
			case GPIO_C:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRL register*/
				GPIOC->CRL &= ~(0xf << (Pin << 2));
 80003ce:	4b43      	ldr	r3, [pc, #268]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	68ba      	ldr	r2, [r7, #8]
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	210f      	movs	r1, #15
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a3e      	ldr	r2, [pc, #248]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRL register*/
				GPIOC->CRL |= ((MODE | FUNC) << (Pin << 2));
 80003e6:	4b3d      	ldr	r3, [pc, #244]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	4319      	orrs	r1, r3
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	4938      	ldr	r1, [pc, #224]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 80003fa:	4313      	orrs	r3, r2
 80003fc:	600b      	str	r3, [r1, #0]
			break;
 80003fe:	e062      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
			default:
				printf("Error!, gpio.c/GPIO_Pin_Configure\n");
 8000400:	4837      	ldr	r0, [pc, #220]	; (80004e0 <GPIO_Pin_Configure+0x1ac>)
 8000402:	f003 fdd1 	bl	8003fa8 <puts>
			break;
 8000406:	e05e      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
		}
	}
	else{
		switch(GPIO_x){
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	2b10      	cmp	r3, #16
 800040c:	d03c      	beq.n	8000488 <GPIO_Pin_Configure+0x154>
 800040e:	2b10      	cmp	r3, #16
 8000410:	dc55      	bgt.n	80004be <GPIO_Pin_Configure+0x18a>
 8000412:	2b04      	cmp	r3, #4
 8000414:	d002      	beq.n	800041c <GPIO_Pin_Configure+0xe8>
 8000416:	2b08      	cmp	r3, #8
 8000418:	d01b      	beq.n	8000452 <GPIO_Pin_Configure+0x11e>
 800041a:	e050      	b.n	80004be <GPIO_Pin_Configure+0x18a>
			case GPIO_A:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRH register*/
				GPIOA->CRH &= ~(0xf << ((Pin - 8) << 2));
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	68ba      	ldr	r2, [r7, #8]
 8000422:	3a08      	subs	r2, #8
 8000424:	0092      	lsls	r2, r2, #2
 8000426:	210f      	movs	r1, #15
 8000428:	fa01 f202 	lsl.w	r2, r1, r2
 800042c:	43d2      	mvns	r2, r2
 800042e:	4611      	mov	r1, r2
 8000430:	4a28      	ldr	r2, [pc, #160]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 8000432:	400b      	ands	r3, r1
 8000434:	6053      	str	r3, [r2, #4]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRH register*/
				GPIOA->CRH |= ((MODE | FUNC) << ((Pin - 8) << 2));
 8000436:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 8000438:	685a      	ldr	r2, [r3, #4]
 800043a:	6879      	ldr	r1, [r7, #4]
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	4319      	orrs	r1, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	3b08      	subs	r3, #8
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	4922      	ldr	r1, [pc, #136]	; (80004d4 <GPIO_Pin_Configure+0x1a0>)
 800044c:	4313      	orrs	r3, r2
 800044e:	604b      	str	r3, [r1, #4]
			break;
 8000450:	e039      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
			case GPIO_B:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRH register*/
				GPIOB->CRH &= ~(0xf << ((Pin - 8) << 2));
 8000452:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	68ba      	ldr	r2, [r7, #8]
 8000458:	3a08      	subs	r2, #8
 800045a:	0092      	lsls	r2, r2, #2
 800045c:	210f      	movs	r1, #15
 800045e:	fa01 f202 	lsl.w	r2, r1, r2
 8000462:	43d2      	mvns	r2, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 8000468:	400b      	ands	r3, r1
 800046a:	6053      	str	r3, [r2, #4]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRH register*/
				GPIOB->CRH |= ((MODE | FUNC) << ((Pin - 8) << 2));
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	6879      	ldr	r1, [r7, #4]
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	4319      	orrs	r1, r3
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	3b08      	subs	r3, #8
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	4915      	ldr	r1, [pc, #84]	; (80004d8 <GPIO_Pin_Configure+0x1a4>)
 8000482:	4313      	orrs	r3, r2
 8000484:	604b      	str	r3, [r1, #4]
			break;
 8000486:	e01e      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
			case GPIO_C:
				/*2.Reset MODEx, CNFx bits by writing 0 in GPIOx_CRH register*/
				GPIOC->CRH &= ~(0xf << ((Pin - 8) << 2));
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	68ba      	ldr	r2, [r7, #8]
 800048e:	3a08      	subs	r2, #8
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	210f      	movs	r1, #15
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	43d2      	mvns	r2, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a0f      	ldr	r2, [pc, #60]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 800049e:	400b      	ands	r3, r1
 80004a0:	6053      	str	r3, [r2, #4]

				/*3.Configure GPIO by setting MODEx, CNFx bits in GPIOx_CRH register*/
				GPIOC->CRH |= ((MODE | FUNC) << ((Pin - 8) << 2));
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	4319      	orrs	r1, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	3b08      	subs	r3, #8
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	4909      	ldr	r1, [pc, #36]	; (80004dc <GPIO_Pin_Configure+0x1a8>)
 80004b8:	4313      	orrs	r3, r2
 80004ba:	604b      	str	r3, [r1, #4]
			break;
 80004bc:	e003      	b.n	80004c6 <GPIO_Pin_Configure+0x192>
			default:
				printf("Error!, gpio.c/GPIO_Pin_Configure\n");
 80004be:	4808      	ldr	r0, [pc, #32]	; (80004e0 <GPIO_Pin_Configure+0x1ac>)
 80004c0:	f003 fd72 	bl	8003fa8 <puts>
			break;
 80004c4:	bf00      	nop
		}
	}
}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	40011000 	.word	0x40011000
 80004e0:	0800497c 	.word	0x0800497c

080004e4 <GPIO_set_out_pin>:

void GPIO_set_out_pin(uint8_t GPIO_x, uint32_t Pin, uint8_t STATE){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	4613      	mov	r3, r2
 80004f2:	71bb      	strb	r3, [r7, #6]
	switch(GPIO_x){
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b10      	cmp	r3, #16
 80004f8:	d032      	beq.n	8000560 <GPIO_set_out_pin+0x7c>
 80004fa:	2b10      	cmp	r3, #16
 80004fc:	dc46      	bgt.n	800058c <GPIO_set_out_pin+0xa8>
 80004fe:	2b04      	cmp	r3, #4
 8000500:	d002      	beq.n	8000508 <GPIO_set_out_pin+0x24>
 8000502:	2b08      	cmp	r3, #8
 8000504:	d016      	beq.n	8000534 <GPIO_set_out_pin+0x50>
 8000506:	e041      	b.n	800058c <GPIO_set_out_pin+0xa8>
		case GPIO_A:
			/*Reset ODRx bit by writing 0 in GPIOx_ODR register*/
			GPIOA->ODR &= ~(0x1 << Pin);
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <GPIO_set_out_pin+0xb8>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	2101      	movs	r1, #1
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	43d2      	mvns	r2, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a20      	ldr	r2, [pc, #128]	; (800059c <GPIO_set_out_pin+0xb8>)
 800051a:	400b      	ands	r3, r1
 800051c:	60d3      	str	r3, [r2, #12]

			/*Configure GPIO ouput state by setting ODRx bit in GPIOx_ODR register*/
			GPIOA->ODR |= (STATE << Pin);
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <GPIO_set_out_pin+0xb8>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	79b9      	ldrb	r1, [r7, #6]
 8000524:	683a      	ldr	r2, [r7, #0]
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a1b      	ldr	r2, [pc, #108]	; (800059c <GPIO_set_out_pin+0xb8>)
 800052e:	430b      	orrs	r3, r1
 8000530:	60d3      	str	r3, [r2, #12]
		break;
 8000532:	e02f      	b.n	8000594 <GPIO_set_out_pin+0xb0>
		case GPIO_B:
			/*Reset ODRx bit by writing 0 in GPIOx_ODR register*/
			GPIOB->ODR &= ~(0x1 << Pin);
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <GPIO_set_out_pin+0xbc>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	2101      	movs	r1, #1
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	fa01 f202 	lsl.w	r2, r1, r2
 8000540:	43d2      	mvns	r2, r2
 8000542:	4611      	mov	r1, r2
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <GPIO_set_out_pin+0xbc>)
 8000546:	400b      	ands	r3, r1
 8000548:	60d3      	str	r3, [r2, #12]

			/*Configure GPIO ouput state by setting ODRx bit in GPIOx_ODR register*/
			GPIOB->ODR |= (STATE << Pin);
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <GPIO_set_out_pin+0xbc>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	79b9      	ldrb	r1, [r7, #6]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	fa01 f202 	lsl.w	r2, r1, r2
 8000556:	4611      	mov	r1, r2
 8000558:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <GPIO_set_out_pin+0xbc>)
 800055a:	430b      	orrs	r3, r1
 800055c:	60d3      	str	r3, [r2, #12]
		break;
 800055e:	e019      	b.n	8000594 <GPIO_set_out_pin+0xb0>
		case GPIO_C:
			/*Reset ODRx bit by writing 0 in GPIOx_ODR register*/
			GPIOC->ODR &= ~(0x1 << Pin);
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <GPIO_set_out_pin+0xc0>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	2101      	movs	r1, #1
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	43d2      	mvns	r2, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <GPIO_set_out_pin+0xc0>)
 8000572:	400b      	ands	r3, r1
 8000574:	60d3      	str	r3, [r2, #12]

			/*Configure GPIO ouput state by setting ODRx bit in GPIOx_ODR register*/
			GPIOC->ODR |= (STATE << Pin);
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <GPIO_set_out_pin+0xc0>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	79b9      	ldrb	r1, [r7, #6]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <GPIO_set_out_pin+0xc0>)
 8000586:	430b      	orrs	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
		break;
 800058a:	e003      	b.n	8000594 <GPIO_set_out_pin+0xb0>
		default:
			printf("Error!, gpio.c/GPIO_set_out_pin\n");
 800058c:	4806      	ldr	r0, [pc, #24]	; (80005a8 <GPIO_set_out_pin+0xc4>)
 800058e:	f003 fd0b 	bl	8003fa8 <puts>
		break;
 8000592:	bf00      	nop
	}
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010800 	.word	0x40010800
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	40011000 	.word	0x40011000
 80005a8:	080049a0 	.word	0x080049a0

080005ac <Wakeup_pin_init>:
			printf("Error!, gpio.c/GPIO_toogle_out_pin\n");
		break;
	}
}

void Wakeup_pin_init(void){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	/*Enable clock to access GPIOA*/
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <Wakeup_pin_init+0x48>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <Wakeup_pin_init+0x48>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]

	/*Set PA0 mode to input (00)*/
	GPIOA->CRL &= ~(GPIO_CRL_MODE0_0 | GPIO_CRL_MODE0_1);
 80005bc:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005c2:	f023 0303 	bic.w	r3, r3, #3
 80005c6:	6013      	str	r3, [r2, #0]


	GPIOA->CRL &= ~GPIO_CRL_CNF0_0;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005ce:	f023 0304 	bic.w	r3, r3, #4
 80005d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF0_1;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	6013      	str	r3, [r2, #0]

	GPIOA->ODR &= ~GPIO_ODR_ODR0;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <Wakeup_pin_init+0x4c>)
 80005e6:	f023 0301 	bic.w	r3, r3, #1
 80005ea:	60d3      	str	r3, [r2, #12]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800

080005fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4906      	ldr	r1, [pc, #24]	; (8000630 <__NVIC_EnableIRQ+0x34>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	db0a      	blt.n	800065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	440b      	add	r3, r1
 8000658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800065c:	e00a      	b.n	8000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	0112      	lsls	r2, r2, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	440b      	add	r3, r1
 8000672:	761a      	strb	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Button_init>:

	/*6.Enable EXTI in NVIC*/
	NVIC_EnableIRQ(EXTI1_IRQn);
}

void Button_init(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	 * 6. Enable EXTI in NVIC.
	 ***********************************************************/

	/*0.Configure GPIO pin to Pull-up input mode*/
	/*Enable clock to access GPIOA*/
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800068c:	4b98      	ldr	r3, [pc, #608]	; (80008f0 <Button_init+0x268>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a97      	ldr	r2, [pc, #604]	; (80008f0 <Button_init+0x268>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]

	/*Enable clock to access GPIOB*/
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000698:	4b95      	ldr	r3, [pc, #596]	; (80008f0 <Button_init+0x268>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a94      	ldr	r2, [pc, #592]	; (80008f0 <Button_init+0x268>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	6193      	str	r3, [r2, #24]

//	/*Set PA4, PA3, PA11, PA12 to input mode*/
//	GPIOA->CRL &= ~(GPIO_CRL_MODE4_0 | GPIO_CRL_MODE4_1);
//	GPIOA->CRL &= ~(GPIO_CRL_MODE3_0 | GPIO_CRL_MODE3_1);
	GPIOA->CRH &= ~(GPIO_CRH_MODE11_0 | GPIO_CRH_MODE11_1);
 80006a4:	4b93      	ldr	r3, [pc, #588]	; (80008f4 <Button_init+0x26c>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a92      	ldr	r2, [pc, #584]	; (80008f4 <Button_init+0x26c>)
 80006aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006ae:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_MODE12_0 | GPIO_CRH_MODE12_1);
 80006b0:	4b90      	ldr	r3, [pc, #576]	; (80008f4 <Button_init+0x26c>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a8f      	ldr	r2, [pc, #572]	; (80008f4 <Button_init+0x26c>)
 80006b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80006ba:	6053      	str	r3, [r2, #4]

	/*Set PA4, PA3, PB5, PB6 to input mode*/
	GPIOA->CRL &= ~(GPIO_CRL_MODE4_0 | GPIO_CRL_MODE4_1);
 80006bc:	4b8d      	ldr	r3, [pc, #564]	; (80008f4 <Button_init+0x26c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a8c      	ldr	r2, [pc, #560]	; (80008f4 <Button_init+0x26c>)
 80006c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80006c6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(GPIO_CRL_MODE3_0 | GPIO_CRL_MODE3_1);
 80006c8:	4b8a      	ldr	r3, [pc, #552]	; (80008f4 <Button_init+0x26c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a89      	ldr	r2, [pc, #548]	; (80008f4 <Button_init+0x26c>)
 80006ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006d2:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(GPIO_CRL_MODE5_0 | GPIO_CRL_MODE5_1);
 80006d4:	4b88      	ldr	r3, [pc, #544]	; (80008f8 <Button_init+0x270>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a87      	ldr	r2, [pc, #540]	; (80008f8 <Button_init+0x270>)
 80006da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80006de:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~(GPIO_CRL_MODE6_0 | GPIO_CRL_MODE6_1);
 80006e0:	4b85      	ldr	r3, [pc, #532]	; (80008f8 <Button_init+0x270>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a84      	ldr	r2, [pc, #528]	; (80008f8 <Button_init+0x270>)
 80006e6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006ea:	6013      	str	r3, [r2, #0]
//	/*SeT PA4, PA3, PA11, PA12 to input Pull-up/ Pull-down mode (10)*/
//	GPIOA->CRL |= GPIO_CRL_CNF4_1;
//	GPIOA->CRL &= ~GPIO_CRL_CNF4_0;
//	GPIOA->CRL |= GPIO_CRL_CNF3_1;
//	GPIOA->CRL &= ~GPIO_CRL_CNF3_0;
	GPIOA->CRH|= GPIO_CRH_CNF11_1;
 80006ec:	4b81      	ldr	r3, [pc, #516]	; (80008f4 <Button_init+0x26c>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	4a80      	ldr	r2, [pc, #512]	; (80008f4 <Button_init+0x26c>)
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_CNF11_0;
 80006f8:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <Button_init+0x26c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a7d      	ldr	r2, [pc, #500]	; (80008f4 <Button_init+0x26c>)
 80006fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000702:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF12_1;
 8000704:	4b7b      	ldr	r3, [pc, #492]	; (80008f4 <Button_init+0x26c>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a7a      	ldr	r2, [pc, #488]	; (80008f4 <Button_init+0x26c>)
 800070a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800070e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~GPIO_CRH_CNF12_0;
 8000710:	4b78      	ldr	r3, [pc, #480]	; (80008f4 <Button_init+0x26c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	4a77      	ldr	r2, [pc, #476]	; (80008f4 <Button_init+0x26c>)
 8000716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071a:	6053      	str	r3, [r2, #4]

	/*Set PA4, PA3, PB5, PB6 to input Pull-up/ Pull-down mode (10)*/
	GPIOA->CRL |= GPIO_CRL_CNF4_1;
 800071c:	4b75      	ldr	r3, [pc, #468]	; (80008f4 <Button_init+0x26c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a74      	ldr	r2, [pc, #464]	; (80008f4 <Button_init+0x26c>)
 8000722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000726:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF4_0;
 8000728:	4b72      	ldr	r3, [pc, #456]	; (80008f4 <Button_init+0x26c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a71      	ldr	r2, [pc, #452]	; (80008f4 <Button_init+0x26c>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000732:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_1;
 8000734:	4b6f      	ldr	r3, [pc, #444]	; (80008f4 <Button_init+0x26c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a6e      	ldr	r2, [pc, #440]	; (80008f4 <Button_init+0x26c>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF3_0;
 8000740:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <Button_init+0x26c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a6b      	ldr	r2, [pc, #428]	; (80008f4 <Button_init+0x26c>)
 8000746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF5_1;
 800074c:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <Button_init+0x270>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a69      	ldr	r2, [pc, #420]	; (80008f8 <Button_init+0x270>)
 8000752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000756:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF5_0;
 8000758:	4b67      	ldr	r3, [pc, #412]	; (80008f8 <Button_init+0x270>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a66      	ldr	r2, [pc, #408]	; (80008f8 <Button_init+0x270>)
 800075e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000762:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF6_1;
 8000764:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <Button_init+0x270>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a63      	ldr	r2, [pc, #396]	; (80008f8 <Button_init+0x270>)
 800076a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800076e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL &= ~GPIO_CRL_CNF6_0;
 8000770:	4b61      	ldr	r3, [pc, #388]	; (80008f8 <Button_init+0x270>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a60      	ldr	r2, [pc, #384]	; (80008f8 <Button_init+0x270>)
 8000776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800077a:	6013      	str	r3, [r2, #0]

//	/*Configure the ODR (1-> Pull UP, 0-> Pull down)*/
//	GPIOA->ODR |= GPIO_ODR_ODR4;
//	GPIOA->ODR |= GPIO_ODR_ODR3;
	GPIOA->ODR |= GPIO_ODR_ODR11;
 800077c:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <Button_init+0x26c>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	4a5c      	ldr	r2, [pc, #368]	; (80008f4 <Button_init+0x26c>)
 8000782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000786:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= GPIO_ODR_ODR12;
 8000788:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <Button_init+0x26c>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a59      	ldr	r2, [pc, #356]	; (80008f4 <Button_init+0x26c>)
 800078e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000792:	60d3      	str	r3, [r2, #12]

	/*Configure the ODR (1-> Pull UP, 0-> Pull down)*/
	GPIOA->ODR |= GPIO_ODR_ODR4;
 8000794:	4b57      	ldr	r3, [pc, #348]	; (80008f4 <Button_init+0x26c>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a56      	ldr	r2, [pc, #344]	; (80008f4 <Button_init+0x26c>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= GPIO_ODR_ODR3;
 80007a0:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <Button_init+0x26c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a53      	ldr	r2, [pc, #332]	; (80008f4 <Button_init+0x26c>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR5;
 80007ac:	4b52      	ldr	r3, [pc, #328]	; (80008f8 <Button_init+0x270>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a51      	ldr	r2, [pc, #324]	; (80008f8 <Button_init+0x270>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= GPIO_ODR_ODR6;
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <Button_init+0x270>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <Button_init+0x270>)
 80007be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c2:	60d3      	str	r3, [r2, #12]

	/*1.Enable the AFIO bit in the RCC_APB2ENR Register*/
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <Button_init+0x268>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a49      	ldr	r2, [pc, #292]	; (80008f0 <Button_init+0x268>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6193      	str	r3, [r2, #24]

//	/*2.Configure the EXTI configuration Register in the AFIO_EXTICRx*/
//	AFIO->EXTICR[0] &= ~(0xf<<12);		//PA3
//	AFIO->EXTICR[1] &= ~(0xf<<0);		//PA4
	AFIO->EXTICR[2] &= ~(0xf<<12);		//PA11
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <Button_init+0x274>)
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	4a49      	ldr	r2, [pc, #292]	; (80008fc <Button_init+0x274>)
 80007d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80007da:	6113      	str	r3, [r2, #16]
	AFIO->EXTICR[3] &= ~(0xf<<0);		//PA12
 80007dc:	4b47      	ldr	r3, [pc, #284]	; (80008fc <Button_init+0x274>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	4a46      	ldr	r2, [pc, #280]	; (80008fc <Button_init+0x274>)
 80007e2:	f023 030f 	bic.w	r3, r3, #15
 80007e6:	6153      	str	r3, [r2, #20]

	/*2.Configure the EXTI configuration Register in the AFIO_EXTICRx*/
	AFIO->EXTICR[0] &= ~(0xf<<12);		//PA3
 80007e8:	4b44      	ldr	r3, [pc, #272]	; (80008fc <Button_init+0x274>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	4a43      	ldr	r2, [pc, #268]	; (80008fc <Button_init+0x274>)
 80007ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80007f2:	6093      	str	r3, [r2, #8]
	AFIO->EXTICR[1] &= ~(0xf<<0);		//PA4
 80007f4:	4b41      	ldr	r3, [pc, #260]	; (80008fc <Button_init+0x274>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	4a40      	ldr	r2, [pc, #256]	; (80008fc <Button_init+0x274>)
 80007fa:	f023 030f 	bic.w	r3, r3, #15
 80007fe:	60d3      	str	r3, [r2, #12]
	AFIO->EXTICR[1] &= ~(0xf<<4);		//PB5
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <Button_init+0x274>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4a3d      	ldr	r2, [pc, #244]	; (80008fc <Button_init+0x274>)
 8000806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800080a:	60d3      	str	r3, [r2, #12]
	AFIO->EXTICR[1] |= (1<<4);			//PB5
 800080c:	4b3b      	ldr	r3, [pc, #236]	; (80008fc <Button_init+0x274>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a3a      	ldr	r2, [pc, #232]	; (80008fc <Button_init+0x274>)
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	60d3      	str	r3, [r2, #12]
	AFIO->EXTICR[1] &= ~(0xf<<8);		//PB5
 8000818:	4b38      	ldr	r3, [pc, #224]	; (80008fc <Button_init+0x274>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4a37      	ldr	r2, [pc, #220]	; (80008fc <Button_init+0x274>)
 800081e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000822:	60d3      	str	r3, [r2, #12]
	AFIO->EXTICR[1] |= (1<<8);			//PB6
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <Button_init+0x274>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	4a34      	ldr	r2, [pc, #208]	; (80008fc <Button_init+0x274>)
 800082a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082e:	60d3      	str	r3, [r2, #12]

//	/*3.Disable the EXTI Mask in EXTI_IMR register*/
//	EXTI->IMR |= EXTI_IMR_IM3;
//	EXTI->IMR |= EXTI_IMR_IM4;
	EXTI->IMR |= EXTI_IMR_IM11;
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <Button_init+0x278>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a32      	ldr	r2, [pc, #200]	; (8000900 <Button_init+0x278>)
 8000836:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800083a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM12;
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <Button_init+0x278>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <Button_init+0x278>)
 8000842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000846:	6013      	str	r3, [r2, #0]

	/*3.Disable the EXTI Mask in EXTI_IMR register*/
	EXTI->IMR |= EXTI_IMR_IM3;
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <Button_init+0x278>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <Button_init+0x278>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM4;
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <Button_init+0x278>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a29      	ldr	r2, [pc, #164]	; (8000900 <Button_init+0x278>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM5;
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <Button_init+0x278>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <Button_init+0x278>)
 8000866:	f043 0320 	orr.w	r3, r3, #32
 800086a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_IM6;
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <Button_init+0x278>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a23      	ldr	r2, [pc, #140]	; (8000900 <Button_init+0x278>)
 8000872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000876:	6013      	str	r3, [r2, #0]

	/*4.Configure the Trigger Selection bits in EXTI_RTSR and EXTI_FTSR*/
//	/*Disable Rising Edge Trigger for PA4, PA3, PA11, PA12*/
//	EXTI->RTSR &= ~EXTI_RTSR_RT4;
//	EXTI->RTSR &= ~EXTI_RTSR_RT3;
	EXTI->RTSR &= ~EXTI_RTSR_RT11;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <Button_init+0x278>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <Button_init+0x278>)
 800087e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000882:	6093      	str	r3, [r2, #8]
	EXTI->RTSR &= ~EXTI_RTSR_RT12;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <Button_init+0x278>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <Button_init+0x278>)
 800088a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800088e:	6093      	str	r3, [r2, #8]
//
//	/*Enable Falling Edge Trigger for PA4, PA3, PA11, PA12*/
//	EXTI->FTSR |= EXTI_FTSR_FT4;
//	EXTI->FTSR |= EXTI_FTSR_FT3;
	EXTI->FTSR |= EXTI_FTSR_FT11;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <Button_init+0x278>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <Button_init+0x278>)
 8000896:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089a:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_FT12;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <Button_init+0x278>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <Button_init+0x278>)
 80008a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a6:	60d3      	str	r3, [r2, #12]

	/*Disable Rising Edge Trigger for PA4, PA3, PB5, PB6*/
	EXTI->RTSR &= ~EXTI_RTSR_RT4;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <Button_init+0x278>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <Button_init+0x278>)
 80008ae:	f023 0310 	bic.w	r3, r3, #16
 80008b2:	6093      	str	r3, [r2, #8]
	EXTI->RTSR &= ~EXTI_RTSR_RT3;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <Button_init+0x278>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a11      	ldr	r2, [pc, #68]	; (8000900 <Button_init+0x278>)
 80008ba:	f023 0308 	bic.w	r3, r3, #8
 80008be:	6093      	str	r3, [r2, #8]
	EXTI->RTSR &= ~EXTI_RTSR_RT5;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <Button_init+0x278>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <Button_init+0x278>)
 80008c6:	f023 0320 	bic.w	r3, r3, #32
 80008ca:	6093      	str	r3, [r2, #8]
	EXTI->RTSR &= ~EXTI_RTSR_RT6;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <Button_init+0x278>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <Button_init+0x278>)
 80008d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008d6:	6093      	str	r3, [r2, #8]

	/*Enable Falling Edge Trigger for PA4, PA3, PB5, PB6*/
	EXTI->FTSR |= EXTI_FTSR_FT4;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <Button_init+0x278>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	4a08      	ldr	r2, [pc, #32]	; (8000900 <Button_init+0x278>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_FT3;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <Button_init+0x278>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a05      	ldr	r2, [pc, #20]	; (8000900 <Button_init+0x278>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	e009      	b.n	8000904 <Button_init+0x27c>
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40010c00 	.word	0x40010c00
 80008fc:	40010000 	.word	0x40010000
 8000900:	40010400 	.word	0x40010400
 8000904:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_FT5;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <Button_init+0x2d4>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <Button_init+0x2d4>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_FT6;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <Button_init+0x2d4>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <Button_init+0x2d4>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	60d3      	str	r3, [r2, #12]

	/*5.Set the Interrupt Priority*/
	NVIC_SetPriority(EXTI3_IRQn, 2);
 800091e:	2102      	movs	r1, #2
 8000920:	2009      	movs	r0, #9
 8000922:	f7ff fe87 	bl	8000634 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI4_IRQn, 2);
 8000926:	2102      	movs	r1, #2
 8000928:	200a      	movs	r0, #10
 800092a:	f7ff fe83 	bl	8000634 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI9_5_IRQn, 2);
 800092e:	2102      	movs	r1, #2
 8000930:	2017      	movs	r0, #23
 8000932:	f7ff fe7f 	bl	8000634 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI15_10_IRQn, 2);
 8000936:	2102      	movs	r1, #2
 8000938:	2028      	movs	r0, #40	; 0x28
 800093a:	f7ff fe7b 	bl	8000634 <__NVIC_SetPriority>

	/*6.Enable EXTI in NVIC*/
	NVIC_EnableIRQ(EXTI3_IRQn);
 800093e:	2009      	movs	r0, #9
 8000940:	f7ff fe5c 	bl	80005fc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000944:	200a      	movs	r0, #10
 8000946:	f7ff fe59 	bl	80005fc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800094a:	2017      	movs	r0, #23
 800094c:	f7ff fe56 	bl	80005fc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f7ff fe53 	bl	80005fc <__NVIC_EnableIRQ>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010400 	.word	0x40010400

08000960 <main>:
void (*button0_mode_ptr)(void);
void (*button1_mode_ptr)(void);
void (*button2_mode_ptr)(void);
void (*button3_mode_ptr)(void);

int main(void){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	SysClockConfig();
 8000966:	f002 fb75 	bl	8003054 <SysClockConfig>
	RTC_clk_config();
 800096a:	f002 fbcf 	bl	800310c <RTC_clk_config>

	SPI1_pin_init();
 800096e:	f002 ffa8 	bl	80038c2 <SPI1_pin_init>
	SPI1_master_config();
 8000972:	f002 ffd3 	bl	800391c <SPI1_master_config>
	SPI1_enable();
 8000976:	f002 ffc3 	bl	8003900 <SPI1_enable>

	GPIO_Pin_Configure(LED, OUTPUT_10MHZ, OUTPUT_GP_OD);
 800097a:	2304      	movs	r3, #4
 800097c:	2201      	movs	r2, #1
 800097e:	210d      	movs	r1, #13
 8000980:	2010      	movs	r0, #16
 8000982:	f7ff fcd7 	bl	8000334 <GPIO_Pin_Configure>
	Button_init();
 8000986:	f7ff fe7f 	bl	8000688 <Button_init>

	LCD_init();
 800098a:	f002 fe7e 	bl	800368a <LCD_init>
	LCD_enable();
 800098e:	f002 fe95 	bl	80036bc <LCD_enable>

	RTC_interrupt_en();
 8000992:	f002 fc2f 	bl	80031f4 <RTC_interrupt_en>
	Wakeup_pin_init();
 8000996:	f7ff fe09 	bl	80005ac <Wakeup_pin_init>
	Wakeup_pin_en();
 800099a:	f003 f837 	bl	8003a0c <Wakeup_pin_en>

	Timer2Config();
 800099e:	f003 f957 	bl	8003c50 <Timer2Config>
	Timer3Config();
 80009a2:	f003 f9ab 	bl	8003cfc <Timer3Config>
	Timer4Config();
 80009a6:	f003 f9d9 	bl	8003d5c <Timer4Config>
		LCD_send_image(stitch);
		Delay_ms(1000);
	}

	/*Read data in BKD*/
	Get_cycle(&cycle);
 80009aa:	4811      	ldr	r0, [pc, #68]	; (80009f0 <main+0x90>)
 80009ac:	f7ff fc5a 	bl	8000264 <Get_cycle>
	Get_alarm_times(&alarm_times);
 80009b0:	4810      	ldr	r0, [pc, #64]	; (80009f4 <main+0x94>)
 80009b2:	f7ff fc7d 	bl	80002b0 <Get_alarm_times>

	/*Set initial value*/
	button0_mode_ptr = &set_dmy_mode;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <main+0x98>)
 80009b8:	4a10      	ldr	r2, [pc, #64]	; (80009fc <main+0x9c>)
 80009ba:	601a      	str	r2, [r3, #0]
	button1_mode_ptr = &set_hms_mode;
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <main+0xa0>)
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <main+0xa4>)
 80009c0:	601a      	str	r2, [r3, #0]
	button2_mode_ptr = &set_cycle_mode;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <main+0xa8>)
 80009c4:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <main+0xac>)
 80009c6:	601a      	str	r2, [r3, #0]
	button3_mode_ptr = &set_alarm_mode;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <main+0xb0>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <main+0xb4>)
 80009cc:	601a      	str	r2, [r3, #0]
	mode = DISPLAY_MODE;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <main+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	flag = 0;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0xbc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

	while(1){
		Get_time(&current_time);
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <main+0xc0>)
 80009dc:	f002 fc6a 	bl	80032b4 <Get_time>
		flag_handler();
 80009e0:	f000 f8e4 	bl	8000bac <flag_handler>
		mode_handler();
 80009e4:	f000 f95a 	bl	8000c9c <mode_handler>
		LCD_display();
 80009e8:	f002 fe49 	bl	800367e <LCD_display>
		Get_time(&current_time);
 80009ec:	e7f5      	b.n	80009da <main+0x7a>
 80009ee:	bf00      	nop
 80009f0:	20000c88 	.word	0x20000c88
 80009f4:	20000c8a 	.word	0x20000c8a
 80009f8:	20000c8c 	.word	0x20000c8c
 80009fc:	08001271 	.word	0x08001271
 8000a00:	20000c90 	.word	0x20000c90
 8000a04:	08001b25 	.word	0x08001b25
 8000a08:	20000c94 	.word	0x20000c94
 8000a0c:	08002011 	.word	0x08002011
 8000a10:	20000c98 	.word	0x20000c98
 8000a14:	08001bd9 	.word	0x08001bd9
 8000a18:	20000c84 	.word	0x20000c84
 8000a1c:	20000c86 	.word	0x20000c86
 8000a20:	20000c60 	.word	0x20000c60

08000a24 <EXTI4_IRQHandler>:
	}
}


void EXTI4_IRQHandler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<4))    // If the PA4 triggered the interrupt
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <EXTI4_IRQHandler+0x2c>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <EXTI4_IRQHandler+0x22>
	{
		flag = 1;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <EXTI4_IRQHandler+0x30>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= (1<<4);  // Clear the interrupt flag by writing a 1
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <EXTI4_IRQHandler+0x2c>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <EXTI4_IRQHandler+0x2c>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	6153      	str	r3, [r2, #20]
	}
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40010400 	.word	0x40010400
 8000a54:	20000c86 	.word	0x20000c86

08000a58 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<3))    // If the PA3 triggered the interrupt
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <EXTI3_IRQHandler+0x2c>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d008      	beq.n	8000a7a <EXTI3_IRQHandler+0x22>
	{
		flag = 2;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <EXTI3_IRQHandler+0x30>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= (1<<3);  // Clear the interrupt flag by writing a 1
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <EXTI3_IRQHandler+0x2c>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <EXTI3_IRQHandler+0x2c>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6153      	str	r3, [r2, #20]
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400
 8000a88:	20000c86 	.word	0x20000c86

08000a8c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1<<11))    // If the PA11 triggered the interrupt
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <EXTI15_10_IRQHandler+0x48>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <EXTI15_10_IRQHandler+0x22>
	{
		flag = 3;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <EXTI15_10_IRQHandler+0x4c>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= (1<<11);  // Clear the interrupt flag by writing a 1
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <EXTI15_10_IRQHandler+0x48>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <EXTI15_10_IRQHandler+0x48>)
 8000aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aac:	6153      	str	r3, [r2, #20]
	}
	if (EXTI->PR & (1<<12))    // If the PA12 triggered the interrupt
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <EXTI15_10_IRQHandler+0x48>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d008      	beq.n	8000acc <EXTI15_10_IRQHandler+0x40>
	{
		flag = 4;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <EXTI15_10_IRQHandler+0x4c>)
 8000abc:	2204      	movs	r2, #4
 8000abe:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= (1<<12);  // Clear the interrupt flag by writing a 1
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <EXTI15_10_IRQHandler+0x48>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a03      	ldr	r2, [pc, #12]	; (8000ad4 <EXTI15_10_IRQHandler+0x48>)
 8000ac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aca:	6153      	str	r3, [r2, #20]
	}
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	40010400 	.word	0x40010400
 8000ad8:	20000c86 	.word	0x20000c86

08000adc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

	if (EXTI->PR & (1<<5))    // If the PB5 triggered the interrupt
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <EXTI9_5_IRQHandler+0x48>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <EXTI9_5_IRQHandler+0x22>
	{
		flag = 3;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <EXTI9_5_IRQHandler+0x4c>)
 8000aee:	2203      	movs	r2, #3
 8000af0:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= (1<<5);  // Clear the interrupt flag by writing a 1
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <EXTI9_5_IRQHandler+0x48>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <EXTI9_5_IRQHandler+0x48>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	6153      	str	r3, [r2, #20]
	}

	if (EXTI->PR & (1<<6))    // If the PB6 triggered the interrupt
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <EXTI9_5_IRQHandler+0x48>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d008      	beq.n	8000b1c <EXTI9_5_IRQHandler+0x40>
	{
		flag = 4;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <EXTI9_5_IRQHandler+0x4c>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	701a      	strb	r2, [r3, #0]
		EXTI->PR |= (1<<6);  // Clear the interrupt flag by writing a 1
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <EXTI9_5_IRQHandler+0x48>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <EXTI9_5_IRQHandler+0x48>)
 8000b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1a:	6153      	str	r3, [r2, #20]
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40010400 	.word	0x40010400
 8000b28:	20000c86 	.word	0x20000c86

08000b2c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	blink ^= 1;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <TIM3_IRQHandler+0x28>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f083 0301 	eor.w	r3, r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <TIM3_IRQHandler+0x28>)
 8000b3c:	701a      	strb	r2, [r3, #0]
    TIM3->SR &= ~TIM_SR_UIF;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <TIM3_IRQHandler+0x2c>)
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <TIM3_IRQHandler+0x2c>)
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6113      	str	r3, [r2, #16]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000c85 	.word	0x20000c85
 8000b58:	40000400 	.word	0x40000400

08000b5c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
	flag = 6;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <TIM4_IRQHandler+0x20>)
 8000b62:	2206      	movs	r2, #6
 8000b64:	701a      	strb	r2, [r3, #0]
    TIM4->SR &= ~TIM_SR_UIF;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <TIM4_IRQHandler+0x24>)
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <TIM4_IRQHandler+0x24>)
 8000b6c:	f023 0301 	bic.w	r3, r3, #1
 8000b70:	6113      	str	r3, [r2, #16]
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000c86 	.word	0x20000c86
 8000b80:	40000800 	.word	0x40000800

08000b84 <RTC_IRQHandler>:

void RTC_IRQHandler(void){
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
	flag = 5;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <RTC_IRQHandler+0x20>)
 8000b8a:	2205      	movs	r2, #5
 8000b8c:	701a      	strb	r2, [r3, #0]
	RTC->CRL &= ~RTC_CRL_ALRF;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <RTC_IRQHandler+0x24>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <RTC_IRQHandler+0x24>)
 8000b94:	f023 0302 	bic.w	r3, r3, #2
 8000b98:	6053      	str	r3, [r2, #4]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000c86 	.word	0x20000c86
 8000ba8:	40002800 	.word	0x40002800

08000bac <flag_handler>:

void flag_handler(void){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	switch (flag) {
 8000bb0:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <flag_handler+0xd0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	d859      	bhi.n	8000c6e <flag_handler+0xc2>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <flag_handler+0x14>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd9 	.word	0x08000bd9
 8000bc4:	08000bf1 	.word	0x08000bf1
 8000bc8:	08000c09 	.word	0x08000c09
 8000bcc:	08000c21 	.word	0x08000c21
 8000bd0:	08000c39 	.word	0x08000c39
 8000bd4:	08000c69 	.word	0x08000c69
		case 1:
			Delay_ms(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f003 f877 	bl	8003ccc <Delay_ms>
			Reset_timer4_counter();
 8000bde:	f003 f8f3 	bl	8003dc8 <Reset_timer4_counter>
			button0_mode_ptr();
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <flag_handler+0xd4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4798      	blx	r3
			flag = 0;
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <flag_handler+0xd0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	701a      	strb	r2, [r3, #0]
			break;
 8000bee:	e042      	b.n	8000c76 <flag_handler+0xca>
		case 2:
			Delay_ms(100);
 8000bf0:	2064      	movs	r0, #100	; 0x64
 8000bf2:	f003 f86b 	bl	8003ccc <Delay_ms>
			Reset_timer4_counter();
 8000bf6:	f003 f8e7 	bl	8003dc8 <Reset_timer4_counter>
			button1_mode_ptr();
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <flag_handler+0xd8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4798      	blx	r3
			flag = 0;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <flag_handler+0xd0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
			break;
 8000c06:	e036      	b.n	8000c76 <flag_handler+0xca>
		case 3:
			Delay_ms(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f003 f85f 	bl	8003ccc <Delay_ms>
			Reset_timer4_counter();
 8000c0e:	f003 f8db 	bl	8003dc8 <Reset_timer4_counter>
			button2_mode_ptr();
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <flag_handler+0xdc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4798      	blx	r3
			flag = 0;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <flag_handler+0xd0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
			break;
 8000c1e:	e02a      	b.n	8000c76 <flag_handler+0xca>
		case 4:
			Delay_ms(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f003 f853 	bl	8003ccc <Delay_ms>
			Reset_timer4_counter();
 8000c26:	f003 f8cf 	bl	8003dc8 <Reset_timer4_counter>
			button3_mode_ptr();
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <flag_handler+0xe0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4798      	blx	r3
			flag = 0;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <flag_handler+0xd0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
			break;
 8000c36:	e01e      	b.n	8000c76 <flag_handler+0xca>
		case 5:
			if(cycle & (1 << (current_time.day - 2))){
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <flag_handler+0xe4>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <flag_handler+0xe8>)
 8000c40:	799b      	ldrb	r3, [r3, #6]
 8000c42:	3b02      	subs	r3, #2
 8000c44:	fa42 f303 	asr.w	r3, r2, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d007      	beq.n	8000c60 <flag_handler+0xb4>
				mode = ALARM_MODE;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <flag_handler+0xec>)
 8000c52:	2216      	movs	r2, #22
 8000c54:	701a      	strb	r2, [r3, #0]
				GPIO_set_out_pin(GPIO_A, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f7ff fc42 	bl	80004e4 <GPIO_set_out_pin>
			}
			flag = 0;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <flag_handler+0xd0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
			break;
 8000c66:	e006      	b.n	8000c76 <flag_handler+0xca>
		case 6:
			/*Save data to BKD*/

			/*Enter standby mode*/
			Enter_standby_mode();
 8000c68:	f002 fef4 	bl	8003a54 <Enter_standby_mode>
			break;
 8000c6c:	e003      	b.n	8000c76 <flag_handler+0xca>
		default:
			flag = 0;
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <flag_handler+0xd0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			break;
 8000c74:	bf00      	nop
	}
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000c86 	.word	0x20000c86
 8000c80:	20000c8c 	.word	0x20000c8c
 8000c84:	20000c90 	.word	0x20000c90
 8000c88:	20000c94 	.word	0x20000c94
 8000c8c:	20000c98 	.word	0x20000c98
 8000c90:	20000c88 	.word	0x20000c88
 8000c94:	20000c60 	.word	0x20000c60
 8000c98:	20000c84 	.word	0x20000c84

08000c9c <mode_handler>:

void mode_handler(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	switch (mode) {
 8000ca0:	4b8f      	ldr	r3, [pc, #572]	; (8000ee0 <mode_handler+0x244>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b16      	cmp	r3, #22
 8000ca6:	f200 81c2 	bhi.w	800102e <mode_handler+0x392>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <mode_handler+0x14>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000d0d 	.word	0x08000d0d
 8000cb4:	08000d2b 	.word	0x08000d2b
 8000cb8:	08000d53 	.word	0x08000d53
 8000cbc:	08000d71 	.word	0x08000d71
 8000cc0:	08000d8f 	.word	0x08000d8f
 8000cc4:	08000dad 	.word	0x08000dad
 8000cc8:	08000dcb 	.word	0x08000dcb
 8000ccc:	08000de9 	.word	0x08000de9
 8000cd0:	08000e07 	.word	0x08000e07
 8000cd4:	08000e25 	.word	0x08000e25
 8000cd8:	08000e43 	.word	0x08000e43
 8000cdc:	08000e69 	.word	0x08000e69
 8000ce0:	08000e87 	.word	0x08000e87
 8000ce4:	08000ea5 	.word	0x08000ea5
 8000ce8:	08000ec3 	.word	0x08000ec3
 8000cec:	08000f89 	.word	0x08000f89
 8000cf0:	08000fa7 	.word	0x08000fa7
 8000cf4:	08000fc5 	.word	0x08000fc5
 8000cf8:	08000fe3 	.word	0x08000fe3
 8000cfc:	0800102f 	.word	0x0800102f
 8000d00:	0800102f 	.word	0x0800102f
 8000d04:	0800102f 	.word	0x0800102f
 8000d08:	08001011 	.word	0x08001011
		case DISPLAY_MODE:
			button0_mode_ptr = &set_dmy_mode;
 8000d0c:	4b75      	ldr	r3, [pc, #468]	; (8000ee4 <mode_handler+0x248>)
 8000d0e:	4a76      	ldr	r2, [pc, #472]	; (8000ee8 <mode_handler+0x24c>)
 8000d10:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_hms_mode;
 8000d12:	4b76      	ldr	r3, [pc, #472]	; (8000eec <mode_handler+0x250>)
 8000d14:	4a76      	ldr	r2, [pc, #472]	; (8000ef0 <mode_handler+0x254>)
 8000d16:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &set_cycle_mode;
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <mode_handler+0x258>)
 8000d1a:	4a77      	ldr	r2, [pc, #476]	; (8000ef8 <mode_handler+0x25c>)
 8000d1c:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &set_alarm_mode;
 8000d1e:	4b77      	ldr	r3, [pc, #476]	; (8000efc <mode_handler+0x260>)
 8000d20:	4a77      	ldr	r2, [pc, #476]	; (8000f00 <mode_handler+0x264>)
 8000d22:	601a      	str	r2, [r3, #0]
			display_mode();
 8000d24:	f000 f9b6 	bl	8001094 <display_mode>
			break;
 8000d28:	e190      	b.n	800104c <mode_handler+0x3b0>
		case SET_DMY_MODE:
			temp_time = current_time;
 8000d2a:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <mode_handler+0x268>)
 8000d2c:	4a76      	ldr	r2, [pc, #472]	; (8000f08 <mode_handler+0x26c>)
 8000d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			button0_mode_ptr = &display_mode;
 8000d34:	4b6b      	ldr	r3, [pc, #428]	; (8000ee4 <mode_handler+0x248>)
 8000d36:	4a75      	ldr	r2, [pc, #468]	; (8000f0c <mode_handler+0x270>)
 8000d38:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_year_mode;
 8000d3a:	4b6c      	ldr	r3, [pc, #432]	; (8000eec <mode_handler+0x250>)
 8000d3c:	4a74      	ldr	r2, [pc, #464]	; (8000f10 <mode_handler+0x274>)
 8000d3e:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &display_mode;
 8000d40:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <mode_handler+0x258>)
 8000d42:	4a72      	ldr	r2, [pc, #456]	; (8000f0c <mode_handler+0x270>)
 8000d44:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &display_mode;
 8000d46:	4b6d      	ldr	r3, [pc, #436]	; (8000efc <mode_handler+0x260>)
 8000d48:	4a70      	ldr	r2, [pc, #448]	; (8000f0c <mode_handler+0x270>)
 8000d4a:	601a      	str	r2, [r3, #0]
			set_dmy_mode();
 8000d4c:	f000 fa90 	bl	8001270 <set_dmy_mode>
			break;
 8000d50:	e17c      	b.n	800104c <mode_handler+0x3b0>
		case SET_YEAR_MODE:
			button0_mode_ptr = &display_mode;
 8000d52:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <mode_handler+0x248>)
 8000d54:	4a6d      	ldr	r2, [pc, #436]	; (8000f0c <mode_handler+0x270>)
 8000d56:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_mon_mode;
 8000d58:	4b64      	ldr	r3, [pc, #400]	; (8000eec <mode_handler+0x250>)
 8000d5a:	4a6e      	ldr	r2, [pc, #440]	; (8000f14 <mode_handler+0x278>)
 8000d5c:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_year_mode;
 8000d5e:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <mode_handler+0x258>)
 8000d60:	4a6d      	ldr	r2, [pc, #436]	; (8000f18 <mode_handler+0x27c>)
 8000d62:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_year_mode;
 8000d64:	4b65      	ldr	r3, [pc, #404]	; (8000efc <mode_handler+0x260>)
 8000d66:	4a6d      	ldr	r2, [pc, #436]	; (8000f1c <mode_handler+0x280>)
 8000d68:	601a      	str	r2, [r3, #0]
			set_year_mode();
 8000d6a:	f000 fb39 	bl	80013e0 <set_year_mode>
			break;
 8000d6e:	e16d      	b.n	800104c <mode_handler+0x3b0>
		case SET_MON_MODE:
			button0_mode_ptr = &display_mode;
 8000d70:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <mode_handler+0x248>)
 8000d72:	4a66      	ldr	r2, [pc, #408]	; (8000f0c <mode_handler+0x270>)
 8000d74:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_date_mode;
 8000d76:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <mode_handler+0x250>)
 8000d78:	4a69      	ldr	r2, [pc, #420]	; (8000f20 <mode_handler+0x284>)
 8000d7a:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_mon_mode;
 8000d7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <mode_handler+0x258>)
 8000d7e:	4a69      	ldr	r2, [pc, #420]	; (8000f24 <mode_handler+0x288>)
 8000d80:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_mon_mode;
 8000d82:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <mode_handler+0x260>)
 8000d84:	4a68      	ldr	r2, [pc, #416]	; (8000f28 <mode_handler+0x28c>)
 8000d86:	601a      	str	r2, [r3, #0]
			set_mon_mode();
 8000d88:	f000 fbf2 	bl	8001570 <set_mon_mode>
			break;
 8000d8c:	e15e      	b.n	800104c <mode_handler+0x3b0>
		case SET_DATE_MODE:
			button0_mode_ptr = &display_mode;
 8000d8e:	4b55      	ldr	r3, [pc, #340]	; (8000ee4 <mode_handler+0x248>)
 8000d90:	4a5e      	ldr	r2, [pc, #376]	; (8000f0c <mode_handler+0x270>)
 8000d92:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_day_mode;
 8000d94:	4b55      	ldr	r3, [pc, #340]	; (8000eec <mode_handler+0x250>)
 8000d96:	4a65      	ldr	r2, [pc, #404]	; (8000f2c <mode_handler+0x290>)
 8000d98:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_date_mode;
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <mode_handler+0x258>)
 8000d9c:	4a64      	ldr	r2, [pc, #400]	; (8000f30 <mode_handler+0x294>)
 8000d9e:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_date_mode;
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <mode_handler+0x260>)
 8000da2:	4a64      	ldr	r2, [pc, #400]	; (8000f34 <mode_handler+0x298>)
 8000da4:	601a      	str	r2, [r3, #0]
			set_date_mode();
 8000da6:	f000 fc13 	bl	80015d0 <set_date_mode>
			break;
 8000daa:	e14f      	b.n	800104c <mode_handler+0x3b0>
		case SET_DAY_MODE:
			button0_mode_ptr = &display_mode;
 8000dac:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <mode_handler+0x248>)
 8000dae:	4a57      	ldr	r2, [pc, #348]	; (8000f0c <mode_handler+0x270>)
 8000db0:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &save_mode;
 8000db2:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <mode_handler+0x250>)
 8000db4:	4a60      	ldr	r2, [pc, #384]	; (8000f38 <mode_handler+0x29c>)
 8000db6:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_day_mode;
 8000db8:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <mode_handler+0x258>)
 8000dba:	4a60      	ldr	r2, [pc, #384]	; (8000f3c <mode_handler+0x2a0>)
 8000dbc:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_day_mode;
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <mode_handler+0x260>)
 8000dc0:	4a5f      	ldr	r2, [pc, #380]	; (8000f40 <mode_handler+0x2a4>)
 8000dc2:	601a      	str	r2, [r3, #0]
			set_day_mode();
 8000dc4:	f000 fc34 	bl	8001630 <set_day_mode>
			break;
 8000dc8:	e140      	b.n	800104c <mode_handler+0x3b0>
		case SET_HMS_MODE:
			button0_mode_ptr = &display_mode;
 8000dca:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <mode_handler+0x248>)
 8000dcc:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <mode_handler+0x270>)
 8000dce:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_hour_mode;
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <mode_handler+0x250>)
 8000dd2:	4a5c      	ldr	r2, [pc, #368]	; (8000f44 <mode_handler+0x2a8>)
 8000dd4:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &display_mode;
 8000dd6:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <mode_handler+0x258>)
 8000dd8:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <mode_handler+0x270>)
 8000dda:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &display_mode;
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <mode_handler+0x260>)
 8000dde:	4a4b      	ldr	r2, [pc, #300]	; (8000f0c <mode_handler+0x270>)
 8000de0:	601a      	str	r2, [r3, #0]
			set_hms_mode();
 8000de2:	f000 fe9f 	bl	8001b24 <set_hms_mode>
			break;
 8000de6:	e131      	b.n	800104c <mode_handler+0x3b0>
		case SET_HOUR_MODE:
			button0_mode_ptr = &display_mode;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <mode_handler+0x248>)
 8000dea:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <mode_handler+0x270>)
 8000dec:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_min_mode;
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <mode_handler+0x250>)
 8000df0:	4a55      	ldr	r2, [pc, #340]	; (8000f48 <mode_handler+0x2ac>)
 8000df2:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_hour_mode;
 8000df4:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <mode_handler+0x258>)
 8000df6:	4a55      	ldr	r2, [pc, #340]	; (8000f4c <mode_handler+0x2b0>)
 8000df8:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_hour_mode;
 8000dfa:	4b40      	ldr	r3, [pc, #256]	; (8000efc <mode_handler+0x260>)
 8000dfc:	4a54      	ldr	r2, [pc, #336]	; (8000f50 <mode_handler+0x2b4>)
 8000dfe:	601a      	str	r2, [r3, #0]
			set_hour_mode();
 8000e00:	f000 ff44 	bl	8001c8c <set_hour_mode>
			break;
 8000e04:	e122      	b.n	800104c <mode_handler+0x3b0>
		case SET_MIN_MODE:
			button0_mode_ptr = &display_mode;
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <mode_handler+0x248>)
 8000e08:	4a40      	ldr	r2, [pc, #256]	; (8000f0c <mode_handler+0x270>)
 8000e0a:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_sec_mode;
 8000e0c:	4b37      	ldr	r3, [pc, #220]	; (8000eec <mode_handler+0x250>)
 8000e0e:	4a51      	ldr	r2, [pc, #324]	; (8000f54 <mode_handler+0x2b8>)
 8000e10:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_min_mode;
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <mode_handler+0x258>)
 8000e14:	4a50      	ldr	r2, [pc, #320]	; (8000f58 <mode_handler+0x2bc>)
 8000e16:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_min_mode;
 8000e18:	4b38      	ldr	r3, [pc, #224]	; (8000efc <mode_handler+0x260>)
 8000e1a:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <mode_handler+0x2c0>)
 8000e1c:	601a      	str	r2, [r3, #0]
			set_min_mode();
 8000e1e:	f000 ff9f 	bl	8001d60 <set_min_mode>
			break;
 8000e22:	e113      	b.n	800104c <mode_handler+0x3b0>
		case SET_SEC_MODE:
			button0_mode_ptr = &display_mode;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <mode_handler+0x248>)
 8000e26:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <mode_handler+0x270>)
 8000e28:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &save_mode;
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <mode_handler+0x250>)
 8000e2c:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <mode_handler+0x29c>)
 8000e2e:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &increase_sec_mode;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <mode_handler+0x258>)
 8000e32:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <mode_handler+0x2c4>)
 8000e34:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &decrease_sec_mode;
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <mode_handler+0x260>)
 8000e38:	4a4a      	ldr	r2, [pc, #296]	; (8000f64 <mode_handler+0x2c8>)
 8000e3a:	601a      	str	r2, [r3, #0]
			set_sec_mode();
 8000e3c:	f000 fffa 	bl	8001e34 <set_sec_mode>
			break;
 8000e40:	e104      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_MODE:
			temp_cycle = cycle;
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <mode_handler+0x2cc>)
 8000e44:	781a      	ldrb	r2, [r3, #0]
 8000e46:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <mode_handler+0x2d0>)
 8000e48:	701a      	strb	r2, [r3, #0]
			button0_mode_ptr = &display_mode;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <mode_handler+0x248>)
 8000e4c:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <mode_handler+0x270>)
 8000e4e:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_monday_mode;
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <mode_handler+0x250>)
 8000e52:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <mode_handler+0x2d4>)
 8000e54:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &display_mode;
 8000e56:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <mode_handler+0x258>)
 8000e58:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <mode_handler+0x270>)
 8000e5a:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &display_mode;
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <mode_handler+0x260>)
 8000e5e:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <mode_handler+0x270>)
 8000e60:	601a      	str	r2, [r3, #0]
			set_cycle_mode();
 8000e62:	f001 f8d5 	bl	8002010 <set_cycle_mode>
			break;
 8000e66:	e0f1      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_MONDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <mode_handler+0x248>)
 8000e6a:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <mode_handler+0x270>)
 8000e6c:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_tuesday_mode;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <mode_handler+0x250>)
 8000e70:	4a40      	ldr	r2, [pc, #256]	; (8000f74 <mode_handler+0x2d8>)
 8000e72:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <mode_handler+0x258>)
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <mode_handler+0x2dc>)
 8000e78:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <mode_handler+0x260>)
 8000e7c:	4a3e      	ldr	r2, [pc, #248]	; (8000f78 <mode_handler+0x2dc>)
 8000e7e:	601a      	str	r2, [r3, #0]
			set_cycle_monday_mode();
 8000e80:	f001 f9a6 	bl	80021d0 <set_cycle_monday_mode>
			break;
 8000e84:	e0e2      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_TUESDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <mode_handler+0x248>)
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <mode_handler+0x270>)
 8000e8a:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_wednesday_mode;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <mode_handler+0x250>)
 8000e8e:	4a3b      	ldr	r2, [pc, #236]	; (8000f7c <mode_handler+0x2e0>)
 8000e90:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <mode_handler+0x258>)
 8000e94:	4a38      	ldr	r2, [pc, #224]	; (8000f78 <mode_handler+0x2dc>)
 8000e96:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <mode_handler+0x260>)
 8000e9a:	4a37      	ldr	r2, [pc, #220]	; (8000f78 <mode_handler+0x2dc>)
 8000e9c:	601a      	str	r2, [r3, #0]
			set_cycle_tuesday_mode();
 8000e9e:	f001 fa87 	bl	80023b0 <set_cycle_tuesday_mode>
			break;
 8000ea2:	e0d3      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_WEDNESDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <mode_handler+0x248>)
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <mode_handler+0x270>)
 8000ea8:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_thurday_mode;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <mode_handler+0x250>)
 8000eac:	4a34      	ldr	r2, [pc, #208]	; (8000f80 <mode_handler+0x2e4>)
 8000eae:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <mode_handler+0x258>)
 8000eb2:	4a31      	ldr	r2, [pc, #196]	; (8000f78 <mode_handler+0x2dc>)
 8000eb4:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <mode_handler+0x260>)
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <mode_handler+0x2dc>)
 8000eba:	601a      	str	r2, [r3, #0]
			set_cycle_wednesday_mode();
 8000ebc:	f001 fb68 	bl	8002590 <set_cycle_wednesday_mode>
			break;
 8000ec0:	e0c4      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_THURDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <mode_handler+0x248>)
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <mode_handler+0x270>)
 8000ec6:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_friday_mode;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <mode_handler+0x250>)
 8000eca:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <mode_handler+0x2e8>)
 8000ecc:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <mode_handler+0x258>)
 8000ed0:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <mode_handler+0x2dc>)
 8000ed2:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <mode_handler+0x260>)
 8000ed6:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <mode_handler+0x2dc>)
 8000ed8:	601a      	str	r2, [r3, #0]
			set_cycle_thurday_mode();
 8000eda:	f001 fc49 	bl	8002770 <set_cycle_thurday_mode>
			break;
 8000ede:	e0b5      	b.n	800104c <mode_handler+0x3b0>
 8000ee0:	20000c84 	.word	0x20000c84
 8000ee4:	20000c8c 	.word	0x20000c8c
 8000ee8:	08001271 	.word	0x08001271
 8000eec:	20000c90 	.word	0x20000c90
 8000ef0:	08001b25 	.word	0x08001b25
 8000ef4:	20000c94 	.word	0x20000c94
 8000ef8:	08002011 	.word	0x08002011
 8000efc:	20000c98 	.word	0x20000c98
 8000f00:	08001bd9 	.word	0x08001bd9
 8000f04:	20000c6c 	.word	0x20000c6c
 8000f08:	20000c60 	.word	0x20000c60
 8000f0c:	08001095 	.word	0x08001095
 8000f10:	080013e1 	.word	0x080013e1
 8000f14:	08001571 	.word	0x08001571
 8000f18:	08001725 	.word	0x08001725
 8000f1c:	08001755 	.word	0x08001755
 8000f20:	080015d1 	.word	0x080015d1
 8000f24:	08001781 	.word	0x08001781
 8000f28:	080017ad 	.word	0x080017ad
 8000f2c:	08001631 	.word	0x08001631
 8000f30:	080017d9 	.word	0x080017d9
 8000f34:	08001901 	.word	0x08001901
 8000f38:	08001a81 	.word	0x08001a81
 8000f3c:	08001a29 	.word	0x08001a29
 8000f40:	08001a55 	.word	0x08001a55
 8000f44:	08001c8d 	.word	0x08001c8d
 8000f48:	08001d61 	.word	0x08001d61
 8000f4c:	08001f09 	.word	0x08001f09
 8000f50:	08001f35 	.word	0x08001f35
 8000f54:	08001e35 	.word	0x08001e35
 8000f58:	08001f61 	.word	0x08001f61
 8000f5c:	08001f8d 	.word	0x08001f8d
 8000f60:	08001fb9 	.word	0x08001fb9
 8000f64:	08001fe5 	.word	0x08001fe5
 8000f68:	20000c88 	.word	0x20000c88
 8000f6c:	20000c89 	.word	0x20000c89
 8000f70:	080021d1 	.word	0x080021d1
 8000f74:	080023b1 	.word	0x080023b1
 8000f78:	08002ef1 	.word	0x08002ef1
 8000f7c:	08002591 	.word	0x08002591
 8000f80:	08002771 	.word	0x08002771
 8000f84:	08002951 	.word	0x08002951
		case SET_CYCLE_FRIDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <mode_handler+0x3b4>)
 8000f8a:	4a32      	ldr	r2, [pc, #200]	; (8001054 <mode_handler+0x3b8>)
 8000f8c:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_saturday_mode;
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <mode_handler+0x3bc>)
 8000f90:	4a32      	ldr	r2, [pc, #200]	; (800105c <mode_handler+0x3c0>)
 8000f92:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <mode_handler+0x3c4>)
 8000f96:	4a33      	ldr	r2, [pc, #204]	; (8001064 <mode_handler+0x3c8>)
 8000f98:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <mode_handler+0x3cc>)
 8000f9c:	4a31      	ldr	r2, [pc, #196]	; (8001064 <mode_handler+0x3c8>)
 8000f9e:	601a      	str	r2, [r3, #0]
			set_cycle_friday_mode();
 8000fa0:	f001 fcd6 	bl	8002950 <set_cycle_friday_mode>
			break;
 8000fa4:	e052      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_SATURDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <mode_handler+0x3b4>)
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <mode_handler+0x3b8>)
 8000faa:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_cycle_sunday_mode;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <mode_handler+0x3bc>)
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <mode_handler+0x3d0>)
 8000fb0:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <mode_handler+0x3c4>)
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <mode_handler+0x3c8>)
 8000fb6:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <mode_handler+0x3cc>)
 8000fba:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <mode_handler+0x3c8>)
 8000fbc:	601a      	str	r2, [r3, #0]
			set_cycle_saturday_mode();
 8000fbe:	f001 fdb7 	bl	8002b30 <set_cycle_saturday_mode>
			break;
 8000fc2:	e043      	b.n	800104c <mode_handler+0x3b0>
		case SET_CYCLE_SUNDAY_MODE:
			button0_mode_ptr = &display_mode;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <mode_handler+0x3b4>)
 8000fc6:	4a23      	ldr	r2, [pc, #140]	; (8001054 <mode_handler+0x3b8>)
 8000fc8:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &save_mode;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <mode_handler+0x3bc>)
 8000fcc:	4a28      	ldr	r2, [pc, #160]	; (8001070 <mode_handler+0x3d4>)
 8000fce:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &change_cycle_mode;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <mode_handler+0x3c4>)
 8000fd2:	4a24      	ldr	r2, [pc, #144]	; (8001064 <mode_handler+0x3c8>)
 8000fd4:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &change_cycle_mode;
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <mode_handler+0x3cc>)
 8000fd8:	4a22      	ldr	r2, [pc, #136]	; (8001064 <mode_handler+0x3c8>)
 8000fda:	601a      	str	r2, [r3, #0]
			set_cycle_sunday_mode();
 8000fdc:	f001 fe98 	bl	8002d10 <set_cycle_sunday_mode>
			break;
 8000fe0:	e034      	b.n	800104c <mode_handler+0x3b0>
		case SET_ALARM_MODE:
			set_alarm = 1;
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <mode_handler+0x3d8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
			temp_time = alarm_time;
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <mode_handler+0x3dc>)
 8000fea:	4a24      	ldr	r2, [pc, #144]	; (800107c <mode_handler+0x3e0>)
 8000fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			button0_mode_ptr = &display_mode;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <mode_handler+0x3b4>)
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <mode_handler+0x3b8>)
 8000ff6:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_hour_mode;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <mode_handler+0x3bc>)
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <mode_handler+0x3e4>)
 8000ffc:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &display_mode;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <mode_handler+0x3c4>)
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <mode_handler+0x3b8>)
 8001002:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &display_mode;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <mode_handler+0x3cc>)
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <mode_handler+0x3b8>)
 8001008:	601a      	str	r2, [r3, #0]
			set_alarm_mode();
 800100a:	f000 fde5 	bl	8001bd8 <set_alarm_mode>
			break;
 800100e:	e01d      	b.n	800104c <mode_handler+0x3b0>
		case ALARM_MODE:
			button0_mode_ptr = &display_mode;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <mode_handler+0x3b4>)
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <mode_handler+0x3b8>)
 8001014:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &display_mode;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <mode_handler+0x3bc>)
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <mode_handler+0x3b8>)
 800101a:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &display_mode;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <mode_handler+0x3c4>)
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <mode_handler+0x3b8>)
 8001020:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &display_mode;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <mode_handler+0x3cc>)
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <mode_handler+0x3b8>)
 8001026:	601a      	str	r2, [r3, #0]
			alarm_mode();
 8001028:	f001 ffbc 	bl	8002fa4 <alarm_mode>
			break;
 800102c:	e00e      	b.n	800104c <mode_handler+0x3b0>
		default:
			button0_mode_ptr = &set_dmy_mode;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <mode_handler+0x3b4>)
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <mode_handler+0x3e8>)
 8001032:	601a      	str	r2, [r3, #0]
			button1_mode_ptr = &set_hms_mode;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <mode_handler+0x3bc>)
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <mode_handler+0x3ec>)
 8001038:	601a      	str	r2, [r3, #0]
			button2_mode_ptr = &set_cycle_mode;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <mode_handler+0x3c4>)
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <mode_handler+0x3f0>)
 800103e:	601a      	str	r2, [r3, #0]
			button3_mode_ptr = &set_alarm_mode;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <mode_handler+0x3cc>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <mode_handler+0x3f4>)
 8001044:	601a      	str	r2, [r3, #0]
			display_mode();
 8001046:	f000 f825 	bl	8001094 <display_mode>
			break;
 800104a:	bf00      	nop
	}
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000c8c 	.word	0x20000c8c
 8001054:	08001095 	.word	0x08001095
 8001058:	20000c90 	.word	0x20000c90
 800105c:	08002b31 	.word	0x08002b31
 8001060:	20000c94 	.word	0x20000c94
 8001064:	08002ef1 	.word	0x08002ef1
 8001068:	20000c98 	.word	0x20000c98
 800106c:	08002d11 	.word	0x08002d11
 8001070:	08001a81 	.word	0x08001a81
 8001074:	20000c87 	.word	0x20000c87
 8001078:	20000c6c 	.word	0x20000c6c
 800107c:	20000c78 	.word	0x20000c78
 8001080:	08001c8d 	.word	0x08001c8d
 8001084:	08001271 	.word	0x08001271
 8001088:	08001b25 	.word	0x08001b25
 800108c:	08002011 	.word	0x08002011
 8001090:	08001bd9 	.word	0x08001bd9

08001094 <display_mode>:
#include "mode.h"

void display_mode(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e007      	b.n	80010b0 <display_mode+0x1c>
		display_data[i] = 0xff;
 80010a0:	4a67      	ldr	r2, [pc, #412]	; (8001240 <display_mode+0x1ac>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80010b6:	dbf3      	blt.n	80010a0 <display_mode+0xc>
	}
	char temp[10];
	itoa(current_time.date, temp, 10);
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <display_mode+0x1b0>)
 80010ba:	795b      	ldrb	r3, [r3, #5]
 80010bc:	4618      	mov	r0, r3
 80010be:	463b      	mov	r3, r7
 80010c0:	220a      	movs	r2, #10
 80010c2:	4619      	mov	r1, r3
 80010c4:	f002 fef8 	bl	8003eb8 <itoa>
	LCD_get_string(1, 2, display_data, temp);
 80010c8:	463b      	mov	r3, r7
 80010ca:	4a5d      	ldr	r2, [pc, #372]	; (8001240 <display_mode+0x1ac>)
 80010cc:	2102      	movs	r1, #2
 80010ce:	2001      	movs	r0, #1
 80010d0:	f002 fbb4 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 2, display_data, ":");
 80010d4:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <display_mode+0x1b4>)
 80010d6:	4a5a      	ldr	r2, [pc, #360]	; (8001240 <display_mode+0x1ac>)
 80010d8:	2102      	movs	r1, #2
 80010da:	2003      	movs	r0, #3
 80010dc:	f002 fbae 	bl	800383c <LCD_get_string>
	itoa(current_time.mon, temp, 10);
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <display_mode+0x1b0>)
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	463b      	mov	r3, r7
 80010e8:	220a      	movs	r2, #10
 80010ea:	4619      	mov	r1, r3
 80010ec:	f002 fee4 	bl	8003eb8 <itoa>
	LCD_get_string(4, 2, display_data, temp);
 80010f0:	463b      	mov	r3, r7
 80010f2:	4a53      	ldr	r2, [pc, #332]	; (8001240 <display_mode+0x1ac>)
 80010f4:	2102      	movs	r1, #2
 80010f6:	2004      	movs	r0, #4
 80010f8:	f002 fba0 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 2, display_data, ":");
 80010fc:	4b52      	ldr	r3, [pc, #328]	; (8001248 <display_mode+0x1b4>)
 80010fe:	4a50      	ldr	r2, [pc, #320]	; (8001240 <display_mode+0x1ac>)
 8001100:	2102      	movs	r1, #2
 8001102:	2006      	movs	r0, #6
 8001104:	f002 fb9a 	bl	800383c <LCD_get_string>
	itoa(current_time.year, temp, 10);
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <display_mode+0x1b0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	463b      	mov	r3, r7
 8001110:	220a      	movs	r2, #10
 8001112:	4619      	mov	r1, r3
 8001114:	f002 fed0 	bl	8003eb8 <itoa>
	LCD_get_string(7, 2, display_data, temp);
 8001118:	463b      	mov	r3, r7
 800111a:	4a49      	ldr	r2, [pc, #292]	; (8001240 <display_mode+0x1ac>)
 800111c:	2102      	movs	r1, #2
 800111e:	2007      	movs	r0, #7
 8001120:	f002 fb8c 	bl	800383c <LCD_get_string>

	switch(current_time.day){
 8001124:	4b47      	ldr	r3, [pc, #284]	; (8001244 <display_mode+0x1b0>)
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	3b02      	subs	r3, #2
 800112a:	2b06      	cmp	r3, #6
 800112c:	d841      	bhi.n	80011b2 <display_mode+0x11e>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <display_mode+0xa0>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	08001151 	.word	0x08001151
 8001138:	0800115f 	.word	0x0800115f
 800113c:	0800116d 	.word	0x0800116d
 8001140:	0800117b 	.word	0x0800117b
 8001144:	08001189 	.word	0x08001189
 8001148:	08001197 	.word	0x08001197
 800114c:	080011a5 	.word	0x080011a5
	case MONDAY:
		LCD_get_string(2, 4, display_data, "MONDAY");
 8001150:	4b3e      	ldr	r3, [pc, #248]	; (800124c <display_mode+0x1b8>)
 8001152:	4a3b      	ldr	r2, [pc, #236]	; (8001240 <display_mode+0x1ac>)
 8001154:	2104      	movs	r1, #4
 8001156:	2002      	movs	r0, #2
 8001158:	f002 fb70 	bl	800383c <LCD_get_string>
		break;
 800115c:	e02f      	b.n	80011be <display_mode+0x12a>
	case TUESDAY:
		LCD_get_string(2, 4, display_data, "TUESDAY");
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <display_mode+0x1bc>)
 8001160:	4a37      	ldr	r2, [pc, #220]	; (8001240 <display_mode+0x1ac>)
 8001162:	2104      	movs	r1, #4
 8001164:	2002      	movs	r0, #2
 8001166:	f002 fb69 	bl	800383c <LCD_get_string>
		break;
 800116a:	e028      	b.n	80011be <display_mode+0x12a>
	case WEDNESDAY:
		LCD_get_string(2, 4, display_data, "WEDNESDAY");
 800116c:	4b39      	ldr	r3, [pc, #228]	; (8001254 <display_mode+0x1c0>)
 800116e:	4a34      	ldr	r2, [pc, #208]	; (8001240 <display_mode+0x1ac>)
 8001170:	2104      	movs	r1, #4
 8001172:	2002      	movs	r0, #2
 8001174:	f002 fb62 	bl	800383c <LCD_get_string>
		break;
 8001178:	e021      	b.n	80011be <display_mode+0x12a>
	case THURSDAY:
		LCD_get_string(2, 4, display_data, "THURSDAY");
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <display_mode+0x1c4>)
 800117c:	4a30      	ldr	r2, [pc, #192]	; (8001240 <display_mode+0x1ac>)
 800117e:	2104      	movs	r1, #4
 8001180:	2002      	movs	r0, #2
 8001182:	f002 fb5b 	bl	800383c <LCD_get_string>
		break;
 8001186:	e01a      	b.n	80011be <display_mode+0x12a>
	case FRIDAY:
		LCD_get_string(2, 4, display_data, "FRIDAY");
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <display_mode+0x1c8>)
 800118a:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <display_mode+0x1ac>)
 800118c:	2104      	movs	r1, #4
 800118e:	2002      	movs	r0, #2
 8001190:	f002 fb54 	bl	800383c <LCD_get_string>
		break;
 8001194:	e013      	b.n	80011be <display_mode+0x12a>
	case SATURDAY:
		LCD_get_string(2, 4, display_data, "SATURDAY");
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <display_mode+0x1cc>)
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <display_mode+0x1ac>)
 800119a:	2104      	movs	r1, #4
 800119c:	2002      	movs	r0, #2
 800119e:	f002 fb4d 	bl	800383c <LCD_get_string>
		break;
 80011a2:	e00c      	b.n	80011be <display_mode+0x12a>
	case SUNDAY:
		LCD_get_string(2, 4, display_data, "SUNDAY");
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <display_mode+0x1d0>)
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <display_mode+0x1ac>)
 80011a8:	2104      	movs	r1, #4
 80011aa:	2002      	movs	r0, #2
 80011ac:	f002 fb46 	bl	800383c <LCD_get_string>
		break;
 80011b0:	e005      	b.n	80011be <display_mode+0x12a>
	default:
		LCD_get_string(2, 4, display_data, "ERROR");
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <display_mode+0x1d4>)
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <display_mode+0x1ac>)
 80011b6:	2104      	movs	r1, #4
 80011b8:	2002      	movs	r0, #2
 80011ba:	f002 fb3f 	bl	800383c <LCD_get_string>
	}

	itoa(current_time.hour, temp, 10);
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <display_mode+0x1b0>)
 80011c0:	79db      	ldrb	r3, [r3, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	463b      	mov	r3, r7
 80011c6:	220a      	movs	r2, #10
 80011c8:	4619      	mov	r1, r3
 80011ca:	f002 fe75 	bl	8003eb8 <itoa>
	LCD_get_string(1, 6, display_data, temp);
 80011ce:	463b      	mov	r3, r7
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <display_mode+0x1ac>)
 80011d2:	2106      	movs	r1, #6
 80011d4:	2001      	movs	r0, #1
 80011d6:	f002 fb31 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 6, display_data, ":");
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <display_mode+0x1b4>)
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <display_mode+0x1ac>)
 80011de:	2106      	movs	r1, #6
 80011e0:	2003      	movs	r0, #3
 80011e2:	f002 fb2b 	bl	800383c <LCD_get_string>
	itoa(current_time.min, temp, 10);
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <display_mode+0x1b0>)
 80011e8:	7a1b      	ldrb	r3, [r3, #8]
 80011ea:	4618      	mov	r0, r3
 80011ec:	463b      	mov	r3, r7
 80011ee:	220a      	movs	r2, #10
 80011f0:	4619      	mov	r1, r3
 80011f2:	f002 fe61 	bl	8003eb8 <itoa>
	LCD_get_string(4, 6, display_data, temp);
 80011f6:	463b      	mov	r3, r7
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <display_mode+0x1ac>)
 80011fa:	2106      	movs	r1, #6
 80011fc:	2004      	movs	r0, #4
 80011fe:	f002 fb1d 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 6, display_data, ":");
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <display_mode+0x1b4>)
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <display_mode+0x1ac>)
 8001206:	2106      	movs	r1, #6
 8001208:	2006      	movs	r0, #6
 800120a:	f002 fb17 	bl	800383c <LCD_get_string>
	itoa(current_time.sec, temp, 10);
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <display_mode+0x1b0>)
 8001210:	7a5b      	ldrb	r3, [r3, #9]
 8001212:	4618      	mov	r0, r3
 8001214:	463b      	mov	r3, r7
 8001216:	220a      	movs	r2, #10
 8001218:	4619      	mov	r1, r3
 800121a:	f002 fe4d 	bl	8003eb8 <itoa>
	LCD_get_string(7, 6, display_data, temp);
 800121e:	463b      	mov	r3, r7
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <display_mode+0x1ac>)
 8001222:	2106      	movs	r1, #6
 8001224:	2007      	movs	r0, #7
 8001226:	f002 fb09 	bl	800383c <LCD_get_string>
	LCD_send_image(display_data);
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <display_mode+0x1ac>)
 800122c:	f002 fa6f 	bl	800370e <LCD_send_image>
	mode = DISPLAY_MODE;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <display_mode+0x1d8>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200007e0 	.word	0x200007e0
 8001244:	20000c60 	.word	0x20000c60
 8001248:	080049e4 	.word	0x080049e4
 800124c:	080049e8 	.word	0x080049e8
 8001250:	080049f0 	.word	0x080049f0
 8001254:	080049f8 	.word	0x080049f8
 8001258:	08004a04 	.word	0x08004a04
 800125c:	08004a10 	.word	0x08004a10
 8001260:	08004a18 	.word	0x08004a18
 8001264:	08004a24 	.word	0x08004a24
 8001268:	08004a2c 	.word	0x08004a2c
 800126c:	20000c84 	.word	0x20000c84

08001270 <set_dmy_mode>:

void set_dmy_mode(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e007      	b.n	800128c <set_dmy_mode+0x1c>
		display_data[i] = 0xff;
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <set_dmy_mode+0x140>)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001292:	dbf3      	blt.n	800127c <set_dmy_mode+0xc>
	}
	char temp[10];
	itoa(temp_time.date, temp, 10);
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <set_dmy_mode+0x144>)
 8001296:	795b      	ldrb	r3, [r3, #5]
 8001298:	4618      	mov	r0, r3
 800129a:	463b      	mov	r3, r7
 800129c:	220a      	movs	r2, #10
 800129e:	4619      	mov	r1, r3
 80012a0:	f002 fe0a 	bl	8003eb8 <itoa>
	LCD_get_string(1, 2, display_data, temp);
 80012a4:	463b      	mov	r3, r7
 80012a6:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <set_dmy_mode+0x140>)
 80012a8:	2102      	movs	r1, #2
 80012aa:	2001      	movs	r0, #1
 80012ac:	f002 fac6 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 2, display_data, ":");
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <set_dmy_mode+0x148>)
 80012b2:	4a3f      	ldr	r2, [pc, #252]	; (80013b0 <set_dmy_mode+0x140>)
 80012b4:	2102      	movs	r1, #2
 80012b6:	2003      	movs	r0, #3
 80012b8:	f002 fac0 	bl	800383c <LCD_get_string>
	itoa(temp_time.mon, temp, 10);
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <set_dmy_mode+0x144>)
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	463b      	mov	r3, r7
 80012c4:	220a      	movs	r2, #10
 80012c6:	4619      	mov	r1, r3
 80012c8:	f002 fdf6 	bl	8003eb8 <itoa>
	LCD_get_string(4, 2, display_data, temp);
 80012cc:	463b      	mov	r3, r7
 80012ce:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <set_dmy_mode+0x140>)
 80012d0:	2102      	movs	r1, #2
 80012d2:	2004      	movs	r0, #4
 80012d4:	f002 fab2 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 2, display_data, ":");
 80012d8:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <set_dmy_mode+0x148>)
 80012da:	4a35      	ldr	r2, [pc, #212]	; (80013b0 <set_dmy_mode+0x140>)
 80012dc:	2102      	movs	r1, #2
 80012de:	2006      	movs	r0, #6
 80012e0:	f002 faac 	bl	800383c <LCD_get_string>
	itoa(temp_time.year, temp, 10);
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <set_dmy_mode+0x144>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	463b      	mov	r3, r7
 80012ec:	220a      	movs	r2, #10
 80012ee:	4619      	mov	r1, r3
 80012f0:	f002 fde2 	bl	8003eb8 <itoa>
	LCD_get_string(7, 2, display_data, temp);
 80012f4:	463b      	mov	r3, r7
 80012f6:	4a2e      	ldr	r2, [pc, #184]	; (80013b0 <set_dmy_mode+0x140>)
 80012f8:	2102      	movs	r1, #2
 80012fa:	2007      	movs	r0, #7
 80012fc:	f002 fa9e 	bl	800383c <LCD_get_string>

	switch(temp_time.day){
 8001300:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <set_dmy_mode+0x144>)
 8001302:	799b      	ldrb	r3, [r3, #6]
 8001304:	3b02      	subs	r3, #2
 8001306:	2b06      	cmp	r3, #6
 8001308:	d841      	bhi.n	800138e <set_dmy_mode+0x11e>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <set_dmy_mode+0xa0>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	0800132d 	.word	0x0800132d
 8001314:	0800133b 	.word	0x0800133b
 8001318:	08001349 	.word	0x08001349
 800131c:	08001357 	.word	0x08001357
 8001320:	08001365 	.word	0x08001365
 8001324:	08001373 	.word	0x08001373
 8001328:	08001381 	.word	0x08001381
	case MONDAY:
		LCD_get_string(2, 4, display_data, "MONDAY");
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <set_dmy_mode+0x14c>)
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <set_dmy_mode+0x140>)
 8001330:	2104      	movs	r1, #4
 8001332:	2002      	movs	r0, #2
 8001334:	f002 fa82 	bl	800383c <LCD_get_string>
		break;
 8001338:	e02f      	b.n	800139a <set_dmy_mode+0x12a>
	case TUESDAY:
		LCD_get_string(2, 4, display_data, "TUESDAY");
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <set_dmy_mode+0x150>)
 800133c:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <set_dmy_mode+0x140>)
 800133e:	2104      	movs	r1, #4
 8001340:	2002      	movs	r0, #2
 8001342:	f002 fa7b 	bl	800383c <LCD_get_string>
		break;
 8001346:	e028      	b.n	800139a <set_dmy_mode+0x12a>
	case WEDNESDAY:
		LCD_get_string(2, 4, display_data, "WEDNESDAY");
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <set_dmy_mode+0x154>)
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <set_dmy_mode+0x140>)
 800134c:	2104      	movs	r1, #4
 800134e:	2002      	movs	r0, #2
 8001350:	f002 fa74 	bl	800383c <LCD_get_string>
		break;
 8001354:	e021      	b.n	800139a <set_dmy_mode+0x12a>
	case THURSDAY:
		LCD_get_string(2, 4, display_data, "THURSDAY");
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <set_dmy_mode+0x158>)
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <set_dmy_mode+0x140>)
 800135a:	2104      	movs	r1, #4
 800135c:	2002      	movs	r0, #2
 800135e:	f002 fa6d 	bl	800383c <LCD_get_string>
		break;
 8001362:	e01a      	b.n	800139a <set_dmy_mode+0x12a>
	case FRIDAY:
		LCD_get_string(2, 4, display_data, "FRIDAY");
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <set_dmy_mode+0x15c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <set_dmy_mode+0x140>)
 8001368:	2104      	movs	r1, #4
 800136a:	2002      	movs	r0, #2
 800136c:	f002 fa66 	bl	800383c <LCD_get_string>
		break;
 8001370:	e013      	b.n	800139a <set_dmy_mode+0x12a>
	case SATURDAY:
		LCD_get_string(2, 4, display_data, "SATURDAY");
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <set_dmy_mode+0x160>)
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <set_dmy_mode+0x140>)
 8001376:	2104      	movs	r1, #4
 8001378:	2002      	movs	r0, #2
 800137a:	f002 fa5f 	bl	800383c <LCD_get_string>
		break;
 800137e:	e00c      	b.n	800139a <set_dmy_mode+0x12a>
	case SUNDAY:
		LCD_get_string(2, 4, display_data, "SUNDAY");
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <set_dmy_mode+0x164>)
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <set_dmy_mode+0x140>)
 8001384:	2104      	movs	r1, #4
 8001386:	2002      	movs	r0, #2
 8001388:	f002 fa58 	bl	800383c <LCD_get_string>
		break;
 800138c:	e005      	b.n	800139a <set_dmy_mode+0x12a>
	default:
		LCD_get_string(2, 4, display_data, "ERROR");
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <set_dmy_mode+0x168>)
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <set_dmy_mode+0x140>)
 8001392:	2104      	movs	r1, #4
 8001394:	2002      	movs	r0, #2
 8001396:	f002 fa51 	bl	800383c <LCD_get_string>
	}
	LCD_send_image(display_data);
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <set_dmy_mode+0x140>)
 800139c:	f002 f9b7 	bl	800370e <LCD_send_image>
	mode = SET_DMY_MODE;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <set_dmy_mode+0x16c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200007e0 	.word	0x200007e0
 80013b4:	20000c6c 	.word	0x20000c6c
 80013b8:	080049e4 	.word	0x080049e4
 80013bc:	080049e8 	.word	0x080049e8
 80013c0:	080049f0 	.word	0x080049f0
 80013c4:	080049f8 	.word	0x080049f8
 80013c8:	08004a04 	.word	0x08004a04
 80013cc:	08004a10 	.word	0x08004a10
 80013d0:	08004a18 	.word	0x08004a18
 80013d4:	08004a24 	.word	0x08004a24
 80013d8:	08004a2c 	.word	0x08004a2c
 80013dc:	20000c84 	.word	0x20000c84

080013e0 <set_year_mode>:

void set_year_mode(void){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e007      	b.n	80013fc <set_year_mode+0x1c>
		display_data[i] = 0xff;
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <set_year_mode+0x158>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3301      	adds	r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001402:	dbf3      	blt.n	80013ec <set_year_mode+0xc>
	}
	char temp[10];
	itoa(temp_time.date, temp, 10);
 8001404:	4b4d      	ldr	r3, [pc, #308]	; (800153c <set_year_mode+0x15c>)
 8001406:	795b      	ldrb	r3, [r3, #5]
 8001408:	4618      	mov	r0, r3
 800140a:	463b      	mov	r3, r7
 800140c:	220a      	movs	r2, #10
 800140e:	4619      	mov	r1, r3
 8001410:	f002 fd52 	bl	8003eb8 <itoa>
	LCD_get_string(1, 2, display_data, temp);
 8001414:	463b      	mov	r3, r7
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <set_year_mode+0x158>)
 8001418:	2102      	movs	r1, #2
 800141a:	2001      	movs	r0, #1
 800141c:	f002 fa0e 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 2, display_data, ":");
 8001420:	4b47      	ldr	r3, [pc, #284]	; (8001540 <set_year_mode+0x160>)
 8001422:	4a45      	ldr	r2, [pc, #276]	; (8001538 <set_year_mode+0x158>)
 8001424:	2102      	movs	r1, #2
 8001426:	2003      	movs	r0, #3
 8001428:	f002 fa08 	bl	800383c <LCD_get_string>
	itoa(temp_time.mon, temp, 10);
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <set_year_mode+0x15c>)
 800142e:	791b      	ldrb	r3, [r3, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	463b      	mov	r3, r7
 8001434:	220a      	movs	r2, #10
 8001436:	4619      	mov	r1, r3
 8001438:	f002 fd3e 	bl	8003eb8 <itoa>
	LCD_get_string(4, 2, display_data, temp);
 800143c:	463b      	mov	r3, r7
 800143e:	4a3e      	ldr	r2, [pc, #248]	; (8001538 <set_year_mode+0x158>)
 8001440:	2102      	movs	r1, #2
 8001442:	2004      	movs	r0, #4
 8001444:	f002 f9fa 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 2, display_data, ":");
 8001448:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <set_year_mode+0x160>)
 800144a:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <set_year_mode+0x158>)
 800144c:	2102      	movs	r1, #2
 800144e:	2006      	movs	r0, #6
 8001450:	f002 f9f4 	bl	800383c <LCD_get_string>
	if(blink == 1){
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <set_year_mode+0x164>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <set_year_mode+0x8a>
		LCD_get_string(7, 2, display_data, "  ");
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <set_year_mode+0x168>)
 800145e:	4a36      	ldr	r2, [pc, #216]	; (8001538 <set_year_mode+0x158>)
 8001460:	2102      	movs	r1, #2
 8001462:	2007      	movs	r0, #7
 8001464:	f002 f9ea 	bl	800383c <LCD_get_string>
 8001468:	e00d      	b.n	8001486 <set_year_mode+0xa6>
	}
	else{
		itoa(temp_time.year, temp, 10);
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <set_year_mode+0x15c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	463b      	mov	r3, r7
 8001472:	220a      	movs	r2, #10
 8001474:	4619      	mov	r1, r3
 8001476:	f002 fd1f 	bl	8003eb8 <itoa>
		LCD_get_string(7, 2, display_data, temp);
 800147a:	463b      	mov	r3, r7
 800147c:	4a2e      	ldr	r2, [pc, #184]	; (8001538 <set_year_mode+0x158>)
 800147e:	2102      	movs	r1, #2
 8001480:	2007      	movs	r0, #7
 8001482:	f002 f9db 	bl	800383c <LCD_get_string>
	}

	switch(temp_time.day){
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <set_year_mode+0x15c>)
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	3b02      	subs	r3, #2
 800148c:	2b06      	cmp	r3, #6
 800148e:	d842      	bhi.n	8001516 <set_year_mode+0x136>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <set_year_mode+0xb8>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014b5 	.word	0x080014b5
 800149c:	080014c3 	.word	0x080014c3
 80014a0:	080014d1 	.word	0x080014d1
 80014a4:	080014df 	.word	0x080014df
 80014a8:	080014ed 	.word	0x080014ed
 80014ac:	080014fb 	.word	0x080014fb
 80014b0:	08001509 	.word	0x08001509
	case MONDAY:
		LCD_get_string(2, 4, display_data, "MONDAY");
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <set_year_mode+0x16c>)
 80014b6:	4a20      	ldr	r2, [pc, #128]	; (8001538 <set_year_mode+0x158>)
 80014b8:	2104      	movs	r1, #4
 80014ba:	2002      	movs	r0, #2
 80014bc:	f002 f9be 	bl	800383c <LCD_get_string>
		break;
 80014c0:	e02f      	b.n	8001522 <set_year_mode+0x142>
	case TUESDAY:
		LCD_get_string(2, 4, display_data, "TUESDAY");
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <set_year_mode+0x170>)
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <set_year_mode+0x158>)
 80014c6:	2104      	movs	r1, #4
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 f9b7 	bl	800383c <LCD_get_string>
		break;
 80014ce:	e028      	b.n	8001522 <set_year_mode+0x142>
	case WEDNESDAY:
		LCD_get_string(2, 4, display_data, "WEDNESDAY");
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <set_year_mode+0x174>)
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <set_year_mode+0x158>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	2002      	movs	r0, #2
 80014d8:	f002 f9b0 	bl	800383c <LCD_get_string>
		break;
 80014dc:	e021      	b.n	8001522 <set_year_mode+0x142>
	case THURSDAY:
		LCD_get_string(2, 4, display_data, "THURSDAY");
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <set_year_mode+0x178>)
 80014e0:	4a15      	ldr	r2, [pc, #84]	; (8001538 <set_year_mode+0x158>)
 80014e2:	2104      	movs	r1, #4
 80014e4:	2002      	movs	r0, #2
 80014e6:	f002 f9a9 	bl	800383c <LCD_get_string>
		break;
 80014ea:	e01a      	b.n	8001522 <set_year_mode+0x142>
	case FRIDAY:
		LCD_get_string(2, 4, display_data, "FRIDAY");
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <set_year_mode+0x17c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <set_year_mode+0x158>)
 80014f0:	2104      	movs	r1, #4
 80014f2:	2002      	movs	r0, #2
 80014f4:	f002 f9a2 	bl	800383c <LCD_get_string>
		break;
 80014f8:	e013      	b.n	8001522 <set_year_mode+0x142>
	case SATURDAY:
		LCD_get_string(2, 4, display_data, "SATURDAY");
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <set_year_mode+0x180>)
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <set_year_mode+0x158>)
 80014fe:	2104      	movs	r1, #4
 8001500:	2002      	movs	r0, #2
 8001502:	f002 f99b 	bl	800383c <LCD_get_string>
		break;
 8001506:	e00c      	b.n	8001522 <set_year_mode+0x142>
	case SUNDAY:
		LCD_get_string(2, 4, display_data, "SUNDAY");
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <set_year_mode+0x184>)
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <set_year_mode+0x158>)
 800150c:	2104      	movs	r1, #4
 800150e:	2002      	movs	r0, #2
 8001510:	f002 f994 	bl	800383c <LCD_get_string>
		break;
 8001514:	e005      	b.n	8001522 <set_year_mode+0x142>
	default:
		LCD_get_string(2, 4, display_data, "ERROR");
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <set_year_mode+0x188>)
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <set_year_mode+0x158>)
 800151a:	2104      	movs	r1, #4
 800151c:	2002      	movs	r0, #2
 800151e:	f002 f98d 	bl	800383c <LCD_get_string>
	}

	LCD_send_image(display_data);
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <set_year_mode+0x158>)
 8001524:	f002 f8f3 	bl	800370e <LCD_send_image>
	mode = SET_YEAR_MODE;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <set_year_mode+0x18c>)
 800152a:	2202      	movs	r2, #2
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200007e0 	.word	0x200007e0
 800153c:	20000c6c 	.word	0x20000c6c
 8001540:	080049e4 	.word	0x080049e4
 8001544:	20000c85 	.word	0x20000c85
 8001548:	08004a34 	.word	0x08004a34
 800154c:	080049e8 	.word	0x080049e8
 8001550:	080049f0 	.word	0x080049f0
 8001554:	080049f8 	.word	0x080049f8
 8001558:	08004a04 	.word	0x08004a04
 800155c:	08004a10 	.word	0x08004a10
 8001560:	08004a18 	.word	0x08004a18
 8001564:	08004a24 	.word	0x08004a24
 8001568:	08004a2c 	.word	0x08004a2c
 800156c:	20000c84 	.word	0x20000c84

08001570 <set_mon_mode>:

void set_mon_mode(void){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	if(blink == 1){
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <set_mon_mode+0x4c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d106      	bne.n	800158c <set_mon_mode+0x1c>
		LCD_get_string(4, 2, display_data, "  ");
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <set_mon_mode+0x50>)
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <set_mon_mode+0x54>)
 8001582:	2102      	movs	r1, #2
 8001584:	2004      	movs	r0, #4
 8001586:	f002 f959 	bl	800383c <LCD_get_string>
 800158a:	e00d      	b.n	80015a8 <set_mon_mode+0x38>
	}
	else{
		char temp[5];
		itoa(temp_time.mon, temp, 10);
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <set_mon_mode+0x58>)
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	463b      	mov	r3, r7
 8001594:	220a      	movs	r2, #10
 8001596:	4619      	mov	r1, r3
 8001598:	f002 fc8e 	bl	8003eb8 <itoa>
		LCD_get_string(4, 2, display_data, temp);
 800159c:	463b      	mov	r3, r7
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <set_mon_mode+0x54>)
 80015a0:	2102      	movs	r1, #2
 80015a2:	2004      	movs	r0, #4
 80015a4:	f002 f94a 	bl	800383c <LCD_get_string>
	}
	LCD_send_image(display_data);
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <set_mon_mode+0x54>)
 80015aa:	f002 f8b0 	bl	800370e <LCD_send_image>
	mode = SET_MON_MODE;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <set_mon_mode+0x5c>)
 80015b0:	2203      	movs	r2, #3
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000c85 	.word	0x20000c85
 80015c0:	08004a34 	.word	0x08004a34
 80015c4:	200007e0 	.word	0x200007e0
 80015c8:	20000c6c 	.word	0x20000c6c
 80015cc:	20000c84 	.word	0x20000c84

080015d0 <set_date_mode>:

void set_date_mode(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
	if(blink == 1){
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <set_date_mode+0x4c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <set_date_mode+0x1c>
		LCD_get_string(1, 2, display_data, "  ");
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <set_date_mode+0x50>)
 80015e0:	4a10      	ldr	r2, [pc, #64]	; (8001624 <set_date_mode+0x54>)
 80015e2:	2102      	movs	r1, #2
 80015e4:	2001      	movs	r0, #1
 80015e6:	f002 f929 	bl	800383c <LCD_get_string>
 80015ea:	e00d      	b.n	8001608 <set_date_mode+0x38>
	}
	else{
		char temp[10];
		itoa(current_time.date, temp, 10);
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <set_date_mode+0x58>)
 80015ee:	795b      	ldrb	r3, [r3, #5]
 80015f0:	4618      	mov	r0, r3
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	220a      	movs	r2, #10
 80015f6:	4619      	mov	r1, r3
 80015f8:	f002 fc5e 	bl	8003eb8 <itoa>
		LCD_get_string(1, 2, display_data, temp);
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <set_date_mode+0x54>)
 8001600:	2102      	movs	r1, #2
 8001602:	2001      	movs	r0, #1
 8001604:	f002 f91a 	bl	800383c <LCD_get_string>
	}
	LCD_send_image(display_data);
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <set_date_mode+0x54>)
 800160a:	f002 f880 	bl	800370e <LCD_send_image>
	mode = SET_DATE_MODE;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <set_date_mode+0x5c>)
 8001610:	2204      	movs	r2, #4
 8001612:	701a      	strb	r2, [r3, #0]
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000c85 	.word	0x20000c85
 8001620:	08004a34 	.word	0x08004a34
 8001624:	200007e0 	.word	0x200007e0
 8001628:	20000c60 	.word	0x20000c60
 800162c:	20000c84 	.word	0x20000c84

08001630 <set_day_mode>:

void set_day_mode(void){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	if(blink == 1){
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <set_day_mode+0xc0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <set_day_mode+0x1a>
		LCD_get_string(2, 4, display_data, "         ");
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <set_day_mode+0xc4>)
 800163e:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <set_day_mode+0xc8>)
 8001640:	2104      	movs	r1, #4
 8001642:	2002      	movs	r0, #2
 8001644:	f002 f8fa 	bl	800383c <LCD_get_string>
 8001648:	e04d      	b.n	80016e6 <set_day_mode+0xb6>
	}
	else{
		switch(temp_time.day){
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <set_day_mode+0xcc>)
 800164c:	799b      	ldrb	r3, [r3, #6]
 800164e:	3b02      	subs	r3, #2
 8001650:	2b06      	cmp	r3, #6
 8001652:	d842      	bhi.n	80016da <set_day_mode+0xaa>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <set_day_mode+0x2c>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	08001679 	.word	0x08001679
 8001660:	08001687 	.word	0x08001687
 8001664:	08001695 	.word	0x08001695
 8001668:	080016a3 	.word	0x080016a3
 800166c:	080016b1 	.word	0x080016b1
 8001670:	080016bf 	.word	0x080016bf
 8001674:	080016cd 	.word	0x080016cd
			case MONDAY:
				LCD_get_string(2, 4, display_data, "MONDAY");
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <set_day_mode+0xd0>)
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <set_day_mode+0xc8>)
 800167c:	2104      	movs	r1, #4
 800167e:	2002      	movs	r0, #2
 8001680:	f002 f8dc 	bl	800383c <LCD_get_string>
				break;
 8001684:	e02f      	b.n	80016e6 <set_day_mode+0xb6>
			case TUESDAY:
				LCD_get_string(2, 4, display_data, "TUESDAY");
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <set_day_mode+0xd4>)
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <set_day_mode+0xc8>)
 800168a:	2104      	movs	r1, #4
 800168c:	2002      	movs	r0, #2
 800168e:	f002 f8d5 	bl	800383c <LCD_get_string>
				break;
 8001692:	e028      	b.n	80016e6 <set_day_mode+0xb6>
			case WEDNESDAY:
				LCD_get_string(2, 4, display_data, "WEDNESDAY");
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <set_day_mode+0xd8>)
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <set_day_mode+0xc8>)
 8001698:	2104      	movs	r1, #4
 800169a:	2002      	movs	r0, #2
 800169c:	f002 f8ce 	bl	800383c <LCD_get_string>
				break;
 80016a0:	e021      	b.n	80016e6 <set_day_mode+0xb6>
			case THURSDAY:
				LCD_get_string(2, 4, display_data, "THURSDAY");
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <set_day_mode+0xdc>)
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <set_day_mode+0xc8>)
 80016a6:	2104      	movs	r1, #4
 80016a8:	2002      	movs	r0, #2
 80016aa:	f002 f8c7 	bl	800383c <LCD_get_string>
				break;
 80016ae:	e01a      	b.n	80016e6 <set_day_mode+0xb6>
			case FRIDAY:
				LCD_get_string(2, 4, display_data, "FRIDAY");
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <set_day_mode+0xe0>)
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <set_day_mode+0xc8>)
 80016b4:	2104      	movs	r1, #4
 80016b6:	2002      	movs	r0, #2
 80016b8:	f002 f8c0 	bl	800383c <LCD_get_string>
				break;
 80016bc:	e013      	b.n	80016e6 <set_day_mode+0xb6>
			case SATURDAY:
				LCD_get_string(2, 4, display_data, "SATURDAY");
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <set_day_mode+0xe4>)
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <set_day_mode+0xc8>)
 80016c2:	2104      	movs	r1, #4
 80016c4:	2002      	movs	r0, #2
 80016c6:	f002 f8b9 	bl	800383c <LCD_get_string>
				break;
 80016ca:	e00c      	b.n	80016e6 <set_day_mode+0xb6>
			case SUNDAY:
				LCD_get_string(2, 4, display_data, "SUNDAY");
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <set_day_mode+0xe8>)
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <set_day_mode+0xc8>)
 80016d0:	2104      	movs	r1, #4
 80016d2:	2002      	movs	r0, #2
 80016d4:	f002 f8b2 	bl	800383c <LCD_get_string>
				break;
 80016d8:	e005      	b.n	80016e6 <set_day_mode+0xb6>
			default:
				LCD_get_string(2, 4, display_data, "ERROR");
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <set_day_mode+0xec>)
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <set_day_mode+0xc8>)
 80016de:	2104      	movs	r1, #4
 80016e0:	2002      	movs	r0, #2
 80016e2:	f002 f8ab 	bl	800383c <LCD_get_string>
		}
	}

	mode = SET_DAY_MODE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <set_day_mode+0xf0>)
 80016e8:	2205      	movs	r2, #5
 80016ea:	701a      	strb	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000c85 	.word	0x20000c85
 80016f4:	08004a38 	.word	0x08004a38
 80016f8:	200007e0 	.word	0x200007e0
 80016fc:	20000c6c 	.word	0x20000c6c
 8001700:	080049e8 	.word	0x080049e8
 8001704:	080049f0 	.word	0x080049f0
 8001708:	080049f8 	.word	0x080049f8
 800170c:	08004a04 	.word	0x08004a04
 8001710:	08004a10 	.word	0x08004a10
 8001714:	08004a18 	.word	0x08004a18
 8001718:	08004a24 	.word	0x08004a24
 800171c:	08004a2c 	.word	0x08004a2c
 8001720:	20000c84 	.word	0x20000c84

08001724 <increase_year_mode>:

void increase_year_mode(void){
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	temp_time.year++;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <increase_year_mode+0x2c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <increase_year_mode+0x2c>)
 8001730:	6013      	str	r3, [r2, #0]
	if(temp_time.year >= 2100){
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <increase_year_mode+0x2c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f640 0233 	movw	r2, #2099	; 0x833
 800173a:	4293      	cmp	r3, r2
 800173c:	d903      	bls.n	8001746 <increase_year_mode+0x22>
		temp_time.year = 2000;
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <increase_year_mode+0x2c>)
 8001740:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001744:	601a      	str	r2, [r3, #0]
	}
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000c6c 	.word	0x20000c6c

08001754 <decrease_year_mode>:

void decrease_year_mode(void){
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	temp_time.year--;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <decrease_year_mode+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <decrease_year_mode+0x28>)
 8001760:	6013      	str	r3, [r2, #0]
	if(temp_time.year <= 2000){
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <decrease_year_mode+0x28>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800176a:	d803      	bhi.n	8001774 <decrease_year_mode+0x20>
		temp_time.year = 2099;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <decrease_year_mode+0x28>)
 800176e:	f640 0233 	movw	r2, #2099	; 0x833
 8001772:	601a      	str	r2, [r3, #0]
	}
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000c6c 	.word	0x20000c6c

08001780 <increase_mon_mode>:

void increase_mon_mode(void){
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	temp_time.mon++;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <increase_mon_mode+0x28>)
 8001786:	791b      	ldrb	r3, [r3, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <increase_mon_mode+0x28>)
 800178e:	711a      	strb	r2, [r3, #4]
	if(temp_time.mon >= 13){
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <increase_mon_mode+0x28>)
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d902      	bls.n	800179e <increase_mon_mode+0x1e>
		temp_time.mon = 1;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <increase_mon_mode+0x28>)
 800179a:	2201      	movs	r2, #1
 800179c:	711a      	strb	r2, [r3, #4]
	}
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000c6c 	.word	0x20000c6c

080017ac <decrease_mon_mode>:

void decrease_mon_mode(void){
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	temp_time.mon--;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <decrease_mon_mode+0x28>)
 80017b2:	791b      	ldrb	r3, [r3, #4]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <decrease_mon_mode+0x28>)
 80017ba:	711a      	strb	r2, [r3, #4]
	if(temp_time.mon <= 0){
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <decrease_mon_mode+0x28>)
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <decrease_mon_mode+0x1e>
		temp_time.mon = 12;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <decrease_mon_mode+0x28>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	711a      	strb	r2, [r3, #4]
	}
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000c6c 	.word	0x20000c6c

080017d8 <increase_date_mode>:

void increase_date_mode(void){
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	temp_time.date++;
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <increase_date_mode+0x124>)
 80017de:	795b      	ldrb	r3, [r3, #5]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <increase_date_mode+0x124>)
 80017e6:	715a      	strb	r2, [r3, #5]
	if( (temp_time.mon == 1) | (temp_time.mon == 3) | (temp_time.mon == 5) | (temp_time.mon == 7) | (temp_time.mon == 8) | (temp_time.mon == 10) | (temp_time.mon == 12)){
 80017e8:	4b44      	ldr	r3, [pc, #272]	; (80018fc <increase_date_mode+0x124>)
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <increase_date_mode+0x124>)
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	bf0c      	ite	eq
 80017fe:	2301      	moveq	r3, #1
 8001800:	2300      	movne	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <increase_date_mode+0x124>)
 800180c:	791b      	ldrb	r3, [r3, #4]
 800180e:	2b05      	cmp	r3, #5
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	4a38      	ldr	r2, [pc, #224]	; (80018fc <increase_date_mode+0x124>)
 800181c:	7912      	ldrb	r2, [r2, #4]
 800181e:	2a07      	cmp	r2, #7
 8001820:	bf0c      	ite	eq
 8001822:	2201      	moveq	r2, #1
 8001824:	2200      	movne	r2, #0
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	4313      	orrs	r3, r2
 800182a:	4a34      	ldr	r2, [pc, #208]	; (80018fc <increase_date_mode+0x124>)
 800182c:	7912      	ldrb	r2, [r2, #4]
 800182e:	2a08      	cmp	r2, #8
 8001830:	bf0c      	ite	eq
 8001832:	2201      	moveq	r2, #1
 8001834:	2200      	movne	r2, #0
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	4313      	orrs	r3, r2
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <increase_date_mode+0x124>)
 800183c:	7912      	ldrb	r2, [r2, #4]
 800183e:	2a0a      	cmp	r2, #10
 8001840:	bf0c      	ite	eq
 8001842:	2201      	moveq	r2, #1
 8001844:	2200      	movne	r2, #0
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	4313      	orrs	r3, r2
 800184a:	4a2c      	ldr	r2, [pc, #176]	; (80018fc <increase_date_mode+0x124>)
 800184c:	7912      	ldrb	r2, [r2, #4]
 800184e:	2a0c      	cmp	r2, #12
 8001850:	bf0c      	ite	eq
 8001852:	2201      	moveq	r2, #1
 8001854:	2200      	movne	r2, #0
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	4313      	orrs	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d049      	beq.n	80018f2 <increase_date_mode+0x11a>
		if (temp_time.date > 31){
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <increase_date_mode+0x124>)
 8001860:	795b      	ldrb	r3, [r3, #5]
 8001862:	2b1f      	cmp	r3, #31
 8001864:	d902      	bls.n	800186c <increase_date_mode+0x94>
			temp_time.date = 1;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <increase_date_mode+0x124>)
 8001868:	2201      	movs	r2, #1
 800186a:	715a      	strb	r2, [r3, #5]
		}
		if ( (temp_time.mon == 4) | (temp_time.mon == 6) | (temp_time.mon == 9) | (temp_time.mon == 11)){
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <increase_date_mode+0x124>)
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	2b04      	cmp	r3, #4
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <increase_date_mode+0x124>)
 800187c:	791b      	ldrb	r3, [r3, #4]
 800187e:	2b06      	cmp	r3, #6
 8001880:	bf0c      	ite	eq
 8001882:	2301      	moveq	r3, #1
 8001884:	2300      	movne	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <increase_date_mode+0x124>)
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	2b09      	cmp	r3, #9
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <increase_date_mode+0x124>)
 80018a0:	7912      	ldrb	r2, [r2, #4]
 80018a2:	2a0b      	cmp	r2, #11
 80018a4:	bf0c      	ite	eq
 80018a6:	2201      	moveq	r2, #1
 80018a8:	2200      	movne	r2, #0
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	4313      	orrs	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <increase_date_mode+0xe8>
			if (temp_time.date > 30){
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <increase_date_mode+0x124>)
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	2b1e      	cmp	r3, #30
 80018b8:	d902      	bls.n	80018c0 <increase_date_mode+0xe8>
				temp_time.date = 1;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <increase_date_mode+0x124>)
 80018bc:	2201      	movs	r2, #1
 80018be:	715a      	strb	r2, [r3, #5]
			}
		}
		if (temp_time.mon == 2){
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <increase_date_mode+0x124>)
 80018c2:	791b      	ldrb	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d114      	bne.n	80018f2 <increase_date_mode+0x11a>
			if (temp_time.year % 4 == 0){
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <increase_date_mode+0x124>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d107      	bne.n	80018e4 <increase_date_mode+0x10c>
				if (temp_time.date > 29){
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <increase_date_mode+0x124>)
 80018d6:	795b      	ldrb	r3, [r3, #5]
 80018d8:	2b1d      	cmp	r3, #29
 80018da:	d90a      	bls.n	80018f2 <increase_date_mode+0x11a>
					temp_time.date = 1;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <increase_date_mode+0x124>)
 80018de:	2201      	movs	r2, #1
 80018e0:	715a      	strb	r2, [r3, #5]
					temp_time.date = 1;
				}
			}
		}
	}
}
 80018e2:	e006      	b.n	80018f2 <increase_date_mode+0x11a>
				if (temp_time.date > 28){
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <increase_date_mode+0x124>)
 80018e6:	795b      	ldrb	r3, [r3, #5]
 80018e8:	2b1c      	cmp	r3, #28
 80018ea:	d902      	bls.n	80018f2 <increase_date_mode+0x11a>
					temp_time.date = 1;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <increase_date_mode+0x124>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	715a      	strb	r2, [r3, #5]
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000c6c 	.word	0x20000c6c

08001900 <decrease_date_mode>:

void decrease_date_mode(void){
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
	temp_time.date--;
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <decrease_date_mode+0x124>)
 8001906:	795b      	ldrb	r3, [r3, #5]
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <decrease_date_mode+0x124>)
 800190e:	715a      	strb	r2, [r3, #5]
	if( (temp_time.mon == 1) | (temp_time.mon == 3) | (temp_time.mon == 5) | (temp_time.mon == 7) | (temp_time.mon == 8) | (temp_time.mon == 10) | (temp_time.mon == 12)){
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <decrease_date_mode+0x124>)
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	2b01      	cmp	r3, #1
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <decrease_date_mode+0x124>)
 8001920:	791b      	ldrb	r3, [r3, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	bf0c      	ite	eq
 8001926:	2301      	moveq	r3, #1
 8001928:	2300      	movne	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4313      	orrs	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <decrease_date_mode+0x124>)
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	2b05      	cmp	r3, #5
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	4a38      	ldr	r2, [pc, #224]	; (8001a24 <decrease_date_mode+0x124>)
 8001944:	7912      	ldrb	r2, [r2, #4]
 8001946:	2a07      	cmp	r2, #7
 8001948:	bf0c      	ite	eq
 800194a:	2201      	moveq	r2, #1
 800194c:	2200      	movne	r2, #0
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4313      	orrs	r3, r2
 8001952:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <decrease_date_mode+0x124>)
 8001954:	7912      	ldrb	r2, [r2, #4]
 8001956:	2a08      	cmp	r2, #8
 8001958:	bf0c      	ite	eq
 800195a:	2201      	moveq	r2, #1
 800195c:	2200      	movne	r2, #0
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	4313      	orrs	r3, r2
 8001962:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <decrease_date_mode+0x124>)
 8001964:	7912      	ldrb	r2, [r2, #4]
 8001966:	2a0a      	cmp	r2, #10
 8001968:	bf0c      	ite	eq
 800196a:	2201      	moveq	r2, #1
 800196c:	2200      	movne	r2, #0
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4313      	orrs	r3, r2
 8001972:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <decrease_date_mode+0x124>)
 8001974:	7912      	ldrb	r2, [r2, #4]
 8001976:	2a0c      	cmp	r2, #12
 8001978:	bf0c      	ite	eq
 800197a:	2201      	moveq	r2, #1
 800197c:	2200      	movne	r2, #0
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	4313      	orrs	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d049      	beq.n	8001a1a <decrease_date_mode+0x11a>
			if (temp_time.date < 1){
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <decrease_date_mode+0x124>)
 8001988:	795b      	ldrb	r3, [r3, #5]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <decrease_date_mode+0x94>
				temp_time.date = 31;
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <decrease_date_mode+0x124>)
 8001990:	221f      	movs	r2, #31
 8001992:	715a      	strb	r2, [r3, #5]
			}
			if ( (temp_time.mon == 4) | (temp_time.mon == 6) | (temp_time.mon == 9) | (temp_time.mon == 11)){
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <decrease_date_mode+0x124>)
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	2b04      	cmp	r3, #4
 800199a:	bf0c      	ite	eq
 800199c:	2301      	moveq	r3, #1
 800199e:	2300      	movne	r3, #0
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <decrease_date_mode+0x124>)
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <decrease_date_mode+0x124>)
 80019b8:	791b      	ldrb	r3, [r3, #4]
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	bf0c      	ite	eq
 80019be:	2301      	moveq	r3, #1
 80019c0:	2300      	movne	r3, #0
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <decrease_date_mode+0x124>)
 80019c8:	7912      	ldrb	r2, [r2, #4]
 80019ca:	2a0b      	cmp	r2, #11
 80019cc:	bf0c      	ite	eq
 80019ce:	2201      	moveq	r2, #1
 80019d0:	2200      	movne	r2, #0
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	4313      	orrs	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <decrease_date_mode+0xe8>
				if (temp_time.date < 1){
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <decrease_date_mode+0x124>)
 80019dc:	795b      	ldrb	r3, [r3, #5]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <decrease_date_mode+0xe8>
					temp_time.date = 30;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <decrease_date_mode+0x124>)
 80019e4:	221e      	movs	r2, #30
 80019e6:	715a      	strb	r2, [r3, #5]
				}
			}
			if (temp_time.mon == 2){
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <decrease_date_mode+0x124>)
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d114      	bne.n	8001a1a <decrease_date_mode+0x11a>
				if (temp_time.year % 4 == 0){
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <decrease_date_mode+0x124>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <decrease_date_mode+0x10c>
					if (temp_time.date < 1){
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <decrease_date_mode+0x124>)
 80019fe:	795b      	ldrb	r3, [r3, #5]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10a      	bne.n	8001a1a <decrease_date_mode+0x11a>
						temp_time.date = 29;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <decrease_date_mode+0x124>)
 8001a06:	221d      	movs	r2, #29
 8001a08:	715a      	strb	r2, [r3, #5]
						temp_time.date = 28;
					}
				}
			}
		}
}
 8001a0a:	e006      	b.n	8001a1a <decrease_date_mode+0x11a>
					if (temp_time.date < 1){
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <decrease_date_mode+0x124>)
 8001a0e:	795b      	ldrb	r3, [r3, #5]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <decrease_date_mode+0x11a>
						temp_time.date = 28;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <decrease_date_mode+0x124>)
 8001a16:	221c      	movs	r2, #28
 8001a18:	715a      	strb	r2, [r3, #5]
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000c6c 	.word	0x20000c6c

08001a28 <increase_day_mode>:

void increase_day_mode(void){
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	temp_time.day++;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <increase_day_mode+0x28>)
 8001a2e:	799b      	ldrb	r3, [r3, #6]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <increase_day_mode+0x28>)
 8001a36:	719a      	strb	r2, [r3, #6]
	if(temp_time.day >= 9){
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <increase_day_mode+0x28>)
 8001a3a:	799b      	ldrb	r3, [r3, #6]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d902      	bls.n	8001a46 <increase_day_mode+0x1e>
		temp_time.day = 2;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <increase_day_mode+0x28>)
 8001a42:	2202      	movs	r2, #2
 8001a44:	719a      	strb	r2, [r3, #6]
	}
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000c6c 	.word	0x20000c6c

08001a54 <decrease_day_mode>:

void decrease_day_mode(void){
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
	temp_time.day--;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <decrease_day_mode+0x28>)
 8001a5a:	799b      	ldrb	r3, [r3, #6]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <decrease_day_mode+0x28>)
 8001a62:	719a      	strb	r2, [r3, #6]
	if(temp_time.day <= 1){
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <decrease_day_mode+0x28>)
 8001a66:	799b      	ldrb	r3, [r3, #6]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d802      	bhi.n	8001a72 <decrease_day_mode+0x1e>
		temp_time.day = 8;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <decrease_day_mode+0x28>)
 8001a6e:	2208      	movs	r2, #8
 8001a70:	719a      	strb	r2, [r3, #6]
	}
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000c6c 	.word	0x20000c6c

08001a80 <save_mode>:

void save_mode(void){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	switch (mode) {
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <save_mode+0x8c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b11      	cmp	r3, #17
 8001a8a:	d02e      	beq.n	8001aea <save_mode+0x6a>
 8001a8c:	2b11      	cmp	r3, #17
 8001a8e:	dc36      	bgt.n	8001afe <save_mode+0x7e>
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d002      	beq.n	8001a9a <save_mode+0x1a>
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d00b      	beq.n	8001ab0 <save_mode+0x30>
		case SET_CYCLE_SUNDAY_MODE:
			cycle = temp_cycle;
			Set_cycle(cycle);
			break;
		default:
			break;
 8001a98:	e031      	b.n	8001afe <save_mode+0x7e>
			Set_dmy(temp_time.year, temp_time.mon, temp_time.date, temp_time.day);
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <save_mode+0x90>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <save_mode+0x90>)
 8001aa0:	7919      	ldrb	r1, [r3, #4]
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <save_mode+0x90>)
 8001aa4:	795a      	ldrb	r2, [r3, #5]
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <save_mode+0x90>)
 8001aa8:	799b      	ldrb	r3, [r3, #6]
 8001aaa:	f7fe fb97 	bl	80001dc <Set_dmy>
			break;
 8001aae:	e027      	b.n	8001b00 <save_mode+0x80>
			if(set_alarm){
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <save_mode+0x94>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <save_mode+0x56>
				alarm_time = temp_time;
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <save_mode+0x98>)
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <save_mode+0x90>)
 8001abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				Set_alarm(alarm_time.hour, alarm_time.min, alarm_time.sec);
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <save_mode+0x98>)
 8001ac4:	79db      	ldrb	r3, [r3, #7]
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <save_mode+0x98>)
 8001ac8:	7a11      	ldrb	r1, [r2, #8]
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <save_mode+0x98>)
 8001acc:	7a52      	ldrb	r2, [r2, #9]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fc02 	bl	80002d8 <Set_alarm>
			break;
 8001ad4:	e014      	b.n	8001b00 <save_mode+0x80>
				Set_hms(temp_time.hour, temp_time.min, temp_time.sec);
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <save_mode+0x90>)
 8001ad8:	79db      	ldrb	r3, [r3, #7]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <save_mode+0x90>)
 8001adc:	7a11      	ldrb	r1, [r2, #8]
 8001ade:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <save_mode+0x90>)
 8001ae0:	7a52      	ldrb	r2, [r2, #9]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fb4c 	bl	8000180 <Set_hms>
			break;
 8001ae8:	e00a      	b.n	8001b00 <save_mode+0x80>
			cycle = temp_cycle;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <save_mode+0x9c>)
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <save_mode+0xa0>)
 8001af0:	701a      	strb	r2, [r3, #0]
			Set_cycle(cycle);
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <save_mode+0xa0>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fba2 	bl	8000240 <Set_cycle>
			break;
 8001afc:	e000      	b.n	8001b00 <save_mode+0x80>
			break;
 8001afe:	bf00      	nop
	}
	mode = DISPLAY_MODE;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <save_mode+0x8c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000c84 	.word	0x20000c84
 8001b10:	20000c6c 	.word	0x20000c6c
 8001b14:	20000c87 	.word	0x20000c87
 8001b18:	20000c78 	.word	0x20000c78
 8001b1c:	20000c89 	.word	0x20000c89
 8001b20:	20000c88 	.word	0x20000c88

08001b24 <set_hms_mode>:

void set_hms_mode(void){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e007      	b.n	8001b40 <set_hms_mode+0x1c>
		display_data[i] = 0xff;
 8001b30:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <set_hms_mode+0xa4>)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	22ff      	movs	r2, #255	; 0xff
 8001b38:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001b46:	dbf3      	blt.n	8001b30 <set_hms_mode+0xc>
	}
	char temp[10];
	itoa(temp_time.hour, temp, 10);
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <set_hms_mode+0xa8>)
 8001b4a:	79db      	ldrb	r3, [r3, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	463b      	mov	r3, r7
 8001b50:	220a      	movs	r2, #10
 8001b52:	4619      	mov	r1, r3
 8001b54:	f002 f9b0 	bl	8003eb8 <itoa>
	LCD_get_string(1, 6, display_data, temp);
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <set_hms_mode+0xa4>)
 8001b5c:	2106      	movs	r1, #6
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f001 fe6c 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 6, display_data, ":");
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <set_hms_mode+0xac>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <set_hms_mode+0xa4>)
 8001b68:	2106      	movs	r1, #6
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f001 fe66 	bl	800383c <LCD_get_string>
	itoa(temp_time.min, temp, 10);
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <set_hms_mode+0xa8>)
 8001b72:	7a1b      	ldrb	r3, [r3, #8]
 8001b74:	4618      	mov	r0, r3
 8001b76:	463b      	mov	r3, r7
 8001b78:	220a      	movs	r2, #10
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f002 f99c 	bl	8003eb8 <itoa>
	LCD_get_string(4, 6, display_data, temp);
 8001b80:	463b      	mov	r3, r7
 8001b82:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <set_hms_mode+0xa4>)
 8001b84:	2106      	movs	r1, #6
 8001b86:	2004      	movs	r0, #4
 8001b88:	f001 fe58 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 6, display_data, ":");
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <set_hms_mode+0xac>)
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <set_hms_mode+0xa4>)
 8001b90:	2106      	movs	r1, #6
 8001b92:	2006      	movs	r0, #6
 8001b94:	f001 fe52 	bl	800383c <LCD_get_string>
	itoa(temp_time.sec, temp, 10);
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <set_hms_mode+0xa8>)
 8001b9a:	7a5b      	ldrb	r3, [r3, #9]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f002 f988 	bl	8003eb8 <itoa>
	LCD_get_string(7, 6, display_data, temp);
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <set_hms_mode+0xa4>)
 8001bac:	2106      	movs	r1, #6
 8001bae:	2007      	movs	r0, #7
 8001bb0:	f001 fe44 	bl	800383c <LCD_get_string>
	LCD_send_image(display_data);
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <set_hms_mode+0xa4>)
 8001bb6:	f001 fdaa 	bl	800370e <LCD_send_image>
	mode = SET_HMS_MODE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <set_hms_mode+0xb0>)
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	701a      	strb	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200007e0 	.word	0x200007e0
 8001bcc:	20000c6c 	.word	0x20000c6c
 8001bd0:	080049e4 	.word	0x080049e4
 8001bd4:	20000c84 	.word	0x20000c84

08001bd8 <set_alarm_mode>:

void set_alarm_mode(void){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e007      	b.n	8001bf4 <set_alarm_mode+0x1c>
		display_data[i] = 0xff;
 8001be4:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <set_alarm_mode+0xa4>)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	22ff      	movs	r2, #255	; 0xff
 8001bec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001bfa:	dbf3      	blt.n	8001be4 <set_alarm_mode+0xc>
	}
	char temp[10];
	itoa(temp_time.hour, temp, 10);
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <set_alarm_mode+0xa8>)
 8001bfe:	79db      	ldrb	r3, [r3, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	463b      	mov	r3, r7
 8001c04:	220a      	movs	r2, #10
 8001c06:	4619      	mov	r1, r3
 8001c08:	f002 f956 	bl	8003eb8 <itoa>
	LCD_get_string(1, 6, display_data, temp);
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <set_alarm_mode+0xa4>)
 8001c10:	2106      	movs	r1, #6
 8001c12:	2001      	movs	r0, #1
 8001c14:	f001 fe12 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 6, display_data, ":");
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <set_alarm_mode+0xac>)
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <set_alarm_mode+0xa4>)
 8001c1c:	2106      	movs	r1, #6
 8001c1e:	2003      	movs	r0, #3
 8001c20:	f001 fe0c 	bl	800383c <LCD_get_string>
	itoa(temp_time.min, temp, 10);
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <set_alarm_mode+0xa8>)
 8001c26:	7a1b      	ldrb	r3, [r3, #8]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f002 f942 	bl	8003eb8 <itoa>
	LCD_get_string(4, 6, display_data, temp);
 8001c34:	463b      	mov	r3, r7
 8001c36:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <set_alarm_mode+0xa4>)
 8001c38:	2106      	movs	r1, #6
 8001c3a:	2004      	movs	r0, #4
 8001c3c:	f001 fdfe 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 6, display_data, ":");
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <set_alarm_mode+0xac>)
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <set_alarm_mode+0xa4>)
 8001c44:	2106      	movs	r1, #6
 8001c46:	2006      	movs	r0, #6
 8001c48:	f001 fdf8 	bl	800383c <LCD_get_string>
	itoa(temp_time.sec, temp, 10);
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <set_alarm_mode+0xa8>)
 8001c4e:	7a5b      	ldrb	r3, [r3, #9]
 8001c50:	4618      	mov	r0, r3
 8001c52:	463b      	mov	r3, r7
 8001c54:	220a      	movs	r2, #10
 8001c56:	4619      	mov	r1, r3
 8001c58:	f002 f92e 	bl	8003eb8 <itoa>
	LCD_get_string(7, 6, display_data, temp);
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <set_alarm_mode+0xa4>)
 8001c60:	2106      	movs	r1, #6
 8001c62:	2007      	movs	r0, #7
 8001c64:	f001 fdea 	bl	800383c <LCD_get_string>
	LCD_send_image(display_data);
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <set_alarm_mode+0xa4>)
 8001c6a:	f001 fd50 	bl	800370e <LCD_send_image>
	mode = SET_ALARM_MODE;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <set_alarm_mode+0xb0>)
 8001c70:	2212      	movs	r2, #18
 8001c72:	701a      	strb	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200007e0 	.word	0x200007e0
 8001c80:	20000c6c 	.word	0x20000c6c
 8001c84:	080049e4 	.word	0x080049e4
 8001c88:	20000c84 	.word	0x20000c84

08001c8c <set_hour_mode>:

void set_hour_mode(void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e007      	b.n	8001ca8 <set_hour_mode+0x1c>
		display_data[i] = 0xff;
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <set_hour_mode+0xbc>)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	22ff      	movs	r2, #255	; 0xff
 8001ca0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001cae:	dbf3      	blt.n	8001c98 <set_hour_mode+0xc>
	}
	char temp[10];
	if(blink == 1){
 8001cb0:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <set_hour_mode+0xc0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <set_hour_mode+0x3a>
		LCD_get_string(1, 6, display_data, "  ");
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <set_hour_mode+0xc4>)
 8001cba:	4a23      	ldr	r2, [pc, #140]	; (8001d48 <set_hour_mode+0xbc>)
 8001cbc:	2106      	movs	r1, #6
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f001 fdbc 	bl	800383c <LCD_get_string>
 8001cc4:	e00d      	b.n	8001ce2 <set_hour_mode+0x56>
	}
	else{
		itoa(temp_time.hour, temp, 10);
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <set_hour_mode+0xc8>)
 8001cc8:	79db      	ldrb	r3, [r3, #7]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	463b      	mov	r3, r7
 8001cce:	220a      	movs	r2, #10
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f002 f8f1 	bl	8003eb8 <itoa>
		LCD_get_string(1, 6, display_data, temp);
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <set_hour_mode+0xbc>)
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f001 fdad 	bl	800383c <LCD_get_string>
	}
	LCD_get_string(3, 6, display_data, ":");
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <set_hour_mode+0xcc>)
 8001ce4:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <set_hour_mode+0xbc>)
 8001ce6:	2106      	movs	r1, #6
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f001 fda7 	bl	800383c <LCD_get_string>
	itoa(temp_time.min, temp, 10);
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <set_hour_mode+0xc8>)
 8001cf0:	7a1b      	ldrb	r3, [r3, #8]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	220a      	movs	r2, #10
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f002 f8dd 	bl	8003eb8 <itoa>
	LCD_get_string(4, 6, display_data, temp);
 8001cfe:	463b      	mov	r3, r7
 8001d00:	4a11      	ldr	r2, [pc, #68]	; (8001d48 <set_hour_mode+0xbc>)
 8001d02:	2106      	movs	r1, #6
 8001d04:	2004      	movs	r0, #4
 8001d06:	f001 fd99 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 6, display_data, ":");
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <set_hour_mode+0xcc>)
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <set_hour_mode+0xbc>)
 8001d0e:	2106      	movs	r1, #6
 8001d10:	2006      	movs	r0, #6
 8001d12:	f001 fd93 	bl	800383c <LCD_get_string>
	itoa(temp_time.sec, temp, 10);
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <set_hour_mode+0xc8>)
 8001d18:	7a5b      	ldrb	r3, [r3, #9]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	220a      	movs	r2, #10
 8001d20:	4619      	mov	r1, r3
 8001d22:	f002 f8c9 	bl	8003eb8 <itoa>
	LCD_get_string(7, 6, display_data, temp);
 8001d26:	463b      	mov	r3, r7
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <set_hour_mode+0xbc>)
 8001d2a:	2106      	movs	r1, #6
 8001d2c:	2007      	movs	r0, #7
 8001d2e:	f001 fd85 	bl	800383c <LCD_get_string>
	LCD_send_image(display_data);
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <set_hour_mode+0xbc>)
 8001d34:	f001 fceb 	bl	800370e <LCD_send_image>
	mode = SET_HOUR_MODE;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <set_hour_mode+0xd0>)
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200007e0 	.word	0x200007e0
 8001d4c:	20000c85 	.word	0x20000c85
 8001d50:	08004a34 	.word	0x08004a34
 8001d54:	20000c6c 	.word	0x20000c6c
 8001d58:	080049e4 	.word	0x080049e4
 8001d5c:	20000c84 	.word	0x20000c84

08001d60 <set_min_mode>:

void set_min_mode(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e007      	b.n	8001d7c <set_min_mode+0x1c>
		display_data[i] = 0xff;
 8001d6c:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <set_min_mode+0xbc>)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	22ff      	movs	r2, #255	; 0xff
 8001d74:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001d82:	dbf3      	blt.n	8001d6c <set_min_mode+0xc>
	}
	char temp[10];

	itoa(temp_time.hour, temp, 10);
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <set_min_mode+0xc0>)
 8001d86:	79db      	ldrb	r3, [r3, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	220a      	movs	r2, #10
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f002 f892 	bl	8003eb8 <itoa>
	LCD_get_string(1, 6, display_data, temp);
 8001d94:	463b      	mov	r3, r7
 8001d96:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <set_min_mode+0xbc>)
 8001d98:	2106      	movs	r1, #6
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f001 fd4e 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 6, display_data, ":");
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <set_min_mode+0xc4>)
 8001da2:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <set_min_mode+0xbc>)
 8001da4:	2106      	movs	r1, #6
 8001da6:	2003      	movs	r0, #3
 8001da8:	f001 fd48 	bl	800383c <LCD_get_string>

	if(blink == 1){
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <set_min_mode+0xc8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <set_min_mode+0x62>
		LCD_get_string(1, 6, display_data, "  ");
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <set_min_mode+0xcc>)
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <set_min_mode+0xbc>)
 8001db8:	2106      	movs	r1, #6
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f001 fd3e 	bl	800383c <LCD_get_string>
 8001dc0:	e00d      	b.n	8001dde <set_min_mode+0x7e>
	}
	else{
		itoa(temp_time.min, temp, 10);
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <set_min_mode+0xc0>)
 8001dc4:	7a1b      	ldrb	r3, [r3, #8]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	463b      	mov	r3, r7
 8001dca:	220a      	movs	r2, #10
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f002 f873 	bl	8003eb8 <itoa>
		LCD_get_string(4, 6, display_data, temp);
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <set_min_mode+0xbc>)
 8001dd6:	2106      	movs	r1, #6
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f001 fd2f 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(6, 6, display_data, ":");
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <set_min_mode+0xc4>)
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <set_min_mode+0xbc>)
 8001de2:	2106      	movs	r1, #6
 8001de4:	2006      	movs	r0, #6
 8001de6:	f001 fd29 	bl	800383c <LCD_get_string>
	itoa(temp_time.sec, temp, 10);
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <set_min_mode+0xc0>)
 8001dec:	7a5b      	ldrb	r3, [r3, #9]
 8001dee:	4618      	mov	r0, r3
 8001df0:	463b      	mov	r3, r7
 8001df2:	220a      	movs	r2, #10
 8001df4:	4619      	mov	r1, r3
 8001df6:	f002 f85f 	bl	8003eb8 <itoa>
	LCD_get_string(7, 6, display_data, temp);
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <set_min_mode+0xbc>)
 8001dfe:	2106      	movs	r1, #6
 8001e00:	2007      	movs	r0, #7
 8001e02:	f001 fd1b 	bl	800383c <LCD_get_string>
	LCD_send_image(display_data);
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <set_min_mode+0xbc>)
 8001e08:	f001 fc81 	bl	800370e <LCD_send_image>
	mode = SET_MIN_MODE;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <set_min_mode+0xd0>)
 8001e0e:	2208      	movs	r2, #8
 8001e10:	701a      	strb	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200007e0 	.word	0x200007e0
 8001e20:	20000c6c 	.word	0x20000c6c
 8001e24:	080049e4 	.word	0x080049e4
 8001e28:	20000c85 	.word	0x20000c85
 8001e2c:	08004a34 	.word	0x08004a34
 8001e30:	20000c84 	.word	0x20000c84

08001e34 <set_sec_mode>:

void set_sec_mode(void){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e007      	b.n	8001e50 <set_sec_mode+0x1c>
		display_data[i] = 0xff;
 8001e40:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <set_sec_mode+0xbc>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	22ff      	movs	r2, #255	; 0xff
 8001e48:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001e56:	dbf3      	blt.n	8001e40 <set_sec_mode+0xc>
	}
	char temp[10];

	itoa(temp_time.hour, temp, 10);
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <set_sec_mode+0xc0>)
 8001e5a:	79db      	ldrb	r3, [r3, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	463b      	mov	r3, r7
 8001e60:	220a      	movs	r2, #10
 8001e62:	4619      	mov	r1, r3
 8001e64:	f002 f828 	bl	8003eb8 <itoa>
	LCD_get_string(1, 6, display_data, temp);
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <set_sec_mode+0xbc>)
 8001e6c:	2106      	movs	r1, #6
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f001 fce4 	bl	800383c <LCD_get_string>
	LCD_get_string(3, 6, display_data, ":");
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <set_sec_mode+0xc4>)
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <set_sec_mode+0xbc>)
 8001e78:	2106      	movs	r1, #6
 8001e7a:	2003      	movs	r0, #3
 8001e7c:	f001 fcde 	bl	800383c <LCD_get_string>
	itoa(temp_time.min, temp, 10);
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <set_sec_mode+0xc0>)
 8001e82:	7a1b      	ldrb	r3, [r3, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	463b      	mov	r3, r7
 8001e88:	220a      	movs	r2, #10
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f002 f814 	bl	8003eb8 <itoa>
	LCD_get_string(4, 6, display_data, temp);
 8001e90:	463b      	mov	r3, r7
 8001e92:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <set_sec_mode+0xbc>)
 8001e94:	2106      	movs	r1, #6
 8001e96:	2004      	movs	r0, #4
 8001e98:	f001 fcd0 	bl	800383c <LCD_get_string>
	LCD_get_string(6, 6, display_data, ":");
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <set_sec_mode+0xc4>)
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <set_sec_mode+0xbc>)
 8001ea0:	2106      	movs	r1, #6
 8001ea2:	2006      	movs	r0, #6
 8001ea4:	f001 fcca 	bl	800383c <LCD_get_string>

	if(blink == 1){
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <set_sec_mode+0xc8>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d106      	bne.n	8001ebe <set_sec_mode+0x8a>
		LCD_get_string(1, 6, display_data, "  ");
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <set_sec_mode+0xcc>)
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <set_sec_mode+0xbc>)
 8001eb4:	2106      	movs	r1, #6
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f001 fcc0 	bl	800383c <LCD_get_string>
 8001ebc:	e00d      	b.n	8001eda <set_sec_mode+0xa6>
	}
	else{
		itoa(temp_time.sec, temp, 10);
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <set_sec_mode+0xc0>)
 8001ec0:	7a5b      	ldrb	r3, [r3, #9]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	220a      	movs	r2, #10
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f001 fff5 	bl	8003eb8 <itoa>
		LCD_get_string(7, 6, display_data, temp);
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <set_sec_mode+0xbc>)
 8001ed2:	2106      	movs	r1, #6
 8001ed4:	2007      	movs	r0, #7
 8001ed6:	f001 fcb1 	bl	800383c <LCD_get_string>
	}

	LCD_send_image(display_data);
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <set_sec_mode+0xbc>)
 8001edc:	f001 fc17 	bl	800370e <LCD_send_image>
	mode = SET_SEC_MODE;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <set_sec_mode+0xd0>)
 8001ee2:	2209      	movs	r2, #9
 8001ee4:	701a      	strb	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200007e0 	.word	0x200007e0
 8001ef4:	20000c6c 	.word	0x20000c6c
 8001ef8:	080049e4 	.word	0x080049e4
 8001efc:	20000c85 	.word	0x20000c85
 8001f00:	08004a34 	.word	0x08004a34
 8001f04:	20000c84 	.word	0x20000c84

08001f08 <increase_hour_mode>:

void increase_hour_mode(void){
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
	temp_time.hour++;
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <increase_hour_mode+0x28>)
 8001f0e:	79db      	ldrb	r3, [r3, #7]
 8001f10:	3301      	adds	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <increase_hour_mode+0x28>)
 8001f16:	71da      	strb	r2, [r3, #7]
	if(temp_time.hour >= 24){
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <increase_hour_mode+0x28>)
 8001f1a:	79db      	ldrb	r3, [r3, #7]
 8001f1c:	2b17      	cmp	r3, #23
 8001f1e:	d902      	bls.n	8001f26 <increase_hour_mode+0x1e>
		temp_time.hour = 0;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <increase_hour_mode+0x28>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	71da      	strb	r2, [r3, #7]
	}
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000c6c 	.word	0x20000c6c

08001f34 <decrease_hour_mode>:

void decrease_hour_mode(void){
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	temp_time.hour--;
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <decrease_hour_mode+0x28>)
 8001f3a:	79db      	ldrb	r3, [r3, #7]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <decrease_hour_mode+0x28>)
 8001f42:	71da      	strb	r2, [r3, #7]
	if(temp_time.hour >=24){
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <decrease_hour_mode+0x28>)
 8001f46:	79db      	ldrb	r3, [r3, #7]
 8001f48:	2b17      	cmp	r3, #23
 8001f4a:	d902      	bls.n	8001f52 <decrease_hour_mode+0x1e>
		temp_time.hour = 23;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <decrease_hour_mode+0x28>)
 8001f4e:	2217      	movs	r2, #23
 8001f50:	71da      	strb	r2, [r3, #7]
	}
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000c6c 	.word	0x20000c6c

08001f60 <increase_min_mode>:

void increase_min_mode(void){
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	temp_time.min++;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <increase_min_mode+0x28>)
 8001f66:	7a1b      	ldrb	r3, [r3, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <increase_min_mode+0x28>)
 8001f6e:	721a      	strb	r2, [r3, #8]
	if(temp_time.min >= 60){
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <increase_min_mode+0x28>)
 8001f72:	7a1b      	ldrb	r3, [r3, #8]
 8001f74:	2b3b      	cmp	r3, #59	; 0x3b
 8001f76:	d902      	bls.n	8001f7e <increase_min_mode+0x1e>
		temp_time.min = 0;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <increase_min_mode+0x28>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	721a      	strb	r2, [r3, #8]
	}
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000c6c 	.word	0x20000c6c

08001f8c <decrease_min_mode>:

void decrease_min_mode(void){
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
	temp_time.min--;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <decrease_min_mode+0x28>)
 8001f92:	7a1b      	ldrb	r3, [r3, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <decrease_min_mode+0x28>)
 8001f9a:	721a      	strb	r2, [r3, #8]
	if(temp_time.min >= 60){
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <decrease_min_mode+0x28>)
 8001f9e:	7a1b      	ldrb	r3, [r3, #8]
 8001fa0:	2b3b      	cmp	r3, #59	; 0x3b
 8001fa2:	d902      	bls.n	8001faa <decrease_min_mode+0x1e>
		temp_time.min = 59;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <decrease_min_mode+0x28>)
 8001fa6:	223b      	movs	r2, #59	; 0x3b
 8001fa8:	721a      	strb	r2, [r3, #8]
	}
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000c6c 	.word	0x20000c6c

08001fb8 <increase_sec_mode>:

void increase_sec_mode(void){
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
	temp_time.sec++;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <increase_sec_mode+0x28>)
 8001fbe:	7a5b      	ldrb	r3, [r3, #9]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <increase_sec_mode+0x28>)
 8001fc6:	725a      	strb	r2, [r3, #9]
	if(temp_time.sec >= 60){
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <increase_sec_mode+0x28>)
 8001fca:	7a5b      	ldrb	r3, [r3, #9]
 8001fcc:	2b3b      	cmp	r3, #59	; 0x3b
 8001fce:	d902      	bls.n	8001fd6 <increase_sec_mode+0x1e>
		temp_time.sec = 0;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <increase_sec_mode+0x28>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	725a      	strb	r2, [r3, #9]
	}
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000c6c 	.word	0x20000c6c

08001fe4 <decrease_sec_mode>:

void decrease_sec_mode(void){
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	temp_time.sec--;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <decrease_sec_mode+0x28>)
 8001fea:	7a5b      	ldrb	r3, [r3, #9]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <decrease_sec_mode+0x28>)
 8001ff2:	725a      	strb	r2, [r3, #9]
	if(temp_time.sec >= 60){
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <decrease_sec_mode+0x28>)
 8001ff6:	7a5b      	ldrb	r3, [r3, #9]
 8001ff8:	2b3b      	cmp	r3, #59	; 0x3b
 8001ffa:	d902      	bls.n	8002002 <decrease_sec_mode+0x1e>
		temp_time.sec = 59;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <decrease_sec_mode+0x28>)
 8001ffe:	223b      	movs	r2, #59	; 0x3b
 8002000:	725a      	strb	r2, [r3, #9]
	}
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000c6c 	.word	0x20000c6c

08002010 <set_cycle_mode>:

void set_cycle_mode(void){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	e007      	b.n	800202c <set_cycle_mode+0x1c>
		display_data[i] = 0xff;
 800201c:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <set_cycle_mode+0x190>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	22ff      	movs	r2, #255	; 0xff
 8002024:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3301      	adds	r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002032:	dbf3      	blt.n	800201c <set_cycle_mode+0xc>
	}
	LCD_get_string(1, 4, display_data, "MON");
 8002034:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <set_cycle_mode+0x194>)
 8002036:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <set_cycle_mode+0x190>)
 8002038:	2104      	movs	r1, #4
 800203a:	2001      	movs	r0, #1
 800203c:	f001 fbfe 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 6, display_data, "TUE");
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <set_cycle_mode+0x198>)
 8002042:	4a57      	ldr	r2, [pc, #348]	; (80021a0 <set_cycle_mode+0x190>)
 8002044:	2106      	movs	r1, #6
 8002046:	2001      	movs	r0, #1
 8002048:	f001 fbf8 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <set_cycle_mode+0x19c>)
 800204e:	4a54      	ldr	r2, [pc, #336]	; (80021a0 <set_cycle_mode+0x190>)
 8002050:	2108      	movs	r1, #8
 8002052:	2001      	movs	r0, #1
 8002054:	f001 fbf2 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 8002058:	4b55      	ldr	r3, [pc, #340]	; (80021b0 <set_cycle_mode+0x1a0>)
 800205a:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <set_cycle_mode+0x190>)
 800205c:	210a      	movs	r1, #10
 800205e:	2001      	movs	r0, #1
 8002060:	f001 fbec 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <set_cycle_mode+0x1a4>)
 8002066:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <set_cycle_mode+0x190>)
 8002068:	2104      	movs	r1, #4
 800206a:	2007      	movs	r0, #7
 800206c:	f001 fbe6 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 8002070:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <set_cycle_mode+0x1a8>)
 8002072:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <set_cycle_mode+0x190>)
 8002074:	2106      	movs	r1, #6
 8002076:	2007      	movs	r0, #7
 8002078:	f001 fbe0 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <set_cycle_mode+0x1ac>)
 800207e:	4a48      	ldr	r2, [pc, #288]	; (80021a0 <set_cycle_mode+0x190>)
 8002080:	2108      	movs	r1, #8
 8002082:	2007      	movs	r0, #7
 8002084:	f001 fbda 	bl	800383c <LCD_get_string>


	if(temp_cycle & (1 << 0)){
 8002088:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <set_cycle_mode+0x1b0>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <set_cycle_mode+0x92>
		LCD_get_string(5, 4, display_data, "X");
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <set_cycle_mode+0x1b4>)
 8002096:	4a42      	ldr	r2, [pc, #264]	; (80021a0 <set_cycle_mode+0x190>)
 8002098:	2104      	movs	r1, #4
 800209a:	2005      	movs	r0, #5
 800209c:	f001 fbce 	bl	800383c <LCD_get_string>
 80020a0:	e005      	b.n	80020ae <set_cycle_mode+0x9e>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <set_cycle_mode+0x1b8>)
 80020a4:	4a3e      	ldr	r2, [pc, #248]	; (80021a0 <set_cycle_mode+0x190>)
 80020a6:	2104      	movs	r1, #4
 80020a8:	2005      	movs	r0, #5
 80020aa:	f001 fbc7 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <set_cycle_mode+0x1b0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <set_cycle_mode+0xb8>
		LCD_get_string(5, 6, display_data, "X");
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <set_cycle_mode+0x1b4>)
 80020bc:	4a38      	ldr	r2, [pc, #224]	; (80021a0 <set_cycle_mode+0x190>)
 80020be:	2106      	movs	r1, #6
 80020c0:	2005      	movs	r0, #5
 80020c2:	f001 fbbb 	bl	800383c <LCD_get_string>
 80020c6:	e005      	b.n	80020d4 <set_cycle_mode+0xc4>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <set_cycle_mode+0x1b8>)
 80020ca:	4a35      	ldr	r2, [pc, #212]	; (80021a0 <set_cycle_mode+0x190>)
 80020cc:	2106      	movs	r1, #6
 80020ce:	2005      	movs	r0, #5
 80020d0:	f001 fbb4 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 80020d4:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <set_cycle_mode+0x1b0>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <set_cycle_mode+0xde>
		LCD_get_string(5, 8, display_data, "X");
 80020e0:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <set_cycle_mode+0x1b4>)
 80020e2:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <set_cycle_mode+0x190>)
 80020e4:	2108      	movs	r1, #8
 80020e6:	2005      	movs	r0, #5
 80020e8:	f001 fba8 	bl	800383c <LCD_get_string>
 80020ec:	e005      	b.n	80020fa <set_cycle_mode+0xea>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <set_cycle_mode+0x1b8>)
 80020f0:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <set_cycle_mode+0x190>)
 80020f2:	2108      	movs	r1, #8
 80020f4:	2005      	movs	r0, #5
 80020f6:	f001 fba1 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <set_cycle_mode+0x1b0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <set_cycle_mode+0x104>
		LCD_get_string(5, 10, display_data, "X");
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <set_cycle_mode+0x1b4>)
 8002108:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <set_cycle_mode+0x190>)
 800210a:	210a      	movs	r1, #10
 800210c:	2005      	movs	r0, #5
 800210e:	f001 fb95 	bl	800383c <LCD_get_string>
 8002112:	e005      	b.n	8002120 <set_cycle_mode+0x110>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 8002114:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <set_cycle_mode+0x1b8>)
 8002116:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <set_cycle_mode+0x190>)
 8002118:	210a      	movs	r1, #10
 800211a:	2005      	movs	r0, #5
 800211c:	f001 fb8e 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <set_cycle_mode+0x1b0>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <set_cycle_mode+0x12a>
		LCD_get_string(11, 4, display_data, "X");
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <set_cycle_mode+0x1b4>)
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <set_cycle_mode+0x190>)
 8002130:	2104      	movs	r1, #4
 8002132:	200b      	movs	r0, #11
 8002134:	f001 fb82 	bl	800383c <LCD_get_string>
 8002138:	e005      	b.n	8002146 <set_cycle_mode+0x136>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <set_cycle_mode+0x1b8>)
 800213c:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <set_cycle_mode+0x190>)
 800213e:	2104      	movs	r1, #4
 8002140:	200b      	movs	r0, #11
 8002142:	f001 fb7b 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <set_cycle_mode+0x1b0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <set_cycle_mode+0x150>
		LCD_get_string(11, 6, display_data, "X");
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <set_cycle_mode+0x1b4>)
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <set_cycle_mode+0x190>)
 8002156:	2106      	movs	r1, #6
 8002158:	200b      	movs	r0, #11
 800215a:	f001 fb6f 	bl	800383c <LCD_get_string>
 800215e:	e005      	b.n	800216c <set_cycle_mode+0x15c>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <set_cycle_mode+0x1b8>)
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <set_cycle_mode+0x190>)
 8002164:	2106      	movs	r1, #6
 8002166:	200b      	movs	r0, #11
 8002168:	f001 fb68 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <set_cycle_mode+0x1b0>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <set_cycle_mode+0x176>
		LCD_get_string(11, 8, display_data, "X");
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <set_cycle_mode+0x1b4>)
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <set_cycle_mode+0x190>)
 800217c:	2108      	movs	r1, #8
 800217e:	200b      	movs	r0, #11
 8002180:	f001 fb5c 	bl	800383c <LCD_get_string>
 8002184:	e005      	b.n	8002192 <set_cycle_mode+0x182>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <set_cycle_mode+0x1b8>)
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <set_cycle_mode+0x190>)
 800218a:	2108      	movs	r1, #8
 800218c:	200b      	movs	r0, #11
 800218e:	f001 fb55 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_MODE;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <set_cycle_mode+0x1bc>)
 8002194:	220a      	movs	r2, #10
 8002196:	701a      	strb	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200007e0 	.word	0x200007e0
 80021a4:	08004a44 	.word	0x08004a44
 80021a8:	08004a48 	.word	0x08004a48
 80021ac:	08004a4c 	.word	0x08004a4c
 80021b0:	08004a50 	.word	0x08004a50
 80021b4:	08004a54 	.word	0x08004a54
 80021b8:	08004a58 	.word	0x08004a58
 80021bc:	08004a5c 	.word	0x08004a5c
 80021c0:	20000c89 	.word	0x20000c89
 80021c4:	08004a60 	.word	0x08004a60
 80021c8:	08004a64 	.word	0x08004a64
 80021cc:	20000c84 	.word	0x20000c84

080021d0 <set_cycle_monday_mode>:

void set_cycle_monday_mode(void){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	e007      	b.n	80021ec <set_cycle_monday_mode+0x1c>
			display_data[i] = 0xff;
 80021dc:	4a66      	ldr	r2, [pc, #408]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3301      	adds	r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80021f2:	dbf3      	blt.n	80021dc <set_cycle_monday_mode+0xc>
		}

	if(blink == 1){
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <set_cycle_monday_mode+0x1ac>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <set_cycle_monday_mode+0x3a>
		LCD_get_string(1, 4, display_data, "MON");
 80021fc:	4b60      	ldr	r3, [pc, #384]	; (8002380 <set_cycle_monday_mode+0x1b0>)
 80021fe:	4a5e      	ldr	r2, [pc, #376]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002200:	2104      	movs	r1, #4
 8002202:	2001      	movs	r0, #1
 8002204:	f001 fb1a 	bl	800383c <LCD_get_string>
 8002208:	e005      	b.n	8002216 <set_cycle_monday_mode+0x46>
	}
	else{
		LCD_get_string(1, 4, display_data, "   ");
 800220a:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <set_cycle_monday_mode+0x1b4>)
 800220c:	4a5a      	ldr	r2, [pc, #360]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800220e:	2104      	movs	r1, #4
 8002210:	2001      	movs	r0, #1
 8002212:	f001 fb13 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 6, display_data, "TUE");
 8002216:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <set_cycle_monday_mode+0x1b8>)
 8002218:	4a57      	ldr	r2, [pc, #348]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800221a:	2106      	movs	r1, #6
 800221c:	2001      	movs	r0, #1
 800221e:	f001 fb0d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 8002222:	4b5a      	ldr	r3, [pc, #360]	; (800238c <set_cycle_monday_mode+0x1bc>)
 8002224:	4a54      	ldr	r2, [pc, #336]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002226:	2108      	movs	r1, #8
 8002228:	2001      	movs	r0, #1
 800222a:	f001 fb07 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 800222e:	4b58      	ldr	r3, [pc, #352]	; (8002390 <set_cycle_monday_mode+0x1c0>)
 8002230:	4a51      	ldr	r2, [pc, #324]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002232:	210a      	movs	r1, #10
 8002234:	2001      	movs	r0, #1
 8002236:	f001 fb01 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <set_cycle_monday_mode+0x1c4>)
 800223c:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800223e:	2104      	movs	r1, #4
 8002240:	2007      	movs	r0, #7
 8002242:	f001 fafb 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 8002246:	4b54      	ldr	r3, [pc, #336]	; (8002398 <set_cycle_monday_mode+0x1c8>)
 8002248:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800224a:	2106      	movs	r1, #6
 800224c:	2007      	movs	r0, #7
 800224e:	f001 faf5 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 8002252:	4b52      	ldr	r3, [pc, #328]	; (800239c <set_cycle_monday_mode+0x1cc>)
 8002254:	4a48      	ldr	r2, [pc, #288]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002256:	2108      	movs	r1, #8
 8002258:	2007      	movs	r0, #7
 800225a:	f001 faef 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 800225e:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <set_cycle_monday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 800226a:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 800226c:	4a42      	ldr	r2, [pc, #264]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800226e:	2104      	movs	r1, #4
 8002270:	2005      	movs	r0, #5
 8002272:	f001 fae3 	bl	800383c <LCD_get_string>
 8002276:	e005      	b.n	8002284 <set_cycle_monday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 800227a:	4a3f      	ldr	r2, [pc, #252]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800227c:	2104      	movs	r1, #4
 800227e:	2005      	movs	r0, #5
 8002280:	f001 fadc 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <set_cycle_monday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002290:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 8002292:	4a39      	ldr	r2, [pc, #228]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002294:	2106      	movs	r1, #6
 8002296:	2005      	movs	r0, #5
 8002298:	f001 fad0 	bl	800383c <LCD_get_string>
 800229c:	e005      	b.n	80022aa <set_cycle_monday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 800229e:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 80022a0:	4a35      	ldr	r2, [pc, #212]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 80022a2:	2106      	movs	r1, #6
 80022a4:	2005      	movs	r0, #5
 80022a6:	f001 fac9 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <set_cycle_monday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 80022b8:	4a2f      	ldr	r2, [pc, #188]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 80022ba:	2108      	movs	r1, #8
 80022bc:	2005      	movs	r0, #5
 80022be:	f001 fabd 	bl	800383c <LCD_get_string>
 80022c2:	e005      	b.n	80022d0 <set_cycle_monday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 80022c6:	4a2c      	ldr	r2, [pc, #176]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 80022c8:	2108      	movs	r1, #8
 80022ca:	2005      	movs	r0, #5
 80022cc:	f001 fab6 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 80022d0:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <set_cycle_monday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 80022de:	4a26      	ldr	r2, [pc, #152]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 80022e0:	210a      	movs	r1, #10
 80022e2:	2005      	movs	r0, #5
 80022e4:	f001 faaa 	bl	800383c <LCD_get_string>
 80022e8:	e005      	b.n	80022f6 <set_cycle_monday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 80022ec:	4a22      	ldr	r2, [pc, #136]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 80022ee:	210a      	movs	r1, #10
 80022f0:	2005      	movs	r0, #5
 80022f2:	f001 faa3 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <set_cycle_monday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002306:	2104      	movs	r1, #4
 8002308:	200b      	movs	r0, #11
 800230a:	f001 fa97 	bl	800383c <LCD_get_string>
 800230e:	e005      	b.n	800231c <set_cycle_monday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 8002312:	4a19      	ldr	r2, [pc, #100]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002314:	2104      	movs	r1, #4
 8002316:	200b      	movs	r0, #11
 8002318:	f001 fa90 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 800231c:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <set_cycle_monday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800232c:	2106      	movs	r1, #6
 800232e:	200b      	movs	r0, #11
 8002330:	f001 fa84 	bl	800383c <LCD_get_string>
 8002334:	e005      	b.n	8002342 <set_cycle_monday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 8002336:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 8002338:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 800233a:	2106      	movs	r1, #6
 800233c:	200b      	movs	r0, #11
 800233e:	f001 fa7d 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <set_cycle_monday_mode+0x1d0>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <set_cycle_monday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <set_cycle_monday_mode+0x1d4>)
 8002350:	4a09      	ldr	r2, [pc, #36]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002352:	2108      	movs	r1, #8
 8002354:	200b      	movs	r0, #11
 8002356:	f001 fa71 	bl	800383c <LCD_get_string>
 800235a:	e005      	b.n	8002368 <set_cycle_monday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <set_cycle_monday_mode+0x1d8>)
 800235e:	4a06      	ldr	r2, [pc, #24]	; (8002378 <set_cycle_monday_mode+0x1a8>)
 8002360:	2108      	movs	r1, #8
 8002362:	200b      	movs	r0, #11
 8002364:	f001 fa6a 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_MONDAY_MODE;
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <set_cycle_monday_mode+0x1dc>)
 800236a:	220b      	movs	r2, #11
 800236c:	701a      	strb	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200007e0 	.word	0x200007e0
 800237c:	20000c85 	.word	0x20000c85
 8002380:	08004a44 	.word	0x08004a44
 8002384:	08004a68 	.word	0x08004a68
 8002388:	08004a48 	.word	0x08004a48
 800238c:	08004a4c 	.word	0x08004a4c
 8002390:	08004a50 	.word	0x08004a50
 8002394:	08004a54 	.word	0x08004a54
 8002398:	08004a58 	.word	0x08004a58
 800239c:	08004a5c 	.word	0x08004a5c
 80023a0:	20000c89 	.word	0x20000c89
 80023a4:	08004a60 	.word	0x08004a60
 80023a8:	08004a64 	.word	0x08004a64
 80023ac:	20000c84 	.word	0x20000c84

080023b0 <set_cycle_tuesday_mode>:

void set_cycle_tuesday_mode(void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e007      	b.n	80023cc <set_cycle_tuesday_mode+0x1c>
			display_data[i] = 0xff;
 80023bc:	4a66      	ldr	r2, [pc, #408]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3301      	adds	r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80023d2:	dbf3      	blt.n	80023bc <set_cycle_tuesday_mode+0xc>
		}

	if(blink == 1){
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <set_cycle_tuesday_mode+0x1ac>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <set_cycle_tuesday_mode+0x3a>
		LCD_get_string(1, 6, display_data, "TUE");
 80023dc:	4b60      	ldr	r3, [pc, #384]	; (8002560 <set_cycle_tuesday_mode+0x1b0>)
 80023de:	4a5e      	ldr	r2, [pc, #376]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80023e0:	2106      	movs	r1, #6
 80023e2:	2001      	movs	r0, #1
 80023e4:	f001 fa2a 	bl	800383c <LCD_get_string>
 80023e8:	e005      	b.n	80023f6 <set_cycle_tuesday_mode+0x46>
	}
	else{
		LCD_get_string(1, 6, display_data, "   ");
 80023ea:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <set_cycle_tuesday_mode+0x1b4>)
 80023ec:	4a5a      	ldr	r2, [pc, #360]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80023ee:	2106      	movs	r1, #6
 80023f0:	2001      	movs	r0, #1
 80023f2:	f001 fa23 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 4, display_data, "MON");
 80023f6:	4b5c      	ldr	r3, [pc, #368]	; (8002568 <set_cycle_tuesday_mode+0x1b8>)
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80023fa:	2104      	movs	r1, #4
 80023fc:	2001      	movs	r0, #1
 80023fe:	f001 fa1d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <set_cycle_tuesday_mode+0x1bc>)
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002406:	2108      	movs	r1, #8
 8002408:	2001      	movs	r0, #1
 800240a:	f001 fa17 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <set_cycle_tuesday_mode+0x1c0>)
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002412:	210a      	movs	r1, #10
 8002414:	2001      	movs	r0, #1
 8002416:	f001 fa11 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 800241a:	4b56      	ldr	r3, [pc, #344]	; (8002574 <set_cycle_tuesday_mode+0x1c4>)
 800241c:	4a4e      	ldr	r2, [pc, #312]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800241e:	2104      	movs	r1, #4
 8002420:	2007      	movs	r0, #7
 8002422:	f001 fa0b 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 8002426:	4b54      	ldr	r3, [pc, #336]	; (8002578 <set_cycle_tuesday_mode+0x1c8>)
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800242a:	2106      	movs	r1, #6
 800242c:	2007      	movs	r0, #7
 800242e:	f001 fa05 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 8002432:	4b52      	ldr	r3, [pc, #328]	; (800257c <set_cycle_tuesday_mode+0x1cc>)
 8002434:	4a48      	ldr	r2, [pc, #288]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002436:	2108      	movs	r1, #8
 8002438:	2007      	movs	r0, #7
 800243a:	f001 f9ff 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <set_cycle_tuesday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 800244a:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800244e:	2104      	movs	r1, #4
 8002450:	2005      	movs	r0, #5
 8002452:	f001 f9f3 	bl	800383c <LCD_get_string>
 8002456:	e005      	b.n	8002464 <set_cycle_tuesday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 800245a:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800245c:	2104      	movs	r1, #4
 800245e:	2005      	movs	r0, #5
 8002460:	f001 f9ec 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002464:	4b46      	ldr	r3, [pc, #280]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <set_cycle_tuesday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002470:	4b44      	ldr	r3, [pc, #272]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 8002472:	4a39      	ldr	r2, [pc, #228]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002474:	2106      	movs	r1, #6
 8002476:	2005      	movs	r0, #5
 8002478:	f001 f9e0 	bl	800383c <LCD_get_string>
 800247c:	e005      	b.n	800248a <set_cycle_tuesday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 800247e:	4b42      	ldr	r3, [pc, #264]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 8002480:	4a35      	ldr	r2, [pc, #212]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002482:	2106      	movs	r1, #6
 8002484:	2005      	movs	r0, #5
 8002486:	f001 f9d9 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <set_cycle_tuesday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800249a:	2108      	movs	r1, #8
 800249c:	2005      	movs	r0, #5
 800249e:	f001 f9cd 	bl	800383c <LCD_get_string>
 80024a2:	e005      	b.n	80024b0 <set_cycle_tuesday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 80024a4:	4b38      	ldr	r3, [pc, #224]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80024a8:	2108      	movs	r1, #8
 80024aa:	2005      	movs	r0, #5
 80024ac:	f001 f9c6 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <set_cycle_tuesday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 80024be:	4a26      	ldr	r2, [pc, #152]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80024c0:	210a      	movs	r1, #10
 80024c2:	2005      	movs	r0, #5
 80024c4:	f001 f9ba 	bl	800383c <LCD_get_string>
 80024c8:	e005      	b.n	80024d6 <set_cycle_tuesday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80024ce:	210a      	movs	r1, #10
 80024d0:	2005      	movs	r0, #5
 80024d2:	f001 f9b3 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <set_cycle_tuesday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 80024e4:	4a1c      	ldr	r2, [pc, #112]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80024e6:	2104      	movs	r1, #4
 80024e8:	200b      	movs	r0, #11
 80024ea:	f001 f9a7 	bl	800383c <LCD_get_string>
 80024ee:	e005      	b.n	80024fc <set_cycle_tuesday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 80024f2:	4a19      	ldr	r2, [pc, #100]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 80024f4:	2104      	movs	r1, #4
 80024f6:	200b      	movs	r0, #11
 80024f8:	f001 f9a0 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 80024fc:	4b20      	ldr	r3, [pc, #128]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <set_cycle_tuesday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800250c:	2106      	movs	r1, #6
 800250e:	200b      	movs	r0, #11
 8002510:	f001 f994 	bl	800383c <LCD_get_string>
 8002514:	e005      	b.n	8002522 <set_cycle_tuesday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 800251a:	2106      	movs	r1, #6
 800251c:	200b      	movs	r0, #11
 800251e:	f001 f98d 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <set_cycle_tuesday_mode+0x1d0>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <set_cycle_tuesday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <set_cycle_tuesday_mode+0x1d4>)
 8002530:	4a09      	ldr	r2, [pc, #36]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002532:	2108      	movs	r1, #8
 8002534:	200b      	movs	r0, #11
 8002536:	f001 f981 	bl	800383c <LCD_get_string>
 800253a:	e005      	b.n	8002548 <set_cycle_tuesday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <set_cycle_tuesday_mode+0x1d8>)
 800253e:	4a06      	ldr	r2, [pc, #24]	; (8002558 <set_cycle_tuesday_mode+0x1a8>)
 8002540:	2108      	movs	r1, #8
 8002542:	200b      	movs	r0, #11
 8002544:	f001 f97a 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_TUESDAY_MODE;
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <set_cycle_tuesday_mode+0x1dc>)
 800254a:	220c      	movs	r2, #12
 800254c:	701a      	strb	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200007e0 	.word	0x200007e0
 800255c:	20000c85 	.word	0x20000c85
 8002560:	08004a48 	.word	0x08004a48
 8002564:	08004a68 	.word	0x08004a68
 8002568:	08004a44 	.word	0x08004a44
 800256c:	08004a4c 	.word	0x08004a4c
 8002570:	08004a50 	.word	0x08004a50
 8002574:	08004a54 	.word	0x08004a54
 8002578:	08004a58 	.word	0x08004a58
 800257c:	08004a5c 	.word	0x08004a5c
 8002580:	20000c89 	.word	0x20000c89
 8002584:	08004a60 	.word	0x08004a60
 8002588:	08004a64 	.word	0x08004a64
 800258c:	20000c84 	.word	0x20000c84

08002590 <set_cycle_wednesday_mode>:

void set_cycle_wednesday_mode(void){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	e007      	b.n	80025ac <set_cycle_wednesday_mode+0x1c>
			display_data[i] = 0xff;
 800259c:	4a66      	ldr	r2, [pc, #408]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3301      	adds	r3, #1
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80025b2:	dbf3      	blt.n	800259c <set_cycle_wednesday_mode+0xc>
		}

	if(blink == 1){
 80025b4:	4b61      	ldr	r3, [pc, #388]	; (800273c <set_cycle_wednesday_mode+0x1ac>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <set_cycle_wednesday_mode+0x3a>
		LCD_get_string(1, 8, display_data, "WED");
 80025bc:	4b60      	ldr	r3, [pc, #384]	; (8002740 <set_cycle_wednesday_mode+0x1b0>)
 80025be:	4a5e      	ldr	r2, [pc, #376]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80025c0:	2108      	movs	r1, #8
 80025c2:	2001      	movs	r0, #1
 80025c4:	f001 f93a 	bl	800383c <LCD_get_string>
 80025c8:	e005      	b.n	80025d6 <set_cycle_wednesday_mode+0x46>
	}
	else{
		LCD_get_string(1, 8, display_data, "   ");
 80025ca:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <set_cycle_wednesday_mode+0x1b4>)
 80025cc:	4a5a      	ldr	r2, [pc, #360]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80025ce:	2108      	movs	r1, #8
 80025d0:	2001      	movs	r0, #1
 80025d2:	f001 f933 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 4, display_data, "MON");
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <set_cycle_wednesday_mode+0x1b8>)
 80025d8:	4a57      	ldr	r2, [pc, #348]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80025da:	2104      	movs	r1, #4
 80025dc:	2001      	movs	r0, #1
 80025de:	f001 f92d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 6, display_data, "TUE");
 80025e2:	4b5a      	ldr	r3, [pc, #360]	; (800274c <set_cycle_wednesday_mode+0x1bc>)
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80025e6:	2106      	movs	r1, #6
 80025e8:	2001      	movs	r0, #1
 80025ea:	f001 f927 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 80025ee:	4b58      	ldr	r3, [pc, #352]	; (8002750 <set_cycle_wednesday_mode+0x1c0>)
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80025f2:	210a      	movs	r1, #10
 80025f4:	2001      	movs	r0, #1
 80025f6:	f001 f921 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 80025fa:	4b56      	ldr	r3, [pc, #344]	; (8002754 <set_cycle_wednesday_mode+0x1c4>)
 80025fc:	4a4e      	ldr	r2, [pc, #312]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80025fe:	2104      	movs	r1, #4
 8002600:	2007      	movs	r0, #7
 8002602:	f001 f91b 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 8002606:	4b54      	ldr	r3, [pc, #336]	; (8002758 <set_cycle_wednesday_mode+0x1c8>)
 8002608:	4a4b      	ldr	r2, [pc, #300]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 800260a:	2106      	movs	r1, #6
 800260c:	2007      	movs	r0, #7
 800260e:	f001 f915 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 8002612:	4b52      	ldr	r3, [pc, #328]	; (800275c <set_cycle_wednesday_mode+0x1cc>)
 8002614:	4a48      	ldr	r2, [pc, #288]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 8002616:	2108      	movs	r1, #8
 8002618:	2007      	movs	r0, #7
 800261a:	f001 f90f 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 800261e:	4b50      	ldr	r3, [pc, #320]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <set_cycle_wednesday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 800262c:	4a42      	ldr	r2, [pc, #264]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 800262e:	2104      	movs	r1, #4
 8002630:	2005      	movs	r0, #5
 8002632:	f001 f903 	bl	800383c <LCD_get_string>
 8002636:	e005      	b.n	8002644 <set_cycle_wednesday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 8002638:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 800263c:	2104      	movs	r1, #4
 800263e:	2005      	movs	r0, #5
 8002640:	f001 f8fc 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <set_cycle_wednesday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002650:	4b44      	ldr	r3, [pc, #272]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 8002652:	4a39      	ldr	r2, [pc, #228]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 8002654:	2106      	movs	r1, #6
 8002656:	2005      	movs	r0, #5
 8002658:	f001 f8f0 	bl	800383c <LCD_get_string>
 800265c:	e005      	b.n	800266a <set_cycle_wednesday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 8002660:	4a35      	ldr	r2, [pc, #212]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 8002662:	2106      	movs	r1, #6
 8002664:	2005      	movs	r0, #5
 8002666:	f001 f8e9 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 800266a:	4b3d      	ldr	r3, [pc, #244]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <set_cycle_wednesday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 800267a:	2108      	movs	r1, #8
 800267c:	2005      	movs	r0, #5
 800267e:	f001 f8dd 	bl	800383c <LCD_get_string>
 8002682:	e005      	b.n	8002690 <set_cycle_wednesday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 8002684:	4b38      	ldr	r3, [pc, #224]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 8002686:	4a2c      	ldr	r2, [pc, #176]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 8002688:	2108      	movs	r1, #8
 800268a:	2005      	movs	r0, #5
 800268c:	f001 f8d6 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <set_cycle_wednesday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 800269e:	4a26      	ldr	r2, [pc, #152]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80026a0:	210a      	movs	r1, #10
 80026a2:	2005      	movs	r0, #5
 80026a4:	f001 f8ca 	bl	800383c <LCD_get_string>
 80026a8:	e005      	b.n	80026b6 <set_cycle_wednesday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80026ae:	210a      	movs	r1, #10
 80026b0:	2005      	movs	r0, #5
 80026b2:	f001 f8c3 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <set_cycle_wednesday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80026c6:	2104      	movs	r1, #4
 80026c8:	200b      	movs	r0, #11
 80026ca:	f001 f8b7 	bl	800383c <LCD_get_string>
 80026ce:	e005      	b.n	80026dc <set_cycle_wednesday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80026d4:	2104      	movs	r1, #4
 80026d6:	200b      	movs	r0, #11
 80026d8:	f001 f8b0 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 80026dc:	4b20      	ldr	r3, [pc, #128]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <set_cycle_wednesday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 80026e8:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80026ec:	2106      	movs	r1, #6
 80026ee:	200b      	movs	r0, #11
 80026f0:	f001 f8a4 	bl	800383c <LCD_get_string>
 80026f4:	e005      	b.n	8002702 <set_cycle_wednesday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 80026f8:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 80026fa:	2106      	movs	r1, #6
 80026fc:	200b      	movs	r0, #11
 80026fe:	f001 f89d 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <set_cycle_wednesday_mode+0x1d0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <set_cycle_wednesday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <set_cycle_wednesday_mode+0x1d4>)
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 8002712:	2108      	movs	r1, #8
 8002714:	200b      	movs	r0, #11
 8002716:	f001 f891 	bl	800383c <LCD_get_string>
 800271a:	e005      	b.n	8002728 <set_cycle_wednesday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <set_cycle_wednesday_mode+0x1d8>)
 800271e:	4a06      	ldr	r2, [pc, #24]	; (8002738 <set_cycle_wednesday_mode+0x1a8>)
 8002720:	2108      	movs	r1, #8
 8002722:	200b      	movs	r0, #11
 8002724:	f001 f88a 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_WEDNESDAY_MODE;
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <set_cycle_wednesday_mode+0x1dc>)
 800272a:	220d      	movs	r2, #13
 800272c:	701a      	strb	r2, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200007e0 	.word	0x200007e0
 800273c:	20000c85 	.word	0x20000c85
 8002740:	08004a4c 	.word	0x08004a4c
 8002744:	08004a68 	.word	0x08004a68
 8002748:	08004a44 	.word	0x08004a44
 800274c:	08004a48 	.word	0x08004a48
 8002750:	08004a50 	.word	0x08004a50
 8002754:	08004a54 	.word	0x08004a54
 8002758:	08004a58 	.word	0x08004a58
 800275c:	08004a5c 	.word	0x08004a5c
 8002760:	20000c89 	.word	0x20000c89
 8002764:	08004a60 	.word	0x08004a60
 8002768:	08004a64 	.word	0x08004a64
 800276c:	20000c84 	.word	0x20000c84

08002770 <set_cycle_thurday_mode>:

void set_cycle_thurday_mode(void){
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e007      	b.n	800278c <set_cycle_thurday_mode+0x1c>
			display_data[i] = 0xff;
 800277c:	4a66      	ldr	r2, [pc, #408]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	22ff      	movs	r2, #255	; 0xff
 8002784:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3301      	adds	r3, #1
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002792:	dbf3      	blt.n	800277c <set_cycle_thurday_mode+0xc>
		}

	if(blink == 1){
 8002794:	4b61      	ldr	r3, [pc, #388]	; (800291c <set_cycle_thurday_mode+0x1ac>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <set_cycle_thurday_mode+0x3a>
		LCD_get_string(1, 10, display_data, "THU");
 800279c:	4b60      	ldr	r3, [pc, #384]	; (8002920 <set_cycle_thurday_mode+0x1b0>)
 800279e:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027a0:	210a      	movs	r1, #10
 80027a2:	2001      	movs	r0, #1
 80027a4:	f001 f84a 	bl	800383c <LCD_get_string>
 80027a8:	e005      	b.n	80027b6 <set_cycle_thurday_mode+0x46>
	}
	else{
		LCD_get_string(1, 10, display_data, "   ");
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <set_cycle_thurday_mode+0x1b4>)
 80027ac:	4a5a      	ldr	r2, [pc, #360]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027ae:	210a      	movs	r1, #10
 80027b0:	2001      	movs	r0, #1
 80027b2:	f001 f843 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 4, display_data, "MON");
 80027b6:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <set_cycle_thurday_mode+0x1b8>)
 80027b8:	4a57      	ldr	r2, [pc, #348]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027ba:	2104      	movs	r1, #4
 80027bc:	2001      	movs	r0, #1
 80027be:	f001 f83d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 6, display_data, "TUE");
 80027c2:	4b5a      	ldr	r3, [pc, #360]	; (800292c <set_cycle_thurday_mode+0x1bc>)
 80027c4:	4a54      	ldr	r2, [pc, #336]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027c6:	2106      	movs	r1, #6
 80027c8:	2001      	movs	r0, #1
 80027ca:	f001 f837 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 80027ce:	4b58      	ldr	r3, [pc, #352]	; (8002930 <set_cycle_thurday_mode+0x1c0>)
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027d2:	2108      	movs	r1, #8
 80027d4:	2001      	movs	r0, #1
 80027d6:	f001 f831 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 80027da:	4b56      	ldr	r3, [pc, #344]	; (8002934 <set_cycle_thurday_mode+0x1c4>)
 80027dc:	4a4e      	ldr	r2, [pc, #312]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027de:	2104      	movs	r1, #4
 80027e0:	2007      	movs	r0, #7
 80027e2:	f001 f82b 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 80027e6:	4b54      	ldr	r3, [pc, #336]	; (8002938 <set_cycle_thurday_mode+0x1c8>)
 80027e8:	4a4b      	ldr	r2, [pc, #300]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027ea:	2106      	movs	r1, #6
 80027ec:	2007      	movs	r0, #7
 80027ee:	f001 f825 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 80027f2:	4b52      	ldr	r3, [pc, #328]	; (800293c <set_cycle_thurday_mode+0x1cc>)
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80027f6:	2108      	movs	r1, #8
 80027f8:	2007      	movs	r0, #7
 80027fa:	f001 f81f 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 80027fe:	4b50      	ldr	r3, [pc, #320]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <set_cycle_thurday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 800280a:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 800280e:	2104      	movs	r1, #4
 8002810:	2005      	movs	r0, #5
 8002812:	f001 f813 	bl	800383c <LCD_get_string>
 8002816:	e005      	b.n	8002824 <set_cycle_thurday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 800281a:	4a3f      	ldr	r2, [pc, #252]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 800281c:	2104      	movs	r1, #4
 800281e:	2005      	movs	r0, #5
 8002820:	f001 f80c 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <set_cycle_thurday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 8002832:	4a39      	ldr	r2, [pc, #228]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 8002834:	2106      	movs	r1, #6
 8002836:	2005      	movs	r0, #5
 8002838:	f001 f800 	bl	800383c <LCD_get_string>
 800283c:	e005      	b.n	800284a <set_cycle_thurday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 800283e:	4b42      	ldr	r3, [pc, #264]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 8002842:	2106      	movs	r1, #6
 8002844:	2005      	movs	r0, #5
 8002846:	f000 fff9 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <set_cycle_thurday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 8002858:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 800285a:	2108      	movs	r1, #8
 800285c:	2005      	movs	r0, #5
 800285e:	f000 ffed 	bl	800383c <LCD_get_string>
 8002862:	e005      	b.n	8002870 <set_cycle_thurday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 8002864:	4b38      	ldr	r3, [pc, #224]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 8002866:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 8002868:	2108      	movs	r1, #8
 800286a:	2005      	movs	r0, #5
 800286c:	f000 ffe6 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 8002870:	4b33      	ldr	r3, [pc, #204]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <set_cycle_thurday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 800287e:	4a26      	ldr	r2, [pc, #152]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 8002880:	210a      	movs	r1, #10
 8002882:	2005      	movs	r0, #5
 8002884:	f000 ffda 	bl	800383c <LCD_get_string>
 8002888:	e005      	b.n	8002896 <set_cycle_thurday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 800288e:	210a      	movs	r1, #10
 8002890:	2005      	movs	r0, #5
 8002892:	f000 ffd3 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <set_cycle_thurday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80028a6:	2104      	movs	r1, #4
 80028a8:	200b      	movs	r0, #11
 80028aa:	f000 ffc7 	bl	800383c <LCD_get_string>
 80028ae:	e005      	b.n	80028bc <set_cycle_thurday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 80028b0:	4b25      	ldr	r3, [pc, #148]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 80028b2:	4a19      	ldr	r2, [pc, #100]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80028b4:	2104      	movs	r1, #4
 80028b6:	200b      	movs	r0, #11
 80028b8:	f000 ffc0 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <set_cycle_thurday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80028cc:	2106      	movs	r1, #6
 80028ce:	200b      	movs	r0, #11
 80028d0:	f000 ffb4 	bl	800383c <LCD_get_string>
 80028d4:	e005      	b.n	80028e2 <set_cycle_thurday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80028da:	2106      	movs	r1, #6
 80028dc:	200b      	movs	r0, #11
 80028de:	f000 ffad 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <set_cycle_thurday_mode+0x1d0>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <set_cycle_thurday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <set_cycle_thurday_mode+0x1d4>)
 80028f0:	4a09      	ldr	r2, [pc, #36]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 80028f2:	2108      	movs	r1, #8
 80028f4:	200b      	movs	r0, #11
 80028f6:	f000 ffa1 	bl	800383c <LCD_get_string>
 80028fa:	e005      	b.n	8002908 <set_cycle_thurday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <set_cycle_thurday_mode+0x1d8>)
 80028fe:	4a06      	ldr	r2, [pc, #24]	; (8002918 <set_cycle_thurday_mode+0x1a8>)
 8002900:	2108      	movs	r1, #8
 8002902:	200b      	movs	r0, #11
 8002904:	f000 ff9a 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_THURDAY_MODE;
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <set_cycle_thurday_mode+0x1dc>)
 800290a:	220e      	movs	r2, #14
 800290c:	701a      	strb	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200007e0 	.word	0x200007e0
 800291c:	20000c85 	.word	0x20000c85
 8002920:	08004a50 	.word	0x08004a50
 8002924:	08004a68 	.word	0x08004a68
 8002928:	08004a44 	.word	0x08004a44
 800292c:	08004a48 	.word	0x08004a48
 8002930:	08004a4c 	.word	0x08004a4c
 8002934:	08004a54 	.word	0x08004a54
 8002938:	08004a58 	.word	0x08004a58
 800293c:	08004a5c 	.word	0x08004a5c
 8002940:	20000c89 	.word	0x20000c89
 8002944:	08004a60 	.word	0x08004a60
 8002948:	08004a64 	.word	0x08004a64
 800294c:	20000c84 	.word	0x20000c84

08002950 <set_cycle_friday_mode>:
void set_cycle_friday_mode(void){
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	e007      	b.n	800296c <set_cycle_friday_mode+0x1c>
			display_data[i] = 0xff;
 800295c:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3301      	adds	r3, #1
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002972:	dbf3      	blt.n	800295c <set_cycle_friday_mode+0xc>
		}

	if(blink == 1){
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <set_cycle_friday_mode+0x1ac>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <set_cycle_friday_mode+0x3a>
		LCD_get_string(7, 4, display_data, "FRI");
 800297c:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <set_cycle_friday_mode+0x1b0>)
 800297e:	4a5e      	ldr	r2, [pc, #376]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002980:	2104      	movs	r1, #4
 8002982:	2007      	movs	r0, #7
 8002984:	f000 ff5a 	bl	800383c <LCD_get_string>
 8002988:	e005      	b.n	8002996 <set_cycle_friday_mode+0x46>
	}
	else{
		LCD_get_string(7, 4, display_data, "   ");
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <set_cycle_friday_mode+0x1b4>)
 800298c:	4a5a      	ldr	r2, [pc, #360]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 800298e:	2104      	movs	r1, #4
 8002990:	2007      	movs	r0, #7
 8002992:	f000 ff53 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 4, display_data, "MON");
 8002996:	4b5c      	ldr	r3, [pc, #368]	; (8002b08 <set_cycle_friday_mode+0x1b8>)
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 800299a:	2104      	movs	r1, #4
 800299c:	2001      	movs	r0, #1
 800299e:	f000 ff4d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 6, display_data, "TUE");
 80029a2:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <set_cycle_friday_mode+0x1bc>)
 80029a4:	4a54      	ldr	r2, [pc, #336]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029a6:	2106      	movs	r1, #6
 80029a8:	2001      	movs	r0, #1
 80029aa:	f000 ff47 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <set_cycle_friday_mode+0x1c0>)
 80029b0:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029b2:	2108      	movs	r1, #8
 80029b4:	2001      	movs	r0, #1
 80029b6:	f000 ff41 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 80029ba:	4b56      	ldr	r3, [pc, #344]	; (8002b14 <set_cycle_friday_mode+0x1c4>)
 80029bc:	4a4e      	ldr	r2, [pc, #312]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029be:	210a      	movs	r1, #10
 80029c0:	2001      	movs	r0, #1
 80029c2:	f000 ff3b 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 80029c6:	4b54      	ldr	r3, [pc, #336]	; (8002b18 <set_cycle_friday_mode+0x1c8>)
 80029c8:	4a4b      	ldr	r2, [pc, #300]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029ca:	2106      	movs	r1, #6
 80029cc:	2007      	movs	r0, #7
 80029ce:	f000 ff35 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 80029d2:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <set_cycle_friday_mode+0x1cc>)
 80029d4:	4a48      	ldr	r2, [pc, #288]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029d6:	2108      	movs	r1, #8
 80029d8:	2007      	movs	r0, #7
 80029da:	f000 ff2f 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 80029de:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <set_cycle_friday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 80029ea:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 80029ec:	4a42      	ldr	r2, [pc, #264]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029ee:	2104      	movs	r1, #4
 80029f0:	2005      	movs	r0, #5
 80029f2:	f000 ff23 	bl	800383c <LCD_get_string>
 80029f6:	e005      	b.n	8002a04 <set_cycle_friday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 80029fa:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 80029fc:	2104      	movs	r1, #4
 80029fe:	2005      	movs	r0, #5
 8002a00:	f000 ff1c 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <set_cycle_friday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002a10:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 8002a12:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a14:	2106      	movs	r1, #6
 8002a16:	2005      	movs	r0, #5
 8002a18:	f000 ff10 	bl	800383c <LCD_get_string>
 8002a1c:	e005      	b.n	8002a2a <set_cycle_friday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 8002a1e:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 8002a20:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a22:	2106      	movs	r1, #6
 8002a24:	2005      	movs	r0, #5
 8002a26:	f000 ff09 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <set_cycle_friday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 8002a38:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a3a:	2108      	movs	r1, #8
 8002a3c:	2005      	movs	r0, #5
 8002a3e:	f000 fefd 	bl	800383c <LCD_get_string>
 8002a42:	e005      	b.n	8002a50 <set_cycle_friday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 8002a44:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a48:	2108      	movs	r1, #8
 8002a4a:	2005      	movs	r0, #5
 8002a4c:	f000 fef6 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 8002a50:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <set_cycle_friday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a60:	210a      	movs	r1, #10
 8002a62:	2005      	movs	r0, #5
 8002a64:	f000 feea 	bl	800383c <LCD_get_string>
 8002a68:	e005      	b.n	8002a76 <set_cycle_friday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 8002a6a:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a6e:	210a      	movs	r1, #10
 8002a70:	2005      	movs	r0, #5
 8002a72:	f000 fee3 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <set_cycle_friday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a86:	2104      	movs	r1, #4
 8002a88:	200b      	movs	r0, #11
 8002a8a:	f000 fed7 	bl	800383c <LCD_get_string>
 8002a8e:	e005      	b.n	8002a9c <set_cycle_friday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002a94:	2104      	movs	r1, #4
 8002a96:	200b      	movs	r0, #11
 8002a98:	f000 fed0 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <set_cycle_friday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002aac:	2106      	movs	r1, #6
 8002aae:	200b      	movs	r0, #11
 8002ab0:	f000 fec4 	bl	800383c <LCD_get_string>
 8002ab4:	e005      	b.n	8002ac2 <set_cycle_friday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002aba:	2106      	movs	r1, #6
 8002abc:	200b      	movs	r0, #11
 8002abe:	f000 febd 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <set_cycle_friday_mode+0x1d0>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <set_cycle_friday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <set_cycle_friday_mode+0x1d4>)
 8002ad0:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	200b      	movs	r0, #11
 8002ad6:	f000 feb1 	bl	800383c <LCD_get_string>
 8002ada:	e005      	b.n	8002ae8 <set_cycle_friday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <set_cycle_friday_mode+0x1d8>)
 8002ade:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <set_cycle_friday_mode+0x1a8>)
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	200b      	movs	r0, #11
 8002ae4:	f000 feaa 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_FRIDAY_MODE;
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <set_cycle_friday_mode+0x1dc>)
 8002aea:	220f      	movs	r2, #15
 8002aec:	701a      	strb	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200007e0 	.word	0x200007e0
 8002afc:	20000c85 	.word	0x20000c85
 8002b00:	08004a54 	.word	0x08004a54
 8002b04:	08004a68 	.word	0x08004a68
 8002b08:	08004a44 	.word	0x08004a44
 8002b0c:	08004a48 	.word	0x08004a48
 8002b10:	08004a4c 	.word	0x08004a4c
 8002b14:	08004a50 	.word	0x08004a50
 8002b18:	08004a58 	.word	0x08004a58
 8002b1c:	08004a5c 	.word	0x08004a5c
 8002b20:	20000c89 	.word	0x20000c89
 8002b24:	08004a60 	.word	0x08004a60
 8002b28:	08004a64 	.word	0x08004a64
 8002b2c:	20000c84 	.word	0x20000c84

08002b30 <set_cycle_saturday_mode>:

void set_cycle_saturday_mode(void){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	e007      	b.n	8002b4c <set_cycle_saturday_mode+0x1c>
			display_data[i] = 0xff;
 8002b3c:	4a66      	ldr	r2, [pc, #408]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	22ff      	movs	r2, #255	; 0xff
 8002b44:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002b52:	dbf3      	blt.n	8002b3c <set_cycle_saturday_mode+0xc>
		}

	if(blink == 1){
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <set_cycle_saturday_mode+0x1ac>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <set_cycle_saturday_mode+0x3a>
		LCD_get_string(7, 6, display_data, "SAT");
 8002b5c:	4b60      	ldr	r3, [pc, #384]	; (8002ce0 <set_cycle_saturday_mode+0x1b0>)
 8002b5e:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b60:	2106      	movs	r1, #6
 8002b62:	2007      	movs	r0, #7
 8002b64:	f000 fe6a 	bl	800383c <LCD_get_string>
 8002b68:	e005      	b.n	8002b76 <set_cycle_saturday_mode+0x46>
	}
	else{
		LCD_get_string(7, 6, display_data, "   ");
 8002b6a:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <set_cycle_saturday_mode+0x1b4>)
 8002b6c:	4a5a      	ldr	r2, [pc, #360]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b6e:	2106      	movs	r1, #6
 8002b70:	2007      	movs	r0, #7
 8002b72:	f000 fe63 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 4, display_data, "MON");
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <set_cycle_saturday_mode+0x1b8>)
 8002b78:	4a57      	ldr	r2, [pc, #348]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f000 fe5d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 6, display_data, "TUE");
 8002b82:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <set_cycle_saturday_mode+0x1bc>)
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b86:	2106      	movs	r1, #6
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f000 fe57 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 8002b8e:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <set_cycle_saturday_mode+0x1c0>)
 8002b90:	4a51      	ldr	r2, [pc, #324]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b92:	2108      	movs	r1, #8
 8002b94:	2001      	movs	r0, #1
 8002b96:	f000 fe51 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 8002b9a:	4b56      	ldr	r3, [pc, #344]	; (8002cf4 <set_cycle_saturday_mode+0x1c4>)
 8002b9c:	4a4e      	ldr	r2, [pc, #312]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002b9e:	210a      	movs	r1, #10
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f000 fe4b 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <set_cycle_saturday_mode+0x1c8>)
 8002ba8:	4a4b      	ldr	r2, [pc, #300]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002baa:	2104      	movs	r1, #4
 8002bac:	2007      	movs	r0, #7
 8002bae:	f000 fe45 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 8, display_data, "SUN");
 8002bb2:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <set_cycle_saturday_mode+0x1cc>)
 8002bb4:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002bb6:	2108      	movs	r1, #8
 8002bb8:	2007      	movs	r0, #7
 8002bba:	f000 fe3f 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <set_cycle_saturday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002bcc:	4a42      	ldr	r2, [pc, #264]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002bce:	2104      	movs	r1, #4
 8002bd0:	2005      	movs	r0, #5
 8002bd2:	f000 fe33 	bl	800383c <LCD_get_string>
 8002bd6:	e005      	b.n	8002be4 <set_cycle_saturday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002bda:	4a3f      	ldr	r2, [pc, #252]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002bdc:	2104      	movs	r1, #4
 8002bde:	2005      	movs	r0, #5
 8002be0:	f000 fe2c 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002be4:	4b46      	ldr	r3, [pc, #280]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <set_cycle_saturday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002bf0:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002bf2:	4a39      	ldr	r2, [pc, #228]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002bf4:	2106      	movs	r1, #6
 8002bf6:	2005      	movs	r0, #5
 8002bf8:	f000 fe20 	bl	800383c <LCD_get_string>
 8002bfc:	e005      	b.n	8002c0a <set_cycle_saturday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 8002bfe:	4b42      	ldr	r3, [pc, #264]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002c00:	4a35      	ldr	r2, [pc, #212]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c02:	2106      	movs	r1, #6
 8002c04:	2005      	movs	r0, #5
 8002c06:	f000 fe19 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <set_cycle_saturday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002c18:	4a2f      	ldr	r2, [pc, #188]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	2005      	movs	r0, #5
 8002c1e:	f000 fe0d 	bl	800383c <LCD_get_string>
 8002c22:	e005      	b.n	8002c30 <set_cycle_saturday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 8002c24:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002c26:	4a2c      	ldr	r2, [pc, #176]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c28:	2108      	movs	r1, #8
 8002c2a:	2005      	movs	r0, #5
 8002c2c:	f000 fe06 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 8002c30:	4b33      	ldr	r3, [pc, #204]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <set_cycle_saturday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 8002c3c:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c40:	210a      	movs	r1, #10
 8002c42:	2005      	movs	r0, #5
 8002c44:	f000 fdfa 	bl	800383c <LCD_get_string>
 8002c48:	e005      	b.n	8002c56 <set_cycle_saturday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002c4c:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c4e:	210a      	movs	r1, #10
 8002c50:	2005      	movs	r0, #5
 8002c52:	f000 fdf3 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <set_cycle_saturday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c66:	2104      	movs	r1, #4
 8002c68:	200b      	movs	r0, #11
 8002c6a:	f000 fde7 	bl	800383c <LCD_get_string>
 8002c6e:	e005      	b.n	8002c7c <set_cycle_saturday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c74:	2104      	movs	r1, #4
 8002c76:	200b      	movs	r0, #11
 8002c78:	f000 fde0 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <set_cycle_saturday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c8c:	2106      	movs	r1, #6
 8002c8e:	200b      	movs	r0, #11
 8002c90:	f000 fdd4 	bl	800383c <LCD_get_string>
 8002c94:	e005      	b.n	8002ca2 <set_cycle_saturday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002c9a:	2106      	movs	r1, #6
 8002c9c:	200b      	movs	r0, #11
 8002c9e:	f000 fdcd 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <set_cycle_saturday_mode+0x1d0>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <set_cycle_saturday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <set_cycle_saturday_mode+0x1d4>)
 8002cb0:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	200b      	movs	r0, #11
 8002cb6:	f000 fdc1 	bl	800383c <LCD_get_string>
 8002cba:	e005      	b.n	8002cc8 <set_cycle_saturday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <set_cycle_saturday_mode+0x1d8>)
 8002cbe:	4a06      	ldr	r2, [pc, #24]	; (8002cd8 <set_cycle_saturday_mode+0x1a8>)
 8002cc0:	2108      	movs	r1, #8
 8002cc2:	200b      	movs	r0, #11
 8002cc4:	f000 fdba 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_SATURDAY_MODE;
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <set_cycle_saturday_mode+0x1dc>)
 8002cca:	2210      	movs	r2, #16
 8002ccc:	701a      	strb	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200007e0 	.word	0x200007e0
 8002cdc:	20000c85 	.word	0x20000c85
 8002ce0:	08004a58 	.word	0x08004a58
 8002ce4:	08004a68 	.word	0x08004a68
 8002ce8:	08004a44 	.word	0x08004a44
 8002cec:	08004a48 	.word	0x08004a48
 8002cf0:	08004a4c 	.word	0x08004a4c
 8002cf4:	08004a50 	.word	0x08004a50
 8002cf8:	08004a54 	.word	0x08004a54
 8002cfc:	08004a5c 	.word	0x08004a5c
 8002d00:	20000c89 	.word	0x20000c89
 8002d04:	08004a60 	.word	0x08004a60
 8002d08:	08004a64 	.word	0x08004a64
 8002d0c:	20000c84 	.word	0x20000c84

08002d10 <set_cycle_sunday_mode>:

void set_cycle_sunday_mode(void){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	e007      	b.n	8002d2c <set_cycle_sunday_mode+0x1c>
			display_data[i] = 0xff;
 8002d1c:	4a66      	ldr	r2, [pc, #408]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002d32:	dbf3      	blt.n	8002d1c <set_cycle_sunday_mode+0xc>
		}

	if(blink == 1){
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <set_cycle_sunday_mode+0x1ac>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <set_cycle_sunday_mode+0x3a>
		LCD_get_string(7, 8, display_data, "SUN");
 8002d3c:	4b60      	ldr	r3, [pc, #384]	; (8002ec0 <set_cycle_sunday_mode+0x1b0>)
 8002d3e:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d40:	2108      	movs	r1, #8
 8002d42:	2007      	movs	r0, #7
 8002d44:	f000 fd7a 	bl	800383c <LCD_get_string>
 8002d48:	e005      	b.n	8002d56 <set_cycle_sunday_mode+0x46>
	}
	else{
		LCD_get_string(7, 8, display_data, "   ");
 8002d4a:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <set_cycle_sunday_mode+0x1b4>)
 8002d4c:	4a5a      	ldr	r2, [pc, #360]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d4e:	2108      	movs	r1, #8
 8002d50:	2007      	movs	r0, #7
 8002d52:	f000 fd73 	bl	800383c <LCD_get_string>
	}

	LCD_get_string(1, 4, display_data, "MON");
 8002d56:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <set_cycle_sunday_mode+0x1b8>)
 8002d58:	4a57      	ldr	r2, [pc, #348]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f000 fd6d 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 6, display_data, "TUE");
 8002d62:	4b5a      	ldr	r3, [pc, #360]	; (8002ecc <set_cycle_sunday_mode+0x1bc>)
 8002d64:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d66:	2106      	movs	r1, #6
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f000 fd67 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 8, display_data, "WED");
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <set_cycle_sunday_mode+0x1c0>)
 8002d70:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d72:	2108      	movs	r1, #8
 8002d74:	2001      	movs	r0, #1
 8002d76:	f000 fd61 	bl	800383c <LCD_get_string>
	LCD_get_string(1, 10, display_data, "THU");
 8002d7a:	4b56      	ldr	r3, [pc, #344]	; (8002ed4 <set_cycle_sunday_mode+0x1c4>)
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d7e:	210a      	movs	r1, #10
 8002d80:	2001      	movs	r0, #1
 8002d82:	f000 fd5b 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 4, display_data, "FRI");
 8002d86:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <set_cycle_sunday_mode+0x1c8>)
 8002d88:	4a4b      	ldr	r2, [pc, #300]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	2007      	movs	r0, #7
 8002d8e:	f000 fd55 	bl	800383c <LCD_get_string>
	LCD_get_string(7, 6, display_data, "SAT");
 8002d92:	4b52      	ldr	r3, [pc, #328]	; (8002edc <set_cycle_sunday_mode+0x1cc>)
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002d96:	2106      	movs	r1, #6
 8002d98:	2007      	movs	r0, #7
 8002d9a:	f000 fd4f 	bl	800383c <LCD_get_string>

	if(temp_cycle & (1 << 0)){
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <set_cycle_sunday_mode+0xa8>
		LCD_get_string(5, 4, display_data, "X");
 8002daa:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002dac:	4a42      	ldr	r2, [pc, #264]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002dae:	2104      	movs	r1, #4
 8002db0:	2005      	movs	r0, #5
 8002db2:	f000 fd43 	bl	800383c <LCD_get_string>
 8002db6:	e005      	b.n	8002dc4 <set_cycle_sunday_mode+0xb4>
	}else{
		LCD_get_string(5, 4, display_data, " ");
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002dba:	4a3f      	ldr	r2, [pc, #252]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	2005      	movs	r0, #5
 8002dc0:	f000 fd3c 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 1)){
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <set_cycle_sunday_mode+0xce>
		LCD_get_string(5, 6, display_data, "X");
 8002dd0:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002dd2:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002dd4:	2106      	movs	r1, #6
 8002dd6:	2005      	movs	r0, #5
 8002dd8:	f000 fd30 	bl	800383c <LCD_get_string>
 8002ddc:	e005      	b.n	8002dea <set_cycle_sunday_mode+0xda>
	}else{
		LCD_get_string(5, 6, display_data, " ");
 8002dde:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002de0:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002de2:	2106      	movs	r1, #6
 8002de4:	2005      	movs	r0, #5
 8002de6:	f000 fd29 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 2)){
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <set_cycle_sunday_mode+0xf4>
		LCD_get_string(5, 8, display_data, "X");
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002df8:	4a2f      	ldr	r2, [pc, #188]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002dfa:	2108      	movs	r1, #8
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f000 fd1d 	bl	800383c <LCD_get_string>
 8002e02:	e005      	b.n	8002e10 <set_cycle_sunday_mode+0x100>
	}else{
		LCD_get_string(5, 8, display_data, " ");
 8002e04:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002e06:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e08:	2108      	movs	r1, #8
 8002e0a:	2005      	movs	r0, #5
 8002e0c:	f000 fd16 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 3)){
 8002e10:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <set_cycle_sunday_mode+0x11a>
		LCD_get_string(5, 10, display_data, "X");
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002e1e:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e20:	210a      	movs	r1, #10
 8002e22:	2005      	movs	r0, #5
 8002e24:	f000 fd0a 	bl	800383c <LCD_get_string>
 8002e28:	e005      	b.n	8002e36 <set_cycle_sunday_mode+0x126>
	}else{
		LCD_get_string(5, 10, display_data, " ");
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002e2c:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e2e:	210a      	movs	r1, #10
 8002e30:	2005      	movs	r0, #5
 8002e32:	f000 fd03 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 4)){
 8002e36:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <set_cycle_sunday_mode+0x140>
		LCD_get_string(11, 4, display_data, "X");
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e46:	2104      	movs	r1, #4
 8002e48:	200b      	movs	r0, #11
 8002e4a:	f000 fcf7 	bl	800383c <LCD_get_string>
 8002e4e:	e005      	b.n	8002e5c <set_cycle_sunday_mode+0x14c>
	}else{
		LCD_get_string(11, 4, display_data, " ");
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002e52:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e54:	2104      	movs	r1, #4
 8002e56:	200b      	movs	r0, #11
 8002e58:	f000 fcf0 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 5)){
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <set_cycle_sunday_mode+0x166>
		LCD_get_string(11, 6, display_data, "X");
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002e6a:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e6c:	2106      	movs	r1, #6
 8002e6e:	200b      	movs	r0, #11
 8002e70:	f000 fce4 	bl	800383c <LCD_get_string>
 8002e74:	e005      	b.n	8002e82 <set_cycle_sunday_mode+0x172>
	}else{
		LCD_get_string(11, 6, display_data, " ");
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e7a:	2106      	movs	r1, #6
 8002e7c:	200b      	movs	r0, #11
 8002e7e:	f000 fcdd 	bl	800383c <LCD_get_string>
	}
	if(temp_cycle & (1 << 6)){
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <set_cycle_sunday_mode+0x1d0>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d006      	beq.n	8002e9c <set_cycle_sunday_mode+0x18c>
		LCD_get_string(11, 8, display_data, "X");
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <set_cycle_sunday_mode+0x1d4>)
 8002e90:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002e92:	2108      	movs	r1, #8
 8002e94:	200b      	movs	r0, #11
 8002e96:	f000 fcd1 	bl	800383c <LCD_get_string>
 8002e9a:	e005      	b.n	8002ea8 <set_cycle_sunday_mode+0x198>
	}else{
		LCD_get_string(11, 8, display_data, " ");
 8002e9c:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <set_cycle_sunday_mode+0x1d8>)
 8002e9e:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <set_cycle_sunday_mode+0x1a8>)
 8002ea0:	2108      	movs	r1, #8
 8002ea2:	200b      	movs	r0, #11
 8002ea4:	f000 fcca 	bl	800383c <LCD_get_string>
	}
	mode = SET_CYCLE_SUNDAY_MODE;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <set_cycle_sunday_mode+0x1dc>)
 8002eaa:	2211      	movs	r2, #17
 8002eac:	701a      	strb	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200007e0 	.word	0x200007e0
 8002ebc:	20000c85 	.word	0x20000c85
 8002ec0:	08004a5c 	.word	0x08004a5c
 8002ec4:	08004a68 	.word	0x08004a68
 8002ec8:	08004a44 	.word	0x08004a44
 8002ecc:	08004a48 	.word	0x08004a48
 8002ed0:	08004a4c 	.word	0x08004a4c
 8002ed4:	08004a50 	.word	0x08004a50
 8002ed8:	08004a54 	.word	0x08004a54
 8002edc:	08004a58 	.word	0x08004a58
 8002ee0:	20000c89 	.word	0x20000c89
 8002ee4:	08004a60 	.word	0x08004a60
 8002ee8:	08004a64 	.word	0x08004a64
 8002eec:	20000c84 	.word	0x20000c84

08002ef0 <change_cycle_mode>:

void change_cycle_mode(void){
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
	switch (mode) {
 8002ef4:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <change_cycle_mode+0xac>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	3b0b      	subs	r3, #11
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d848      	bhi.n	8002f90 <change_cycle_mode+0xa0>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <change_cycle_mode+0x14>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f21 	.word	0x08002f21
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f41 	.word	0x08002f41
 8002f10:	08002f51 	.word	0x08002f51
 8002f14:	08002f61 	.word	0x08002f61
 8002f18:	08002f71 	.word	0x08002f71
 8002f1c:	08002f81 	.word	0x08002f81
		case SET_CYCLE_MONDAY_MODE:
			temp_cycle ^= (1 << 0);
 8002f20:	4b1f      	ldr	r3, [pc, #124]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	f083 0301 	eor.w	r3, r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f2c:	701a      	strb	r2, [r3, #0]
			break;
 8002f2e:	e030      	b.n	8002f92 <change_cycle_mode+0xa2>
		case SET_CYCLE_TUESDAY_MODE:
			temp_cycle ^= (1 << 1);
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	f083 0302 	eor.w	r3, r3, #2
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f3c:	701a      	strb	r2, [r3, #0]
			break;
 8002f3e:	e028      	b.n	8002f92 <change_cycle_mode+0xa2>
		case SET_CYCLE_WEDNESDAY_MODE:
			temp_cycle ^= (1 << 2);
 8002f40:	4b17      	ldr	r3, [pc, #92]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	f083 0304 	eor.w	r3, r3, #4
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f4c:	701a      	strb	r2, [r3, #0]
			break;
 8002f4e:	e020      	b.n	8002f92 <change_cycle_mode+0xa2>
		case SET_CYCLE_THURDAY_MODE:
			temp_cycle ^= (1 << 3);
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f083 0308 	eor.w	r3, r3, #8
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f5c:	701a      	strb	r2, [r3, #0]
			break;
 8002f5e:	e018      	b.n	8002f92 <change_cycle_mode+0xa2>
		case SET_CYCLE_FRIDAY_MODE:
			temp_cycle ^= (1 << 4);
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0310 	eor.w	r3, r3, #16
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f6c:	701a      	strb	r2, [r3, #0]
			break;
 8002f6e:	e010      	b.n	8002f92 <change_cycle_mode+0xa2>
		case SET_CYCLE_SATURDAY_MODE:
			temp_cycle ^= (1 << 5);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f083 0320 	eor.w	r3, r3, #32
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f7c:	701a      	strb	r2, [r3, #0]
			break;
 8002f7e:	e008      	b.n	8002f92 <change_cycle_mode+0xa2>
		case SET_CYCLE_SUNDAY_MODE:
			temp_cycle ^= (1 << 6);
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <change_cycle_mode+0xb0>)
 8002f8c:	701a      	strb	r2, [r3, #0]
			break;
 8002f8e:	e000      	b.n	8002f92 <change_cycle_mode+0xa2>
		default:
			break;
 8002f90:	bf00      	nop
	}
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000c84 	.word	0x20000c84
 8002fa0:	20000c89 	.word	0x20000c89

08002fa4 <alarm_mode>:
void alarm_mode(void){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	e007      	b.n	8002fc0 <alarm_mode+0x1c>
		display_data[i] = 0xff;
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <alarm_mode+0x98>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	22ff      	movs	r2, #255	; 0xff
 8002fb8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD_BUF_SIZE; i++){
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002fc6:	dbf3      	blt.n	8002fb0 <alarm_mode+0xc>
	}
	LCD_get_string(1, 6, display_data, "ALARM!");
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <alarm_mode+0x9c>)
 8002fca:	4a1c      	ldr	r2, [pc, #112]	; (800303c <alarm_mode+0x98>)
 8002fcc:	2106      	movs	r1, #6
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f000 fc34 	bl	800383c <LCD_get_string>
	if(current_time.min != alarm_time.min){
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <alarm_mode+0xa0>)
 8002fd6:	7a1a      	ldrb	r2, [r3, #8]
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <alarm_mode+0xa4>)
 8002fda:	7a1b      	ldrb	r3, [r3, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d025      	beq.n	800302c <alarm_mode+0x88>
		Set_alarm_times(alarm_times--);
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <alarm_mode+0xa8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	b2d1      	uxtb	r1, r2
 8002fe8:	4a18      	ldr	r2, [pc, #96]	; (800304c <alarm_mode+0xa8>)
 8002fea:	7011      	strb	r1, [r2, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fd f94d 	bl	800028c <Set_alarm_times>
		if(alarm_times != 0){
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <alarm_mode+0xa8>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <alarm_mode+0x6e>
			Set_alarm(current_time.hour, current_time.min + 4, current_time.sec);
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <alarm_mode+0xa0>)
 8002ffc:	79d8      	ldrb	r0, [r3, #7]
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <alarm_mode+0xa0>)
 8003000:	7a1b      	ldrb	r3, [r3, #8]
 8003002:	3304      	adds	r3, #4
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <alarm_mode+0xa0>)
 8003008:	7a52      	ldrb	r2, [r2, #9]
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd f964 	bl	80002d8 <Set_alarm>
 8003010:	e008      	b.n	8003024 <alarm_mode+0x80>
		}
		else{
			Set_alarm(alarm_time.hour, alarm_time.min, alarm_time.sec);
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <alarm_mode+0xa4>)
 8003014:	79db      	ldrb	r3, [r3, #7]
 8003016:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <alarm_mode+0xa4>)
 8003018:	7a11      	ldrb	r1, [r2, #8]
 800301a:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <alarm_mode+0xa4>)
 800301c:	7a52      	ldrb	r2, [r2, #9]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd f95a 	bl	80002d8 <Set_alarm>
		}
		mode = DISPLAY_MODE;
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <alarm_mode+0xac>)
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
	}
	else{
		mode = ALARM_MODE;
	}
}
 800302a:	e002      	b.n	8003032 <alarm_mode+0x8e>
		mode = ALARM_MODE;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <alarm_mode+0xac>)
 800302e:	2216      	movs	r2, #22
 8003030:	701a      	strb	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200007e0 	.word	0x200007e0
 8003040:	08004a6c 	.word	0x08004a6c
 8003044:	20000c60 	.word	0x20000c60
 8003048:	20000c78 	.word	0x20000c78
 800304c:	20000c8a 	.word	0x20000c8a
 8003050:	20000c84 	.word	0x20000c84

08003054 <SysClockConfig>:
  *            VDD(V)                         = 3.3
  *            Flash Latency(WS)              = 0
  * @param  None
  * @retval None
  */
void SysClockConfig(void){
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
	 * 7.	Select the Clock Source and wait for it to be set.
	 ***********************************************************/

	/*1.ENABLE HSI and wait for HSE to become Ready*/
	/*Enable HSI*/
	RCC->CR |= RCC_CR_HSION;
 8003058:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <SysClockConfig+0x78>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <SysClockConfig+0x78>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6013      	str	r3, [r2, #0]

	/*Wait for HSI to become ready*/
	while(!(RCC->CR & RCC_CR_HSIRDY));
 8003064:	bf00      	nop
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <SysClockConfig+0x78>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f9      	beq.n	8003066 <SysClockConfig+0x12>

	/*2.Set the POWER ENABLE CLOCK*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003072:	4b16      	ldr	r3, [pc, #88]	; (80030cc <SysClockConfig+0x78>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <SysClockConfig+0x78>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]

	/*3.Configure the FLASH PREFETCH and the LATENCY Related Setting*/
	/*Enable the flash prefetch*/
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <SysClockConfig+0x7c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <SysClockConfig+0x7c>)
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	6013      	str	r3, [r2, #0]

	/*Wait for flash prefetch to become enable*/
	while (!(FLASH->ACR & FLASH_ACR_PRFTBS));
 800308a:	bf00      	nop
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <SysClockConfig+0x7c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f9      	beq.n	800308c <SysClockConfig+0x38>

	/*Set the flash latency*/
	FLASH->ACR |= FLASH_ACR_LATENCY_0;
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <SysClockConfig+0x7c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <SysClockConfig+0x7c>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6013      	str	r3, [r2, #0]

	/*4.Configure the PRESCALERS HCLK, PCLK1, PCLK2*/
	/*Set the AHB prescaler*/
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <SysClockConfig+0x78>)
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <SysClockConfig+0x78>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	6053      	str	r3, [r2, #4]

	/*Set the AHB1 prescaler*/
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <SysClockConfig+0x78>)
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <SysClockConfig+0x78>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	6053      	str	r3, [r2, #4]

	/*Set the AHB2 prescaler*/
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SysClockConfig+0x78>)
 80030b6:	4a05      	ldr	r2, [pc, #20]	; (80030cc <SysClockConfig+0x78>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	6053      	str	r3, [r2, #4]

	/*7.Select the Clock Source and wait for it to be set*/
	/*Select the Clock Source*/
	RCC->CFGR |= RCC_CFGR_SWS_HSI;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <SysClockConfig+0x78>)
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <SysClockConfig+0x78>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	6053      	str	r3, [r2, #4]

	/*Wait for clock source setting completely*/
	//while ((RCC->CFGR & ((1<<2) | (1<<3))));
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40022000 	.word	0x40022000

080030d4 <__NVIC_EnableIRQ>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4906      	ldr	r1, [pc, #24]	; (8003108 <__NVIC_EnableIRQ+0x34>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100

0800310c <RTC_clk_config>:
#include "rtc.h"

void RTC_clk_config(void){
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	 * 	6. Reset or release reset backup domain data by setting BDRST bit in RCC_BDCR register.
	 * 	7. Enable RTC clock by setting RTCEN bit in RTC_BDCR.
	 ***********************************************************/

	/*Enable the power interface clock by setting the PWREN bit in the RCC_APB1ENR register*/
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <RTC_clk_config+0x70>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <RTC_clk_config+0x70>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	61d3      	str	r3, [r2, #28]

	/*2.Enable the backup interface clock by setting the BKPEN bit in the RCC_APB1ENR register*/
	RCC->APB1ENR |= RCC_APB1ENR_BKPEN;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <RTC_clk_config+0x70>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4a16      	ldr	r2, [pc, #88]	; (800317c <RTC_clk_config+0x70>)
 8003122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003126:	61d3      	str	r3, [r2, #28]

	/*3.Set the DBP bit the Power Control register (PWR_CR) to enable access to the Backup registers and RTC*/
	PWR->CR |= PWR_CR_DBP;
 8003128:	4b15      	ldr	r3, [pc, #84]	; (8003180 <RTC_clk_config+0x74>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <RTC_clk_config+0x74>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	6013      	str	r3, [r2, #0]

	/*4.Select the RTC clock source  to LSI by setting RTCSEL in RCC_BDCR register*/
	RCC->BDCR |= RCC_BDCR_RTCSEL_LSI;
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <RTC_clk_config+0x70>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a10      	ldr	r2, [pc, #64]	; (800317c <RTC_clk_config+0x70>)
 800313a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313e:	6213      	str	r3, [r2, #32]

	/*5.Enable LSI by setting LSION bit in the RCC_CSR register*/
	/*Enable LSI*/
	RCC->CSR |= RCC_CSR_LSION;
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <RTC_clk_config+0x70>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <RTC_clk_config+0x70>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6253      	str	r3, [r2, #36]	; 0x24

	/*Wait until the LSION bit is set completely*/
	while(!(RCC->CSR& RCC_CSR_LSIRDY));
 800314c:	bf00      	nop
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <RTC_clk_config+0x70>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f9      	beq.n	800314e <RTC_clk_config+0x42>

	/*6.Release reset backup domain data by setting BDRST bit in RCC_BDCR register*/
	RCC->BDCR &= ~RCC_BDCR_BDRST;
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <RTC_clk_config+0x70>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <RTC_clk_config+0x70>)
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	6213      	str	r3, [r2, #32]

	/*7.Enable RTC clock by setting RTCEN bit in RTC_BDCR*/
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <RTC_clk_config+0x70>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <RTC_clk_config+0x70>)
 800316c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003170:	6213      	str	r3, [r2, #32]
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000

08003184 <RTC_config_start>:
void RTC_config_start(void){
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	/***********************Steps followed***********************
	 * 	1. Poll RTOFF in the RTC_CRL register, wait until its value goes to ‘1’.
	 *	2. Set the CNF bit to enter configuration mode in the RTC_CRL register.
	 ***********************************************************/

	BKP_write_enable();
 8003188:	f000 f878 	bl	800327c <BKP_write_enable>
	while(!(RTC->CRL & RTC_CRL_RTOFF));
 800318c:	bf00      	nop
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <RTC_config_start+0x34>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f9      	beq.n	800318e <RTC_config_start+0xa>

	/*1.Poll RTOFF in the RTC_CRL register, wait until its value goes to ‘1’*/
	while(!(RTC->CRL & RTC_CRL_RTOFF));
 800319a:	bf00      	nop
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <RTC_config_start+0x34>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f9      	beq.n	800319c <RTC_config_start+0x18>

	/*2.Set the CNF bit to enter configuration mode in the RTC_CRL register*/
	RTC->CRL |= RTC_CRL_CNF;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <RTC_config_start+0x34>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <RTC_config_start+0x34>)
 80031ae:	f043 0310 	orr.w	r3, r3, #16
 80031b2:	6053      	str	r3, [r2, #4]
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40002800 	.word	0x40002800

080031bc <RTC_config_cmpt>:
void RTC_config_cmpt(void){
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	 *	1. Clear the CNF bit to exit configuration mode in the RTC_CRL register.
	 *	2. Poll RTOFF in the RTC_CRL register, wait until its value goes to ‘1’ to check the end of the write operation.
	 ***********************************************************/

	/*1.Clear the CNF bit to exit configuration mode in the RTC_CRL register*/
	RTC->CRL &= ~RTC_CRL_CNF;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <RTC_config_cmpt+0x34>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <RTC_config_cmpt+0x34>)
 80031c6:	f023 0310 	bic.w	r3, r3, #16
 80031ca:	6053      	str	r3, [r2, #4]

	/*2.Poll RTOFF in the RTC_CRL register, wait until its value goes to ‘1’ to check the end of the write operation*/
	while(!(RTC->CRL & RTC_CRL_RTOFF));
 80031cc:	bf00      	nop
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <RTC_config_cmpt+0x34>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f9      	beq.n	80031ce <RTC_config_cmpt+0x12>

	while(!(RTC->CRL & RTC_CRL_RTOFF));
 80031da:	bf00      	nop
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <RTC_config_cmpt+0x34>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f9      	beq.n	80031dc <RTC_config_cmpt+0x20>
	BKP_write_disable();
 80031e8:	f000 f856 	bl	8003298 <BKP_write_disable>
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40002800 	.word	0x40002800

080031f4 <RTC_interrupt_en>:

	/*3.Call the RTC_config_cmpt function*/
	RTC_config_cmpt();
}

void RTC_interrupt_en(){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	 *	2. Enable RTC interrupts.
	 * 	3. Call the RTC_config_cmpt function.
	 ***********************************************************/

	/*1.Call the RTC_config_start function*/
	RTC_config_start();
 80031f8:	f7ff ffc4 	bl	8003184 <RTC_config_start>

	/*2.Enable RTC interrupts*/
	/*Enable Alarm interrupt by unmasked ALRIE bit in RTC_CRH*/
	RTC->CRH |= RTC_CRH_ALRIE;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <RTC_interrupt_en+0x24>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a05      	ldr	r2, [pc, #20]	; (8003218 <RTC_interrupt_en+0x24>)
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(RTC_IRQn);
 8003208:	2003      	movs	r0, #3
 800320a:	f7ff ff63 	bl	80030d4 <__NVIC_EnableIRQ>

	/*3.Call the RTC_config_cmpt function*/
	RTC_config_cmpt();
 800320e:	f7ff ffd5 	bl	80031bc <RTC_config_cmpt>
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40002800 	.word	0x40002800

0800321c <RTC_set_alarm>:

void RTC_set_alarm(uint32_t time){
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	 *	2. Set alarm time in RTC_ALRL and RTC_ALRH register.
	 * 	3. Call the RTC_config_cmpt function.
	 ***********************************************************/

	/*1.Call the RTC_config_start function*/
	RTC_config_start();
 8003224:	f7ff ffae 	bl	8003184 <RTC_config_start>

	/*2.Set alarm time in RTC_ALRL and RTC_ALRH register*/
	RTC->ALRL = (uint16_t)time;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	b29a      	uxth	r2, r3
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <RTC_set_alarm+0x2c>)
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->ALRH = (uint16_t)(time>>16);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	b29a      	uxth	r2, r3
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <RTC_set_alarm+0x2c>)
 8003238:	621a      	str	r2, [r3, #32]

	/*3.Call the RTC_config_cmpt function*/
	RTC_config_cmpt();
 800323a:	f7ff ffbf 	bl	80031bc <RTC_config_cmpt>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40002800 	.word	0x40002800

0800324c <RTC_set_counter>:
void RTC_set_counter(uint32_t cnt){
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	RTC_config_start();
 8003254:	f7ff ff96 	bl	8003184 <RTC_config_start>
	RTC->CNTL = (uint16_t)cnt;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	b29a      	uxth	r2, r3
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <RTC_set_counter+0x2c>)
 800325e:	61da      	str	r2, [r3, #28]
	RTC->CNTH = (uint16_t)cnt>>16;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	b29b      	uxth	r3, r3
 8003264:	141a      	asrs	r2, r3, #16
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <RTC_set_counter+0x2c>)
 8003268:	619a      	str	r2, [r3, #24]
	RTC_config_cmpt();
 800326a:	f7ff ffa7 	bl	80031bc <RTC_config_cmpt>

}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40002800 	.word	0x40002800

0800327c <BKP_write_enable>:

void BKP_write_enable(void){
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
	PWR->CR |= PWR_CR_DBP;
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <BKP_write_enable+0x18>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a03      	ldr	r2, [pc, #12]	; (8003294 <BKP_write_enable+0x18>)
 8003286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328a:	6013      	str	r3, [r2, #0]
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40007000 	.word	0x40007000

08003298 <BKP_write_disable>:
void BKP_write_disable(void){
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
	PWR->CR &= ~PWR_CR_DBP;
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <BKP_write_disable+0x18>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a03      	ldr	r2, [pc, #12]	; (80032b0 <BKP_write_disable+0x18>)
 80032a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a6:	6013      	str	r3, [r2, #0]
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40007000 	.word	0x40007000

080032b4 <Get_time>:

	/*Change the value of counter register*/
	uint32_t temp = hour*60*60 + min*60 + sec;
	RTC_set_counter(temp);
}
void Get_time(t_time *time){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	uint32_t temp = (uint32_t)RTC->CNTL | (uint32_t)(RTC->CNTH <<16);
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <Get_time+0xec>)
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <Get_time+0xec>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

	/*Restart counter register if its value > 86400 (1 day)*/
	if(temp > 86400){
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <Get_time+0xf0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d937      	bls.n	8003342 <Get_time+0x8e>
		/*Reset counter register*/
		RTC_set_counter(0);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f7ff ffba 	bl	800324c <RTC_set_counter>

		/*Update day, date*/
		time->day++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	799b      	ldrb	r3, [r3, #6]
 80032dc:	3301      	adds	r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	719a      	strb	r2, [r3, #6]
		time->date++;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	795b      	ldrb	r3, [r3, #5]
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	715a      	strb	r2, [r3, #5]

		/*Check if there are acceptable value */
		Check_condition(time, DAY);
 80032f0:	2103      	movs	r1, #3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f85c 	bl	80033b0 <Check_condition>
		Check_condition(time, DATE);
 80032f8:	2102      	movs	r1, #2
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f858 	bl	80033b0 <Check_condition>

		/*Update month if up month flag value goes to ‘1’*/
		if(time->flag.up_mon == 1){
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7a9b      	ldrb	r3, [r3, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d114      	bne.n	8003334 <Get_time+0x80>
			/*Clear flag*/
			time->flag.up_mon = 0;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	729a      	strb	r2, [r3, #10]

			/*Update month*/
			time->mon++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	791b      	ldrb	r3, [r3, #4]
 8003314:	3301      	adds	r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	711a      	strb	r2, [r3, #4]

			/*Check if there is acceptable value*/
			Check_condition(time, MON);
 800331c:	2101      	movs	r1, #1
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f846 	bl	80033b0 <Check_condition>

			/*Update year if up year flag value goes to ‘1’*/
			/*Clear flag*/
			time->flag.up_year = 0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	72da      	strb	r2, [r3, #11]

			/*Update year*/
			time->year++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
		}

		/*Change the value for temp*/
		temp = (uint32_t)RTC->CNTL | (uint32_t)(RTC->CNTH <<16);
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <Get_time+0xec>)
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <Get_time+0xec>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
	}

	/*Calculate time current*/
	time->hour = (uint8_t)(temp / (60 * 60));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <Get_time+0xf4>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	b2da      	uxtb	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	71da      	strb	r2, [r3, #7]
	temp = temp % (60 * 60);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <Get_time+0xf4>)
 8003356:	fba2 1203 	umull	r1, r2, r2, r3
 800335a:	0ad2      	lsrs	r2, r2, #11
 800335c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003360:	fb01 f202 	mul.w	r2, r1, r2
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
	time->min = (uint8_t)(temp / 60);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a10      	ldr	r2, [pc, #64]	; (80033ac <Get_time+0xf8>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2da      	uxtb	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	721a      	strb	r2, [r3, #8]
	temp = temp % 60;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <Get_time+0xf8>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	0959      	lsrs	r1, r3, #5
 8003382:	460b      	mov	r3, r1
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a5b      	subs	r3, r3, r1
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	60fb      	str	r3, [r7, #12]
	time->sec = (uint8_t)temp;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	725a      	strb	r2, [r3, #9]
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40002800 	.word	0x40002800
 80033a4:	00015180 	.word	0x00015180
 80033a8:	91a2b3c5 	.word	0x91a2b3c5
 80033ac:	88888889 	.word	0x88888889

080033b0 <Check_condition>:

void Check_condition(t_time *time, uint8_t option){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
	switch (option) {
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	f000 80a7 	beq.w	8003512 <Check_condition+0x162>
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	f300 80ba 	bgt.w	800353e <Check_condition+0x18e>
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	f000 80a9 	beq.w	8003522 <Check_condition+0x172>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f040 80b4 	bne.w	800353e <Check_condition+0x18e>
		case DATE:
			if( (time->mon == 1) | (time->mon == 3) | (time->mon == 5) | (time->mon == 7) | (time->mon == 8) | (time->mon == 10) | (time->mon == 12)){
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	791b      	ldrb	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	791b      	ldrb	r3, [r3, #4]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	791b      	ldrb	r3, [r3, #4]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	7912      	ldrb	r2, [r2, #4]
 800340c:	2a07      	cmp	r2, #7
 800340e:	bf0c      	ite	eq
 8003410:	2201      	moveq	r2, #1
 8003412:	2200      	movne	r2, #0
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	4313      	orrs	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	7912      	ldrb	r2, [r2, #4]
 800341c:	2a08      	cmp	r2, #8
 800341e:	bf0c      	ite	eq
 8003420:	2201      	moveq	r2, #1
 8003422:	2200      	movne	r2, #0
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	4313      	orrs	r3, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	7912      	ldrb	r2, [r2, #4]
 800342c:	2a0a      	cmp	r2, #10
 800342e:	bf0c      	ite	eq
 8003430:	2201      	moveq	r2, #1
 8003432:	2200      	movne	r2, #0
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	4313      	orrs	r3, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	7912      	ldrb	r2, [r2, #4]
 800343c:	2a0c      	cmp	r2, #12
 800343e:	bf0c      	ite	eq
 8003440:	2201      	moveq	r2, #1
 8003442:	2200      	movne	r2, #0
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	4313      	orrs	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d07a      	beq.n	8003542 <Check_condition+0x192>
				if (time->date > 31){
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	795b      	ldrb	r3, [r3, #5]
 8003450:	2b1f      	cmp	r3, #31
 8003452:	d908      	bls.n	8003466 <Check_condition+0xb6>
					/*Change the acceptable value*/
					time->date = 1;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	715a      	strb	r2, [r3, #5]

					/*Set the update month flag*/
					Set_flag(time->flag.up_mon);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	7a9b      	ldrb	r3, [r3, #10]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f877 	bl	8003554 <Set_flag>
				}
				if ( (time->mon == 4) | (time->mon == 6) | (time->mon == 9) | (time->mon == 11)){
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	791b      	ldrb	r3, [r3, #4]
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2da      	uxtb	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	2b06      	cmp	r3, #6
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4313      	orrs	r3, r2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	791b      	ldrb	r3, [r3, #4]
 800348c:	2b09      	cmp	r3, #9
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	7912      	ldrb	r2, [r2, #4]
 800349c:	2a0b      	cmp	r2, #11
 800349e:	bf0c      	ite	eq
 80034a0:	2201      	moveq	r2, #1
 80034a2:	2200      	movne	r2, #0
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	4313      	orrs	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <Check_condition+0x116>
					if (time->date > 30){
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	795b      	ldrb	r3, [r3, #5]
 80034b0:	2b1e      	cmp	r3, #30
 80034b2:	d908      	bls.n	80034c6 <Check_condition+0x116>
						/*Change the acceptable value*/
						time->date = 1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	715a      	strb	r2, [r3, #5]

						/*Set the update month flag*/
						Set_flag(time->flag.up_mon);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7a9b      	ldrb	r3, [r3, #10]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f847 	bl	8003554 <Set_flag>
					}
				}
				if (time->mon == 2){
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	791b      	ldrb	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d139      	bne.n	8003542 <Check_condition+0x192>
					if (time->year % 4 == 0){
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <Check_condition+0x146>
						if (time->date > 29){
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	795b      	ldrb	r3, [r3, #5]
 80034de:	2b1d      	cmp	r3, #29
 80034e0:	d92f      	bls.n	8003542 <Check_condition+0x192>
							/*Change the acceptable value*/
							time->date = 1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	715a      	strb	r2, [r3, #5]

							/*Set the update month flag*/
							Set_flag(time->flag.up_mon);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7a9b      	ldrb	r3, [r3, #10]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f830 	bl	8003554 <Set_flag>
							Set_flag(time->flag.up_mon);
						}
					}
				}
			}
			break;
 80034f4:	e025      	b.n	8003542 <Check_condition+0x192>
						if (time->date > 28){
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	795b      	ldrb	r3, [r3, #5]
 80034fa:	2b1c      	cmp	r3, #28
 80034fc:	d921      	bls.n	8003542 <Check_condition+0x192>
							time->date = 1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	715a      	strb	r2, [r3, #5]
							Set_flag(time->flag.up_mon);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7a9b      	ldrb	r3, [r3, #10]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f822 	bl	8003554 <Set_flag>
			break;
 8003510:	e017      	b.n	8003542 <Check_condition+0x192>
		case DAY:
			if(time->day > 7){
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	799b      	ldrb	r3, [r3, #6]
 8003516:	2b07      	cmp	r3, #7
 8003518:	d915      	bls.n	8003546 <Check_condition+0x196>
				/*Change the acceptable value*/
				time->day = 1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	719a      	strb	r2, [r3, #6]
			}
			break;
 8003520:	e011      	b.n	8003546 <Check_condition+0x196>
		case MON:
			if(time->mon > 12){
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d90f      	bls.n	800354a <Check_condition+0x19a>
				/*Change the acceptable value*/
				time->mon = 1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	711a      	strb	r2, [r3, #4]

				/*Set the update year flag*/
				Set_flag(time->flag.up_year);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7adb      	ldrb	r3, [r3, #11]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f80c 	bl	8003554 <Set_flag>
			}
			break;
 800353c:	e005      	b.n	800354a <Check_condition+0x19a>
		default:
			/*nothing*/
			break;
 800353e:	bf00      	nop
 8003540:	e004      	b.n	800354c <Check_condition+0x19c>
			break;
 8003542:	bf00      	nop
 8003544:	e002      	b.n	800354c <Check_condition+0x19c>
			break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <Check_condition+0x19c>
			break;
 800354a:	bf00      	nop
	}
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <Set_flag>:

void Set_flag(uint8_t flag){
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
	flag = 1;
 800355e:	2301      	movs	r3, #1
 8003560:	71fb      	strb	r3, [r7, #7]
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <Toggle_VCOM>:
#include "sharp96.h"

static uint8_t VCom;

static uint8_t Toggle_VCOM(void){
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	VCom ^= LCD_VCOM;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <Toggle_VCOM+0x20>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <Toggle_VCOM+0x20>)
 800357c:	701a      	strb	r2, [r3, #0]
	return VCom;
 800357e:	4b03      	ldr	r3, [pc, #12]	; (800358c <Toggle_VCOM+0x20>)
 8003580:	781b      	ldrb	r3, [r3, #0]
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000c9c 	.word	0x20000c9c

08003590 <LCD_send_byte>:

static void LCD_send_byte(uint8_t data){
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	SPI1_transmit_data(&data, 1);
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa02 	bl	80039a8 <SPI1_transmit_data>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <LCD_send_cmd>:

static void LCD_send_cmd(uint8_t cmd){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
	cmd |= Toggle_VCOM();
 80035b6:	f7ff ffd9 	bl	800356c <Toggle_VCOM>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	71fb      	strb	r3, [r7, #7]
	SPI1_transmit_data(&cmd, 1);
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	2101      	movs	r1, #1
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f9ec 	bl	80039a8 <SPI1_transmit_data>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <Reverse_data>:

static uint8_t Reverse_data(uint8_t data){
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
	data = ((data & 0x80) >> 7) | ((data & 0x40) >> 5) | ((data & 0x20) >> 3) | ((data & 0x10) >> 1)
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	09db      	lsrs	r3, r3, #7
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	b25a      	sxtb	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	115b      	asrs	r3, r3, #5
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	b25b      	sxtb	r3, r3
 80035f6:	4313      	orrs	r3, r2
 80035f8:	b25a      	sxtb	r2, r3
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	10db      	asrs	r3, r3, #3
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	b25b      	sxtb	r3, r3
 8003606:	4313      	orrs	r3, r2
 8003608:	b25a      	sxtb	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	105b      	asrs	r3, r3, #1
 800360e:	b25b      	sxtb	r3, r3
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	b25b      	sxtb	r3, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	b25a      	sxtb	r2, r3
			| ((data & 0x01) << 7) | ((data & 0x02) << 5) | ((data & 0x04) << 3) | ((data & 0x08) << 1);
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	01db      	lsls	r3, r3, #7
 800361e:	b25b      	sxtb	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b25a      	sxtb	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	015b      	lsls	r3, r3, #5
 8003628:	b25b      	sxtb	r3, r3
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	b25b      	sxtb	r3, r3
 8003630:	4313      	orrs	r3, r2
 8003632:	b25a      	sxtb	r2, r3
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	b25b      	sxtb	r3, r3
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	b25b      	sxtb	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b25a      	sxtb	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	b25b      	sxtb	r3, r3
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	b25b      	sxtb	r3, r3
 8003650:	4313      	orrs	r3, r2
 8003652:	b25b      	sxtb	r3, r3
	data = ((data & 0x80) >> 7) | ((data & 0x40) >> 5) | ((data & 0x20) >> 3) | ((data & 0x10) >> 1)
 8003654:	71fb      	strb	r3, [r7, #7]
	return data;
 8003656:	79fb      	ldrb	r3, [r7, #7]
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <LCD_send_toggle_VCOM>:
void LCD_send_toggle_VCOM(void){
 8003662:	b580      	push	{r7, lr}
 8003664:	af00      	add	r7, sp, #0
	LCD_transmit_begin();
 8003666:	f000 f832 	bl	80036ce <LCD_transmit_begin>
	LCD_send_cmd(LCD_CM_DISPLAY);
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff ff9e 	bl	80035ac <LCD_send_cmd>
	LCD_send_byte(LCD_TRAILER_BYTE);
 8003670:	2000      	movs	r0, #0
 8003672:	f7ff ff8d 	bl	8003590 <LCD_send_byte>
	LCD_transmit_cmplt();
 8003676:	f000 f833 	bl	80036e0 <LCD_transmit_cmplt>
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}

0800367e <LCD_display>:

void LCD_display(void){
 800367e:	b580      	push	{r7, lr}
 8003680:	af00      	add	r7, sp, #0
	LCD_send_toggle_VCOM();
 8003682:	f7ff ffee 	bl	8003662 <LCD_send_toggle_VCOM>
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}

0800368a <LCD_init>:

void LCD_init(void){
 800368a:	b580      	push	{r7, lr}
 800368c:	af00      	add	r7, sp, #0
	/*Configure LCD_EN and LCD_CS pins to output mode*/
	GPIO_Pin_Configure(LCD_EN, OUTPUT_10MHZ, OUTPUT_GP_PP);
 800368e:	2300      	movs	r3, #0
 8003690:	2201      	movs	r2, #1
 8003692:	2101      	movs	r1, #1
 8003694:	2004      	movs	r0, #4
 8003696:	f7fc fe4d 	bl	8000334 <GPIO_Pin_Configure>
	GPIO_Pin_Configure(LCD_CS, OUTPUT_10MHZ, OUTPUT_GP_PP);
 800369a:	2300      	movs	r3, #0
 800369c:	2201      	movs	r2, #1
 800369e:	2102      	movs	r1, #2
 80036a0:	2004      	movs	r0, #4
 80036a2:	f7fc fe47 	bl	8000334 <GPIO_Pin_Configure>
	GPIO_set_out_pin(LCD_CS, LOW);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2102      	movs	r1, #2
 80036aa:	2004      	movs	r0, #4
 80036ac:	f7fc ff1a 	bl	80004e4 <GPIO_set_out_pin>

	/*Enable LCD*/
	LCD_enable();
 80036b0:	f000 f804 	bl	80036bc <LCD_enable>

	/*Clear screen*/
	LCD_clear_screen();
 80036b4:	f000 f81d 	bl	80036f2 <LCD_clear_screen>
}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}

080036bc <LCD_enable>:

void LCD_enable(void){
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	/*Enable LCD by setting LCD_EN pin to HIGH*/
	GPIO_set_out_pin(LCD_EN, HIGH);
 80036c0:	2201      	movs	r2, #1
 80036c2:	2101      	movs	r1, #1
 80036c4:	2004      	movs	r0, #4
 80036c6:	f7fc ff0d 	bl	80004e4 <GPIO_set_out_pin>
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}

080036ce <LCD_transmit_begin>:
void LCD_disable(void){
	/*Disable LCD by setting LCD_EN pin to LOW*/
	GPIO_set_out_pin(LCD_EN, LOW);
}

void LCD_transmit_begin(void){
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
	GPIO_set_out_pin(LCD_CS, HIGH);
 80036d2:	2201      	movs	r2, #1
 80036d4:	2102      	movs	r1, #2
 80036d6:	2004      	movs	r0, #4
 80036d8:	f7fc ff04 	bl	80004e4 <GPIO_set_out_pin>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <LCD_transmit_cmplt>:

void LCD_transmit_cmplt(void){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	GPIO_set_out_pin(LCD_CS, LOW);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2102      	movs	r1, #2
 80036e8:	2004      	movs	r0, #4
 80036ea:	f7fc fefb 	bl	80004e4 <GPIO_set_out_pin>
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <LCD_clear_screen>:

void LCD_clear_screen(void){
 80036f2:	b580      	push	{r7, lr}
 80036f4:	af00      	add	r7, sp, #0
	LCD_transmit_begin();
 80036f6:	f7ff ffea 	bl	80036ce <LCD_transmit_begin>

	LCD_send_cmd(LCD_CM_CL);
 80036fa:	2020      	movs	r0, #32
 80036fc:	f7ff ff56 	bl	80035ac <LCD_send_cmd>
	LCD_send_byte(LCD_TRAILER_BYTE);
 8003700:	2000      	movs	r0, #0
 8003702:	f7ff ff45 	bl	8003590 <LCD_send_byte>

	LCD_transmit_cmplt();
 8003706:	f7ff ffeb 	bl	80036e0 <LCD_transmit_cmplt>
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}

0800370e <LCD_send_image>:
void LCD_clear_data(uint8_t data[]){
	for (int i = 0; i < LCD_BUF_SIZE; i++){
		data[i] = 0xff;
	}
}
void LCD_send_image(uint8_t data[LCD_BUF_SIZE]){
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
	LCD_transmit_begin();
 8003716:	f7ff ffda 	bl	80036ce <LCD_transmit_begin>

	/*Send 1 byte for write command*/
	LCD_send_cmd(LCD_CM_WR);
 800371a:	2080      	movs	r0, #128	; 0x80
 800371c:	f7ff ff46 	bl	80035ac <LCD_send_cmd>


	for(uint8_t line = 0; line < LCD_VERTICAL_MAX; line++){
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e027      	b.n	8003776 <LCD_send_image+0x68>
		/*Send 1 byte for the line number*/
		LCD_send_byte(Reverse_data(line + 1));
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3301      	adds	r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff53 	bl	80035d8 <Reverse_data>
 8003732:	4603      	mov	r3, r0
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff2b 	bl	8003590 <LCD_send_byte>

		/*Send LCD_BYTES_LINE bytes data for 1 line*/
		for(int i = 0; i < LCD_BYTES_LINE; i++){
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	e011      	b.n	8003764 <LCD_send_image+0x56>
			LCD_send_byte(data[line * LCD_BYTES_LINE + i]);
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4413      	add	r3, r2
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff19 	bl	8003590 <LCD_send_byte>
		for(int i = 0; i < LCD_BYTES_LINE; i++){
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b0b      	cmp	r3, #11
 8003768:	ddea      	ble.n	8003740 <LCD_send_image+0x32>
		}

		/*Send 1 trailer byte to finish 1 line*/
		LCD_send_byte(LCD_TRAILER_BYTE);
 800376a:	2000      	movs	r0, #0
 800376c:	f7ff ff10 	bl	8003590 <LCD_send_byte>
	for(uint8_t line = 0; line < LCD_VERTICAL_MAX; line++){
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	3301      	adds	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b5f      	cmp	r3, #95	; 0x5f
 800377a:	d9d4      	bls.n	8003726 <LCD_send_image+0x18>
	}
	/*Send another trailer byte to complete the process*/
	LCD_send_byte(LCD_TRAILER_BYTE);
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff ff07 	bl	8003590 <LCD_send_byte>

	LCD_transmit_cmplt();
 8003782:	f7ff ffad 	bl	80036e0 <LCD_transmit_cmplt>
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <LCD_get_char8x8>:
	LCD_send_byte(LCD_TRAILER_BYTE);
	LCD_send_byte(LCD_TRAILER_BYTE);

	LCD_transmit_cmplt();
}
void LCD_get_char8x8(uint8_t x, uint8_t y, uint8_t data[LCD_BUF_SIZE], int ch){
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60ba      	str	r2, [r7, #8]
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	460b      	mov	r3, r1
 80037a0:	73bb      	strb	r3, [r7, #14]
	uint16_t lcd_pos, font_pos;
	for (int i = y; i < (y + 8); i++){
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e03b      	b.n	8003820 <LCD_get_char8x8+0x90>
		lcd_pos = (y - 1) * LCD_BYTES_LINE * FONT_SIZE_8x8 + (i - y) * LCD_BYTES_LINE + (x - 1);
 80037a8:	7bbb      	ldrb	r3, [r7, #14]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	0052      	lsls	r2, r2, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	7bbb      	ldrb	r3, [r7, #14]
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	1acb      	subs	r3, r1, r3
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4619      	mov	r1, r3
 80037c2:	0049      	lsls	r1, r1, #1
 80037c4:	440b      	add	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	827b      	strh	r3, [r7, #18]
		font_pos = (ch - FONT_ASCII_OFFSET) * FONT_SIZE_8x8 + (i - y);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3b20      	subs	r3, #32
 80037de:	b29b      	uxth	r3, r3
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	b299      	uxth	r1, r3
 80037e8:	7bbb      	ldrb	r3, [r7, #14]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	1acb      	subs	r3, r1, r3
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	823b      	strh	r3, [r7, #16]
		data[lcd_pos] &= ~font8x8[font_pos];
 80037f4:	8a7b      	ldrh	r3, [r7, #18]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b25a      	sxtb	r2, r3
 80037fe:	8a3b      	ldrh	r3, [r7, #16]
 8003800:	490d      	ldr	r1, [pc, #52]	; (8003838 <LCD_get_char8x8+0xa8>)
 8003802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003806:	b25b      	sxtb	r3, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	b25b      	sxtb	r3, r3
 800380c:	4013      	ands	r3, r2
 800380e:	b259      	sxtb	r1, r3
 8003810:	8a7b      	ldrh	r3, [r7, #18]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4413      	add	r3, r2
 8003816:	b2ca      	uxtb	r2, r1
 8003818:	701a      	strb	r2, [r3, #0]
	for (int i = y; i < (y + 8); i++){
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	7bbb      	ldrb	r3, [r7, #14]
 8003822:	3307      	adds	r3, #7
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	429a      	cmp	r2, r3
 8003828:	ddbe      	ble.n	80037a8 <LCD_get_char8x8+0x18>
	}
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000

0800383c <LCD_get_string>:
void LCD_get_string(uint8_t x_start, uint8_t y_start, uint8_t data[LCD_BUF_SIZE], char str[]){
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60ba      	str	r2, [r7, #8]
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	4603      	mov	r3, r0
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	460b      	mov	r3, r1
 800384c:	73bb      	strb	r3, [r7, #14]
	uint8_t x, y, n = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	77fb      	strb	r3, [r7, #31]
	char ch;
	for(int i = 0; i < strlen(str); i++){
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e028      	b.n	80038aa <LCD_get_string+0x6e>
		strncpy(&ch, str + i, 1);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	18d1      	adds	r1, r2, r3
 800385e:	f107 0315 	add.w	r3, r7, #21
 8003862:	2201      	movs	r2, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fba7 	bl	8003fb8 <strncpy>
		x = x_start + i - LCD_BYTES_LINE * n;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	4413      	add	r3, r2
 8003872:	b2da      	uxtb	r2, r3
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	4619      	mov	r1, r3
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	1acb      	subs	r3, r1, r3
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	b2db      	uxtb	r3, r3
 8003880:	4413      	add	r3, r2
 8003882:	75fb      	strb	r3, [r7, #23]
		y = y_start + n;
 8003884:	7bba      	ldrb	r2, [r7, #14]
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	4413      	add	r3, r2
 800388a:	75bb      	strb	r3, [r7, #22]
		if (x >= (LCD_BYTES_LINE)){
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b0b      	cmp	r3, #11
 8003890:	d902      	bls.n	8003898 <LCD_get_string+0x5c>
			n++;
 8003892:	7ffb      	ldrb	r3, [r7, #31]
 8003894:	3301      	adds	r3, #1
 8003896:	77fb      	strb	r3, [r7, #31]
		}
		LCD_get_char8x8(x, y, data, ch);
 8003898:	7d7b      	ldrb	r3, [r7, #21]
 800389a:	7db9      	ldrb	r1, [r7, #22]
 800389c:	7df8      	ldrb	r0, [r7, #23]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	f7ff ff76 	bl	8003790 <LCD_get_char8x8>
	for(int i = 0; i < strlen(str); i++){
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fc fc60 	bl	8000170 <strlen>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8cf      	bhi.n	8003858 <LCD_get_string+0x1c>
	}
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <SPI1_pin_init>:
#include "spi.h"

void SPI1_pin_init(void){
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
	/*Configure SPI1 pin to alternative mode*/
	GPIO_Pin_Configure(SPI1_MOSI, OUTPUT_10MHZ, OUTPUT_AF_PP);
 80038c6:	2308      	movs	r3, #8
 80038c8:	2201      	movs	r2, #1
 80038ca:	2107      	movs	r1, #7
 80038cc:	2004      	movs	r0, #4
 80038ce:	f7fc fd31 	bl	8000334 <GPIO_Pin_Configure>
	GPIO_Pin_Configure(SPI1_SCK, OUTPUT_10MHZ, OUTPUT_AF_PP);
 80038d2:	2308      	movs	r3, #8
 80038d4:	2201      	movs	r2, #1
 80038d6:	2105      	movs	r1, #5
 80038d8:	2004      	movs	r0, #4
 80038da:	f7fc fd2b 	bl	8000334 <GPIO_Pin_Configure>
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <SPI1_set_MSB>:
void SPI1_set_LSB(void){
	SPI1->CR1 |= SPI_CR1_LSBFIRST;
}

void SPI1_set_MSB(void){
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	SPI1->CR1 &= ~SPI_CR1_LSBFIRST;
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <SPI1_set_MSB+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a03      	ldr	r2, [pc, #12]	; (80038fc <SPI1_set_MSB+0x18>)
 80038ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f2:	6013      	str	r3, [r2, #0]
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40013000 	.word	0x40013000

08003900 <SPI1_enable>:

void SPI1_enable(void){
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
	SPI1->CR1 |= SPI_CR1_SPE;
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SPI1_enable+0x18>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a03      	ldr	r2, [pc, #12]	; (8003918 <SPI1_enable+0x18>)
 800390a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40013000 	.word	0x40013000

0800391c <SPI1_master_config>:

void SPI1_disable(void){
	SPI1->CR1 &= ~SPI_CR1_SPE;

}
void SPI1_master_config(void){
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	 * 3. Configure the Control Register 2 (CR2).
	 * 4. Reset the SPI data register.
	 ***********************************************************/

	/*1.Enable clock to access SPI by setting SPI1EN in RCC_APB2ENR register*/
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8003920:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <SPI1_master_config+0x84>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <SPI1_master_config+0x84>)
 8003926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800392a:	6193      	str	r3, [r2, #24]

	/*2.Configure the Control Register 1 (CR1)*/
	/*2.1.Select the serial clock baud rate by setting the BR[2:0] bits in SPI_CR1 register*/
	/*011: fPCLK/8*/
	SPI1->CR1 &= ~(SPI_CR1_BR_2);
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <SPI1_master_config+0x88>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <SPI1_master_config+0x88>)
 8003932:	f023 0320 	bic.w	r3, r3, #32
 8003936:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1 ;
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <SPI1_master_config+0x88>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <SPI1_master_config+0x88>)
 800393e:	f043 0318 	orr.w	r3, r3, #24
 8003942:	6013      	str	r3, [r2, #0]

	/*2.2.Select relationships between the data transfer and the serial clock by setting CPOL, CPHA bits in SPI_CR1 register*/
	SPI1->CR1 &= ~SPI_CR1_CPOL;
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <SPI1_master_config+0x88>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a16      	ldr	r2, [pc, #88]	; (80039a4 <SPI1_master_config+0x88>)
 800394a:	f023 0302 	bic.w	r3, r3, #2
 800394e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~SPI_CR1_CPHA;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <SPI1_master_config+0x88>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <SPI1_master_config+0x88>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6013      	str	r3, [r2, #0]

	/*2.3.Select 8-bit data frame format by setting DFF bit in SPI_CR1 register*/
	SPI1->CR1 &= ~SPI_CR1_DFF;
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <SPI1_master_config+0x88>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <SPI1_master_config+0x88>)
 8003962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003966:	6013      	str	r3, [r2, #0]

	/*2.4.Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format*/
	SPI1_set_MSB();
 8003968:	f7ff ffbc 	bl	80038e4 <SPI1_set_MSB>

	/*2.5.Select the master mode for mcu by setting MSTR bit SPI_CR1 register*/
	SPI1->CR1 |= SPI_CR1_MSTR;
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <SPI1_master_config+0x88>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <SPI1_master_config+0x88>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6013      	str	r3, [r2, #0]

	/*2.6.Set SSM and SSI if select software slave management*/
	SPI1->CR1 |= SPI_CR1_SSM;
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <SPI1_master_config+0x88>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <SPI1_master_config+0x88>)
 800397e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003982:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <SPI1_master_config+0x88>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <SPI1_master_config+0x88>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]

	/*3.Configure the Control Register 2 (CR2)*/
	SPI1->CR2 = 0;
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <SPI1_master_config+0x88>)
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]

	/*4.Reset the SPI data register.*/
	SPI1->DR = 0;
 8003996:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <SPI1_master_config+0x88>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40013000 	.word	0x40013000

080039a8 <SPI1_transmit_data>:

void SPI1_transmit_data(uint8_t *data, uint8_t size){
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
	 * 2. Write the data to the Data Register.
	 * 3. Wait for the BSY bit to reset in Status Register.
	 * 4. Clear the Overrun flag by reading DR and SR.
	************************************************/

	for(int i = 0; i < size; i++){
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e00f      	b.n	80039da <SPI1_transmit_data+0x32>
		/*1.Wait for the TXE bit to set in the Status Register*/
		while(!((SPI1->SR & SPI_SR_TXE) == SPI_SR_TXE)){}
 80039ba:	bf00      	nop
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <SPI1_transmit_data+0x60>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d1f9      	bne.n	80039bc <SPI1_transmit_data+0x14>

		/*2.Write the data to the Data Register*/
		SPI1->DR = *(data + i);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <SPI1_transmit_data+0x60>)
 80039d2:	60da      	str	r2, [r3, #12]
	for(int i = 0; i < size; i++){
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	429a      	cmp	r2, r3
 80039e0:	dbeb      	blt.n	80039ba <SPI1_transmit_data+0x12>
	}

	/*3.Wait for the BSY bit to reset in Status Register*/
	while(((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY)){}
 80039e2:	bf00      	nop
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <SPI1_transmit_data+0x60>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d0f9      	beq.n	80039e4 <SPI1_transmit_data+0x3c>

	/*4.Clear the Overrun flag by reading DR and SR*/
	uint8_t temp = SPI1->DR;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SPI1_transmit_data+0x60>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	72fb      	strb	r3, [r7, #11]
	temp = SPI1->SR;
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SPI1_transmit_data+0x60>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	72fb      	strb	r3, [r7, #11]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40013000 	.word	0x40013000

08003a0c <Wakeup_pin_en>:
#include "standby.h"

void Wakeup_pin_en(void){
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
	 * 3. Clear all wakeup flags by setting the CWUF bit in PWR_CR.
	 * 4. Enable wakeup pin by setting EWUP bit in PWR_CSR register.
	 ***********************************************************/

	/*1.Wait for wakeup pin to be released*/
	while((GPIOA->IDR & WAKEUP_PIN) == WAKEUP_PIN){}
 8003a10:	bf00      	nop
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <Wakeup_pin_en+0x40>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d0f9      	beq.n	8003a12 <Wakeup_pin_en+0x6>

	/*2.Disable wakeup pin by setting EWUP bit in PWR_CSR register*/
	PWR->CSR &= ~PWR_CSR_EWUP;
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <Wakeup_pin_en+0x44>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <Wakeup_pin_en+0x44>)
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	6053      	str	r3, [r2, #4]

	/*3.Clear all wakeup flags by setting the CWUF bit in PWR_CR*/
	PWR->CR |= PWR_CR_CWUF;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <Wakeup_pin_en+0x44>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <Wakeup_pin_en+0x44>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6013      	str	r3, [r2, #0]

	/*4.Enable wakeup pin by setting EWUP bit in PWR_CSR register*/
	PWR->CSR |= PWR_CSR_EWUP;
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wakeup_pin_en+0x44>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <Wakeup_pin_en+0x44>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6053      	str	r3, [r2, #4]
}
 8003a42:	bf00      	nop
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40010800 	.word	0x40010800
 8003a50:	40007000 	.word	0x40007000

08003a54 <Enter_standby_mode>:

void Enter_standby_mode(void){
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	 * 2. Set SLEEPDEEP bit in SCB_SCR register.
	 * 3. Wait for interrupt or event.
	 ***********************************************************/

	/*1.Enter StandBy mode by setting PDDS bit in PWR_CR register*/
	PWR->CR |= PWR_CR_PDDS;
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <Enter_standby_mode+0x28>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <Enter_standby_mode+0x28>)
 8003a5e:	f043 0302 	orr.w	r3, r3, #2
 8003a62:	6013      	str	r3, [r2, #0]

	/*2.Set SLEEPDEEP bit in SCB_SCR register*/
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <Enter_standby_mode+0x2c>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <Enter_standby_mode+0x2c>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6113      	str	r3, [r2, #16]

	/*3. Wait for interrupt*/
	__WFI();
 8003a70:	bf30      	wfi
}
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e00a      	b.n	8003aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a96:	f3af 8000 	nop.w
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	60ba      	str	r2, [r7, #8]
 8003aa2:	b2ca      	uxtb	r2, r1
 8003aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	dbf0      	blt.n	8003a96 <_read+0x12>
  }

  return len;
 8003ab4:	687b      	ldr	r3, [r7, #4]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e009      	b.n	8003ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	60ba      	str	r2, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	dbf1      	blt.n	8003ad0 <_write+0x12>
  }
  return len;
 8003aec:	687b      	ldr	r3, [r7, #4]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_close>:

int _close(int file)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b1c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <_isatty>:

int _isatty(int file)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b32:	2301      	movs	r3, #1
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
	...

08003b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <_sbrk+0x5c>)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_sbrk+0x60>)
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <_sbrk+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_sbrk+0x64>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <_sbrk+0x68>)
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b88:	f000 f954 	bl	8003e34 <__errno>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	220c      	movs	r2, #12
 8003b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e009      	b.n	8003bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <_sbrk+0x64>)
 8003ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20005000 	.word	0x20005000
 8003bb8:	00000400 	.word	0x00000400
 8003bbc:	20000ca0 	.word	0x20000ca0
 8003bc0:	20000cb8 	.word	0x20000cb8

08003bc4 <__NVIC_EnableIRQ>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <__NVIC_EnableIRQ+0x34>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <Timer2Config>:
#include "tim.h"

void Timer2Config(void){
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	* 2. Set the prescaler and the ARR.
	* 3. Enable the Timer, and wait for the update Flag to set.
	 ***********************************************************/

	/*1.Enable Timer 2 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <Timer2Config+0x4c>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <Timer2Config+0x4c>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	61d3      	str	r3, [r2, #28]

	/*2.Set the prescaler and the ARR*/
	/*Set TIM prescaler*/
	TIM2->PSC = 8-1;	//Each count by the counter take 1 microseccond
 8003c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c64:	2207      	movs	r2, #7
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set TIM Auto-reload value*/
	TIM2->ARR = 0xffff-1;	//ARR resister is 16 bit resister
 8003c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c70:	62da      	str	r2, [r3, #44]	; 0x2c

	/*3.Enable the Timer, and wait for the update Flag to set*/
	/*Enable timer*/
	TIM2->CR1 |= TIM_CR1_CEN;
 8003c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6013      	str	r3, [r2, #0]

	/*Wait for the update flag to set*/
	while(!(TIM2->SR & TIM_SR_UIF));
 8003c82:	bf00      	nop
 8003c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f8      	beq.n	8003c84 <Timer2Config+0x34>
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <Delay_us>:

void Delay_us (uint16_t us){
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	80fb      	strh	r3, [r7, #6]
	 * 1. RESET the Counter
	 * 2. Wait for the Counter to reach the entered value. As each count will take 1 us,
		 the total waiting time will be the required us delay
	 ***********************************************************/
	/*Reset counter*/
	TIM2->CNT = 0;
 8003caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cae:	2200      	movs	r2, #0
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

	/*Wait for the counter to reach the entered value*/
	while (TIM2->CNT < us);
 8003cb2:	bf00      	nop
 8003cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d3f9      	bcc.n	8003cb4 <Delay_us+0x14>

}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <Delay_ms>:
void Delay_ms (uint16_t ms){
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	81fb      	strh	r3, [r7, #14]
 8003cda:	e006      	b.n	8003cea <Delay_ms+0x1e>
		Delay_us(1000);
 8003cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce0:	f7ff ffde 	bl	8003ca0 <Delay_us>
	for(uint16_t i = 0; i < ms; i++){
 8003ce4:	89fb      	ldrh	r3, [r7, #14]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	81fb      	strh	r3, [r7, #14]
 8003cea:	89fa      	ldrh	r2, [r7, #14]
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3f4      	bcc.n	8003cdc <Delay_ms+0x10>
	}
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <Timer3Config>:

/*Timer 3 is using to blink data*/
void Timer3Config(void){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	* 2. Set the prescaler and the ARR.
	* 3. Enable the Timer, and wait for the update Flag to set.
	 ***********************************************************/

	/*1.Enable Timer 3 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <Timer3Config+0x58>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <Timer3Config+0x58>)
 8003d06:	f043 0302 	orr.w	r3, r3, #2
 8003d0a:	61d3      	str	r3, [r2, #28]

	/*2.Set the prescaler and the ARR*/
	/*Set TIM prescaler*/
	TIM3->PSC = 8000-1;	//Each count by the counter take 1 miliseccond
 8003d0c:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <Timer3Config+0x5c>)
 8003d0e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set TIM Auto-reload value*/
	TIM3->ARR = 500-1;		// 0.5s
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <Timer3Config+0x5c>)
 8003d16:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*4.Enable interrupt*/
	/*Enable timer update envent bit*/
    TIM3->EGR |= TIM_EGR_UG;
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <Timer3Config+0x5c>)
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <Timer3Config+0x5c>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6153      	str	r3, [r2, #20]

    /*Enable update interrupt by setting UIE bit in TIM_DIER register */
    TIM3->DIER |= TIM_DIER_UIE;
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <Timer3Config+0x5c>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <Timer3Config+0x5c>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	60d3      	str	r3, [r2, #12]


	/*5.Set the Interrupt Priority*/
	NVIC_SetPriority(TIM3_IRQn, 1);
 8003d34:	2101      	movs	r1, #1
 8003d36:	201d      	movs	r0, #29
 8003d38:	f7ff ff60 	bl	8003bfc <__NVIC_SetPriority>

	/*6.Enable EXTI in NVIC*/
	NVIC_EnableIRQ(TIM3_IRQn);
 8003d3c:	201d      	movs	r0, #29
 8003d3e:	f7ff ff41 	bl	8003bc4 <__NVIC_EnableIRQ>

	/*7.Enable the Timer, and wait for the update Flag to set*/
	/*Enable timer*/
	TIM3->CR1 |= TIM_CR1_CEN;
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <Timer3Config+0x5c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <Timer3Config+0x5c>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]

	/*Wait for the update flag to set*/
//	while(!(TIM3->SR & TIM_SR_UIF));
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40000400 	.word	0x40000400

08003d5c <Timer4Config>:

/*Timer 4 is using to calculate active time*/
void Timer4Config(void){
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	* 2. Set the prescaler and the ARR.
	* 3. Enable the Timer, and wait for the update Flag to set.
	 ***********************************************************/

	/*1.Enable Timer 4 clock*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <Timer4Config+0x64>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <Timer4Config+0x64>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	61d3      	str	r3, [r2, #28]

	/*2.Set the prescaler and the ARR*/
	/*Set TIM prescaler*/
	TIM4->PSC = 8000-1;	//Each count by the counter take 1 miliseccond
 8003d6c:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <Timer4Config+0x68>)
 8003d6e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set TIM Auto-reload value*/
	TIM4->ARR = 10000-1;		// 10s
 8003d74:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <Timer4Config+0x68>)
 8003d76:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*4.Enable interrupt*/
	/*Enable timer update envent bit*/
    TIM4->EGR |= TIM_EGR_UG;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <Timer4Config+0x68>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <Timer4Config+0x68>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6153      	str	r3, [r2, #20]

    /*Enable update interrupt by setting UIE bit in TIM_DIER register */
    TIM4->DIER |= TIM_DIER_UIE;
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <Timer4Config+0x68>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <Timer4Config+0x68>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	60d3      	str	r3, [r2, #12]


	/*5.Set the Interrupt Priority*/
	NVIC_SetPriority(TIM4_IRQn, 1);
 8003d94:	2101      	movs	r1, #1
 8003d96:	201e      	movs	r0, #30
 8003d98:	f7ff ff30 	bl	8003bfc <__NVIC_SetPriority>

	/*6.Enable EXTI in NVIC*/
	NVIC_EnableIRQ(TIM4_IRQn);
 8003d9c:	201e      	movs	r0, #30
 8003d9e:	f7ff ff11 	bl	8003bc4 <__NVIC_EnableIRQ>

	/*7.Enable the Timer, and wait for the update Flag to set*/
	/*Enable timer*/
	TIM4->CR1 |= TIM_CR1_CEN;
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <Timer4Config+0x68>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <Timer4Config+0x68>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6013      	str	r3, [r2, #0]

	/*Wait for the update flag to set*/
//	while(!(TIM4->SR & TIM_SR_UIF));

	/*Clear timer interrupt flag*/
    TIM4->SR &= ~TIM_SR_UIF;
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <Timer4Config+0x68>)
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <Timer4Config+0x68>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6113      	str	r3, [r2, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40000800 	.word	0x40000800

08003dc8 <Reset_timer4_counter>:

void Reset_timer4_counter(void){
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
	TIM4->CNT = 0;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <Reset_timer4_counter+0x14>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40000800 	.word	0x40000800

08003de0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003de0:	480d      	ldr	r0, [pc, #52]	; (8003e18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003de2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003de4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003de8:	480c      	ldr	r0, [pc, #48]	; (8003e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8003dea:	490d      	ldr	r1, [pc, #52]	; (8003e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003dec:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <LoopForever+0xe>)
  movs r3, #0
 8003dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003df0:	e002      	b.n	8003df8 <LoopCopyDataInit>

08003df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003df6:	3304      	adds	r3, #4

08003df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dfc:	d3f9      	bcc.n	8003df2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e00:	4c0a      	ldr	r4, [pc, #40]	; (8003e2c <LoopForever+0x16>)
  movs r3, #0
 8003e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e04:	e001      	b.n	8003e0a <LoopFillZerobss>

08003e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e08:	3204      	adds	r2, #4

08003e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e0c:	d3fb      	bcc.n	8003e06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e0e:	f000 f817 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e12:	f7fc fda5 	bl	8000960 <main>

08003e16 <LoopForever>:

LoopForever:
  b LoopForever
 8003e16:	e7fe      	b.n	8003e16 <LoopForever>
  ldr   r0, =_estack
 8003e18:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e20:	200007c4 	.word	0x200007c4
  ldr r2, =_sidata
 8003e24:	08004b08 	.word	0x08004b08
  ldr r2, =_sbss
 8003e28:	200007c4 	.word	0x200007c4
  ldr r4, =_ebss
 8003e2c:	20000cb4 	.word	0x20000cb4

08003e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e30:	e7fe      	b.n	8003e30 <ADC1_2_IRQHandler>
	...

08003e34 <__errno>:
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <__errno+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000760 	.word	0x20000760

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	2600      	movs	r6, #0
 8003e44:	4d0c      	ldr	r5, [pc, #48]	; (8003e78 <__libc_init_array+0x38>)
 8003e46:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e48:	1b64      	subs	r4, r4, r5
 8003e4a:	10a4      	asrs	r4, r4, #2
 8003e4c:	42a6      	cmp	r6, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	f000 fd88 	bl	8004964 <_init>
 8003e54:	2600      	movs	r6, #0
 8003e56:	4d0a      	ldr	r5, [pc, #40]	; (8003e80 <__libc_init_array+0x40>)
 8003e58:	4c0a      	ldr	r4, [pc, #40]	; (8003e84 <__libc_init_array+0x44>)
 8003e5a:	1b64      	subs	r4, r4, r5
 8003e5c:	10a4      	asrs	r4, r4, #2
 8003e5e:	42a6      	cmp	r6, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e68:	4798      	blx	r3
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e72:	4798      	blx	r3
 8003e74:	3601      	adds	r6, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08004b00 	.word	0x08004b00
 8003e7c:	08004b00 	.word	0x08004b00
 8003e80:	08004b00 	.word	0x08004b00
 8003e84:	08004b04 	.word	0x08004b04

08003e88 <__itoa>:
 8003e88:	1e93      	subs	r3, r2, #2
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	460c      	mov	r4, r1
 8003e90:	d904      	bls.n	8003e9c <__itoa+0x14>
 8003e92:	2300      	movs	r3, #0
 8003e94:	461c      	mov	r4, r3
 8003e96:	700b      	strb	r3, [r1, #0]
 8003e98:	4620      	mov	r0, r4
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	2a0a      	cmp	r2, #10
 8003e9e:	d109      	bne.n	8003eb4 <__itoa+0x2c>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	da07      	bge.n	8003eb4 <__itoa+0x2c>
 8003ea4:	232d      	movs	r3, #45	; 0x2d
 8003ea6:	700b      	strb	r3, [r1, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4240      	negs	r0, r0
 8003eac:	4421      	add	r1, r4
 8003eae:	f000 f897 	bl	8003fe0 <__utoa>
 8003eb2:	e7f1      	b.n	8003e98 <__itoa+0x10>
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	e7f9      	b.n	8003eac <__itoa+0x24>

08003eb8 <itoa>:
 8003eb8:	f7ff bfe6 	b.w	8003e88 <__itoa>

08003ebc <memset>:
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4402      	add	r2, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <_puts_r>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	460e      	mov	r6, r1
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	b118      	cbz	r0, 8003edc <_puts_r+0x10>
 8003ed4:	6983      	ldr	r3, [r0, #24]
 8003ed6:	b90b      	cbnz	r3, 8003edc <_puts_r+0x10>
 8003ed8:	f000 fa9a 	bl	8004410 <__sinit>
 8003edc:	69ab      	ldr	r3, [r5, #24]
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	b913      	cbnz	r3, 8003ee8 <_puts_r+0x1c>
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 fa94 	bl	8004410 <__sinit>
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <_puts_r+0xd0>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d120      	bne.n	8003f30 <_puts_r+0x64>
 8003eee:	686c      	ldr	r4, [r5, #4]
 8003ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ef2:	07db      	lsls	r3, r3, #31
 8003ef4:	d405      	bmi.n	8003f02 <_puts_r+0x36>
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d402      	bmi.n	8003f02 <_puts_r+0x36>
 8003efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003efe:	f000 fb25 	bl	800454c <__retarget_lock_acquire_recursive>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	0719      	lsls	r1, r3, #28
 8003f06:	d51d      	bpl.n	8003f44 <_puts_r+0x78>
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	b1db      	cbz	r3, 8003f44 <_puts_r+0x78>
 8003f0c:	3e01      	subs	r6, #1
 8003f0e:	68a3      	ldr	r3, [r4, #8]
 8003f10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60a3      	str	r3, [r4, #8]
 8003f18:	bb39      	cbnz	r1, 8003f6a <_puts_r+0x9e>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da38      	bge.n	8003f90 <_puts_r+0xc4>
 8003f1e:	4622      	mov	r2, r4
 8003f20:	210a      	movs	r1, #10
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 f89e 	bl	8004064 <__swbuf_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d011      	beq.n	8003f50 <_puts_r+0x84>
 8003f2c:	250a      	movs	r5, #10
 8003f2e:	e011      	b.n	8003f54 <_puts_r+0x88>
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <_puts_r+0xd4>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <_puts_r+0x6e>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7da      	b.n	8003ef0 <_puts_r+0x24>
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <_puts_r+0xd8>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	bf08      	it	eq
 8003f40:	68ec      	ldreq	r4, [r5, #12]
 8003f42:	e7d5      	b.n	8003ef0 <_puts_r+0x24>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 f8de 	bl	8004108 <__swsetup_r>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d0dd      	beq.n	8003f0c <_puts_r+0x40>
 8003f50:	f04f 35ff 	mov.w	r5, #4294967295
 8003f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f56:	07da      	lsls	r2, r3, #31
 8003f58:	d405      	bmi.n	8003f66 <_puts_r+0x9a>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	059b      	lsls	r3, r3, #22
 8003f5e:	d402      	bmi.n	8003f66 <_puts_r+0x9a>
 8003f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f62:	f000 faf4 	bl	800454e <__retarget_lock_release_recursive>
 8003f66:	4628      	mov	r0, r5
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da04      	bge.n	8003f78 <_puts_r+0xac>
 8003f6e:	69a2      	ldr	r2, [r4, #24]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	dc06      	bgt.n	8003f82 <_puts_r+0xb6>
 8003f74:	290a      	cmp	r1, #10
 8003f76:	d004      	beq.n	8003f82 <_puts_r+0xb6>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	6022      	str	r2, [r4, #0]
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	e7c5      	b.n	8003f0e <_puts_r+0x42>
 8003f82:	4622      	mov	r2, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 f86d 	bl	8004064 <__swbuf_r>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d1bf      	bne.n	8003f0e <_puts_r+0x42>
 8003f8e:	e7df      	b.n	8003f50 <_puts_r+0x84>
 8003f90:	250a      	movs	r5, #10
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	6022      	str	r2, [r4, #0]
 8003f98:	701d      	strb	r5, [r3, #0]
 8003f9a:	e7db      	b.n	8003f54 <_puts_r+0x88>
 8003f9c:	08004ac0 	.word	0x08004ac0
 8003fa0:	08004ae0 	.word	0x08004ae0
 8003fa4:	08004aa0 	.word	0x08004aa0

08003fa8 <puts>:
 8003fa8:	4b02      	ldr	r3, [pc, #8]	; (8003fb4 <puts+0xc>)
 8003faa:	4601      	mov	r1, r0
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	f7ff bf8d 	b.w	8003ecc <_puts_r>
 8003fb2:	bf00      	nop
 8003fb4:	20000760 	.word	0x20000760

08003fb8 <strncpy>:
 8003fb8:	4603      	mov	r3, r0
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	3901      	subs	r1, #1
 8003fbe:	b132      	cbz	r2, 8003fce <strncpy+0x16>
 8003fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	f803 4b01 	strb.w	r4, [r3], #1
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	d1f7      	bne.n	8003fbe <strncpy+0x6>
 8003fce:	2100      	movs	r1, #0
 8003fd0:	441a      	add	r2, r3
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d100      	bne.n	8003fd8 <strncpy+0x20>
 8003fd6:	bd10      	pop	{r4, pc}
 8003fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fdc:	e7f9      	b.n	8003fd2 <strncpy+0x1a>
	...

08003fe0 <__utoa>:
 8003fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe2:	b08b      	sub	sp, #44	; 0x2c
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	466e      	mov	r6, sp
 8003fea:	4c1d      	ldr	r4, [pc, #116]	; (8004060 <__utoa+0x80>)
 8003fec:	f104 0c20 	add.w	ip, r4, #32
 8003ff0:	4637      	mov	r7, r6
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	6861      	ldr	r1, [r4, #4]
 8003ff6:	3408      	adds	r4, #8
 8003ff8:	c703      	stmia	r7!, {r0, r1}
 8003ffa:	4564      	cmp	r4, ip
 8003ffc:	463e      	mov	r6, r7
 8003ffe:	d1f7      	bne.n	8003ff0 <__utoa+0x10>
 8004000:	7921      	ldrb	r1, [r4, #4]
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	7139      	strb	r1, [r7, #4]
 8004006:	1e91      	subs	r1, r2, #2
 8004008:	2922      	cmp	r1, #34	; 0x22
 800400a:	6038      	str	r0, [r7, #0]
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	d904      	bls.n	800401c <__utoa+0x3c>
 8004012:	7019      	strb	r1, [r3, #0]
 8004014:	460b      	mov	r3, r1
 8004016:	4618      	mov	r0, r3
 8004018:	b00b      	add	sp, #44	; 0x2c
 800401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401c:	1e58      	subs	r0, r3, #1
 800401e:	4684      	mov	ip, r0
 8004020:	fbb5 f7f2 	udiv	r7, r5, r2
 8004024:	fb02 5617 	mls	r6, r2, r7, r5
 8004028:	3628      	adds	r6, #40	; 0x28
 800402a:	446e      	add	r6, sp
 800402c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004030:	460c      	mov	r4, r1
 8004032:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004036:	462e      	mov	r6, r5
 8004038:	42b2      	cmp	r2, r6
 800403a:	463d      	mov	r5, r7
 800403c:	f101 0101 	add.w	r1, r1, #1
 8004040:	d9ee      	bls.n	8004020 <__utoa+0x40>
 8004042:	2200      	movs	r2, #0
 8004044:	545a      	strb	r2, [r3, r1]
 8004046:	1919      	adds	r1, r3, r4
 8004048:	1aa5      	subs	r5, r4, r2
 800404a:	42aa      	cmp	r2, r5
 800404c:	dae3      	bge.n	8004016 <__utoa+0x36>
 800404e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004052:	780e      	ldrb	r6, [r1, #0]
 8004054:	3201      	adds	r2, #1
 8004056:	7006      	strb	r6, [r0, #0]
 8004058:	f801 5901 	strb.w	r5, [r1], #-1
 800405c:	e7f4      	b.n	8004048 <__utoa+0x68>
 800405e:	bf00      	nop
 8004060:	08004a78 	.word	0x08004a78

08004064 <__swbuf_r>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	460e      	mov	r6, r1
 8004068:	4614      	mov	r4, r2
 800406a:	4605      	mov	r5, r0
 800406c:	b118      	cbz	r0, 8004076 <__swbuf_r+0x12>
 800406e:	6983      	ldr	r3, [r0, #24]
 8004070:	b90b      	cbnz	r3, 8004076 <__swbuf_r+0x12>
 8004072:	f000 f9cd 	bl	8004410 <__sinit>
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <__swbuf_r+0x98>)
 8004078:	429c      	cmp	r4, r3
 800407a:	d12b      	bne.n	80040d4 <__swbuf_r+0x70>
 800407c:	686c      	ldr	r4, [r5, #4]
 800407e:	69a3      	ldr	r3, [r4, #24]
 8004080:	60a3      	str	r3, [r4, #8]
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	071a      	lsls	r2, r3, #28
 8004086:	d52f      	bpl.n	80040e8 <__swbuf_r+0x84>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	b36b      	cbz	r3, 80040e8 <__swbuf_r+0x84>
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	b2f6      	uxtb	r6, r6
 8004092:	1ac0      	subs	r0, r0, r3
 8004094:	6963      	ldr	r3, [r4, #20]
 8004096:	4637      	mov	r7, r6
 8004098:	4283      	cmp	r3, r0
 800409a:	dc04      	bgt.n	80040a6 <__swbuf_r+0x42>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f922 	bl	80042e8 <_fflush_r>
 80040a4:	bb30      	cbnz	r0, 80040f4 <__swbuf_r+0x90>
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	3001      	adds	r0, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	60a3      	str	r3, [r4, #8]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	6022      	str	r2, [r4, #0]
 80040b4:	701e      	strb	r6, [r3, #0]
 80040b6:	6963      	ldr	r3, [r4, #20]
 80040b8:	4283      	cmp	r3, r0
 80040ba:	d004      	beq.n	80040c6 <__swbuf_r+0x62>
 80040bc:	89a3      	ldrh	r3, [r4, #12]
 80040be:	07db      	lsls	r3, r3, #31
 80040c0:	d506      	bpl.n	80040d0 <__swbuf_r+0x6c>
 80040c2:	2e0a      	cmp	r6, #10
 80040c4:	d104      	bne.n	80040d0 <__swbuf_r+0x6c>
 80040c6:	4621      	mov	r1, r4
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f90d 	bl	80042e8 <_fflush_r>
 80040ce:	b988      	cbnz	r0, 80040f4 <__swbuf_r+0x90>
 80040d0:	4638      	mov	r0, r7
 80040d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <__swbuf_r+0x9c>)
 80040d6:	429c      	cmp	r4, r3
 80040d8:	d101      	bne.n	80040de <__swbuf_r+0x7a>
 80040da:	68ac      	ldr	r4, [r5, #8]
 80040dc:	e7cf      	b.n	800407e <__swbuf_r+0x1a>
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <__swbuf_r+0xa0>)
 80040e0:	429c      	cmp	r4, r3
 80040e2:	bf08      	it	eq
 80040e4:	68ec      	ldreq	r4, [r5, #12]
 80040e6:	e7ca      	b.n	800407e <__swbuf_r+0x1a>
 80040e8:	4621      	mov	r1, r4
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 f80c 	bl	8004108 <__swsetup_r>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d0cb      	beq.n	800408c <__swbuf_r+0x28>
 80040f4:	f04f 37ff 	mov.w	r7, #4294967295
 80040f8:	e7ea      	b.n	80040d0 <__swbuf_r+0x6c>
 80040fa:	bf00      	nop
 80040fc:	08004ac0 	.word	0x08004ac0
 8004100:	08004ae0 	.word	0x08004ae0
 8004104:	08004aa0 	.word	0x08004aa0

08004108 <__swsetup_r>:
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <__swsetup_r+0xcc>)
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	681d      	ldr	r5, [r3, #0]
 800410e:	4606      	mov	r6, r0
 8004110:	460c      	mov	r4, r1
 8004112:	b125      	cbz	r5, 800411e <__swsetup_r+0x16>
 8004114:	69ab      	ldr	r3, [r5, #24]
 8004116:	b913      	cbnz	r3, 800411e <__swsetup_r+0x16>
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f979 	bl	8004410 <__sinit>
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <__swsetup_r+0xd0>)
 8004120:	429c      	cmp	r4, r3
 8004122:	d10f      	bne.n	8004144 <__swsetup_r+0x3c>
 8004124:	686c      	ldr	r4, [r5, #4]
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800412c:	0719      	lsls	r1, r3, #28
 800412e:	d42c      	bmi.n	800418a <__swsetup_r+0x82>
 8004130:	06dd      	lsls	r5, r3, #27
 8004132:	d411      	bmi.n	8004158 <__swsetup_r+0x50>
 8004134:	2309      	movs	r3, #9
 8004136:	6033      	str	r3, [r6, #0]
 8004138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	e03e      	b.n	80041c2 <__swsetup_r+0xba>
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <__swsetup_r+0xd4>)
 8004146:	429c      	cmp	r4, r3
 8004148:	d101      	bne.n	800414e <__swsetup_r+0x46>
 800414a:	68ac      	ldr	r4, [r5, #8]
 800414c:	e7eb      	b.n	8004126 <__swsetup_r+0x1e>
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <__swsetup_r+0xd8>)
 8004150:	429c      	cmp	r4, r3
 8004152:	bf08      	it	eq
 8004154:	68ec      	ldreq	r4, [r5, #12]
 8004156:	e7e6      	b.n	8004126 <__swsetup_r+0x1e>
 8004158:	0758      	lsls	r0, r3, #29
 800415a:	d512      	bpl.n	8004182 <__swsetup_r+0x7a>
 800415c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800415e:	b141      	cbz	r1, 8004172 <__swsetup_r+0x6a>
 8004160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004164:	4299      	cmp	r1, r3
 8004166:	d002      	beq.n	800416e <__swsetup_r+0x66>
 8004168:	4630      	mov	r0, r6
 800416a:	f000 fa57 	bl	800461c <_free_r>
 800416e:	2300      	movs	r3, #0
 8004170:	6363      	str	r3, [r4, #52]	; 0x34
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	2300      	movs	r3, #0
 800417c:	6063      	str	r3, [r4, #4]
 800417e:	6923      	ldr	r3, [r4, #16]
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	f043 0308 	orr.w	r3, r3, #8
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	b94b      	cbnz	r3, 80041a2 <__swsetup_r+0x9a>
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004198:	d003      	beq.n	80041a2 <__swsetup_r+0x9a>
 800419a:	4621      	mov	r1, r4
 800419c:	4630      	mov	r0, r6
 800419e:	f000 f9fd 	bl	800459c <__smakebuf_r>
 80041a2:	89a0      	ldrh	r0, [r4, #12]
 80041a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041a8:	f010 0301 	ands.w	r3, r0, #1
 80041ac:	d00a      	beq.n	80041c4 <__swsetup_r+0xbc>
 80041ae:	2300      	movs	r3, #0
 80041b0:	60a3      	str	r3, [r4, #8]
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	425b      	negs	r3, r3
 80041b6:	61a3      	str	r3, [r4, #24]
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	b943      	cbnz	r3, 80041ce <__swsetup_r+0xc6>
 80041bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041c0:	d1ba      	bne.n	8004138 <__swsetup_r+0x30>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	0781      	lsls	r1, r0, #30
 80041c6:	bf58      	it	pl
 80041c8:	6963      	ldrpl	r3, [r4, #20]
 80041ca:	60a3      	str	r3, [r4, #8]
 80041cc:	e7f4      	b.n	80041b8 <__swsetup_r+0xb0>
 80041ce:	2000      	movs	r0, #0
 80041d0:	e7f7      	b.n	80041c2 <__swsetup_r+0xba>
 80041d2:	bf00      	nop
 80041d4:	20000760 	.word	0x20000760
 80041d8:	08004ac0 	.word	0x08004ac0
 80041dc:	08004ae0 	.word	0x08004ae0
 80041e0:	08004aa0 	.word	0x08004aa0

080041e4 <__sflush_r>:
 80041e4:	898a      	ldrh	r2, [r1, #12]
 80041e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e8:	4605      	mov	r5, r0
 80041ea:	0710      	lsls	r0, r2, #28
 80041ec:	460c      	mov	r4, r1
 80041ee:	d457      	bmi.n	80042a0 <__sflush_r+0xbc>
 80041f0:	684b      	ldr	r3, [r1, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dc04      	bgt.n	8004200 <__sflush_r+0x1c>
 80041f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dc01      	bgt.n	8004200 <__sflush_r+0x1c>
 80041fc:	2000      	movs	r0, #0
 80041fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004202:	2e00      	cmp	r6, #0
 8004204:	d0fa      	beq.n	80041fc <__sflush_r+0x18>
 8004206:	2300      	movs	r3, #0
 8004208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800420c:	682f      	ldr	r7, [r5, #0]
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	d032      	beq.n	8004278 <__sflush_r+0x94>
 8004212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	075a      	lsls	r2, r3, #29
 8004218:	d505      	bpl.n	8004226 <__sflush_r+0x42>
 800421a:	6863      	ldr	r3, [r4, #4]
 800421c:	1ac0      	subs	r0, r0, r3
 800421e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004220:	b10b      	cbz	r3, 8004226 <__sflush_r+0x42>
 8004222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004224:	1ac0      	subs	r0, r0, r3
 8004226:	2300      	movs	r3, #0
 8004228:	4602      	mov	r2, r0
 800422a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800422c:	4628      	mov	r0, r5
 800422e:	6a21      	ldr	r1, [r4, #32]
 8004230:	47b0      	blx	r6
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	d106      	bne.n	8004246 <__sflush_r+0x62>
 8004238:	6829      	ldr	r1, [r5, #0]
 800423a:	291d      	cmp	r1, #29
 800423c:	d82c      	bhi.n	8004298 <__sflush_r+0xb4>
 800423e:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <__sflush_r+0x100>)
 8004240:	40ca      	lsrs	r2, r1
 8004242:	07d6      	lsls	r6, r2, #31
 8004244:	d528      	bpl.n	8004298 <__sflush_r+0xb4>
 8004246:	2200      	movs	r2, #0
 8004248:	6062      	str	r2, [r4, #4]
 800424a:	6922      	ldr	r2, [r4, #16]
 800424c:	04d9      	lsls	r1, r3, #19
 800424e:	6022      	str	r2, [r4, #0]
 8004250:	d504      	bpl.n	800425c <__sflush_r+0x78>
 8004252:	1c42      	adds	r2, r0, #1
 8004254:	d101      	bne.n	800425a <__sflush_r+0x76>
 8004256:	682b      	ldr	r3, [r5, #0]
 8004258:	b903      	cbnz	r3, 800425c <__sflush_r+0x78>
 800425a:	6560      	str	r0, [r4, #84]	; 0x54
 800425c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800425e:	602f      	str	r7, [r5, #0]
 8004260:	2900      	cmp	r1, #0
 8004262:	d0cb      	beq.n	80041fc <__sflush_r+0x18>
 8004264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004268:	4299      	cmp	r1, r3
 800426a:	d002      	beq.n	8004272 <__sflush_r+0x8e>
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f9d5 	bl	800461c <_free_r>
 8004272:	2000      	movs	r0, #0
 8004274:	6360      	str	r0, [r4, #52]	; 0x34
 8004276:	e7c2      	b.n	80041fe <__sflush_r+0x1a>
 8004278:	6a21      	ldr	r1, [r4, #32]
 800427a:	2301      	movs	r3, #1
 800427c:	4628      	mov	r0, r5
 800427e:	47b0      	blx	r6
 8004280:	1c41      	adds	r1, r0, #1
 8004282:	d1c7      	bne.n	8004214 <__sflush_r+0x30>
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0c4      	beq.n	8004214 <__sflush_r+0x30>
 800428a:	2b1d      	cmp	r3, #29
 800428c:	d001      	beq.n	8004292 <__sflush_r+0xae>
 800428e:	2b16      	cmp	r3, #22
 8004290:	d101      	bne.n	8004296 <__sflush_r+0xb2>
 8004292:	602f      	str	r7, [r5, #0]
 8004294:	e7b2      	b.n	80041fc <__sflush_r+0x18>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800429c:	81a3      	strh	r3, [r4, #12]
 800429e:	e7ae      	b.n	80041fe <__sflush_r+0x1a>
 80042a0:	690f      	ldr	r7, [r1, #16]
 80042a2:	2f00      	cmp	r7, #0
 80042a4:	d0aa      	beq.n	80041fc <__sflush_r+0x18>
 80042a6:	0793      	lsls	r3, r2, #30
 80042a8:	bf18      	it	ne
 80042aa:	2300      	movne	r3, #0
 80042ac:	680e      	ldr	r6, [r1, #0]
 80042ae:	bf08      	it	eq
 80042b0:	694b      	ldreq	r3, [r1, #20]
 80042b2:	1bf6      	subs	r6, r6, r7
 80042b4:	600f      	str	r7, [r1, #0]
 80042b6:	608b      	str	r3, [r1, #8]
 80042b8:	2e00      	cmp	r6, #0
 80042ba:	dd9f      	ble.n	80041fc <__sflush_r+0x18>
 80042bc:	4633      	mov	r3, r6
 80042be:	463a      	mov	r2, r7
 80042c0:	4628      	mov	r0, r5
 80042c2:	6a21      	ldr	r1, [r4, #32]
 80042c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80042c8:	47e0      	blx	ip
 80042ca:	2800      	cmp	r0, #0
 80042cc:	dc06      	bgt.n	80042dc <__sflush_r+0xf8>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e790      	b.n	80041fe <__sflush_r+0x1a>
 80042dc:	4407      	add	r7, r0
 80042de:	1a36      	subs	r6, r6, r0
 80042e0:	e7ea      	b.n	80042b8 <__sflush_r+0xd4>
 80042e2:	bf00      	nop
 80042e4:	20400001 	.word	0x20400001

080042e8 <_fflush_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	690b      	ldr	r3, [r1, #16]
 80042ec:	4605      	mov	r5, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	b913      	cbnz	r3, 80042f8 <_fflush_r+0x10>
 80042f2:	2500      	movs	r5, #0
 80042f4:	4628      	mov	r0, r5
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	b118      	cbz	r0, 8004302 <_fflush_r+0x1a>
 80042fa:	6983      	ldr	r3, [r0, #24]
 80042fc:	b90b      	cbnz	r3, 8004302 <_fflush_r+0x1a>
 80042fe:	f000 f887 	bl	8004410 <__sinit>
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <_fflush_r+0x6c>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d11b      	bne.n	8004340 <_fflush_r+0x58>
 8004308:	686c      	ldr	r4, [r5, #4]
 800430a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ef      	beq.n	80042f2 <_fflush_r+0xa>
 8004312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004314:	07d0      	lsls	r0, r2, #31
 8004316:	d404      	bmi.n	8004322 <_fflush_r+0x3a>
 8004318:	0599      	lsls	r1, r3, #22
 800431a:	d402      	bmi.n	8004322 <_fflush_r+0x3a>
 800431c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800431e:	f000 f915 	bl	800454c <__retarget_lock_acquire_recursive>
 8004322:	4628      	mov	r0, r5
 8004324:	4621      	mov	r1, r4
 8004326:	f7ff ff5d 	bl	80041e4 <__sflush_r>
 800432a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800432c:	4605      	mov	r5, r0
 800432e:	07da      	lsls	r2, r3, #31
 8004330:	d4e0      	bmi.n	80042f4 <_fflush_r+0xc>
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	059b      	lsls	r3, r3, #22
 8004336:	d4dd      	bmi.n	80042f4 <_fflush_r+0xc>
 8004338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800433a:	f000 f908 	bl	800454e <__retarget_lock_release_recursive>
 800433e:	e7d9      	b.n	80042f4 <_fflush_r+0xc>
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <_fflush_r+0x70>)
 8004342:	429c      	cmp	r4, r3
 8004344:	d101      	bne.n	800434a <_fflush_r+0x62>
 8004346:	68ac      	ldr	r4, [r5, #8]
 8004348:	e7df      	b.n	800430a <_fflush_r+0x22>
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <_fflush_r+0x74>)
 800434c:	429c      	cmp	r4, r3
 800434e:	bf08      	it	eq
 8004350:	68ec      	ldreq	r4, [r5, #12]
 8004352:	e7da      	b.n	800430a <_fflush_r+0x22>
 8004354:	08004ac0 	.word	0x08004ac0
 8004358:	08004ae0 	.word	0x08004ae0
 800435c:	08004aa0 	.word	0x08004aa0

08004360 <std>:
 8004360:	2300      	movs	r3, #0
 8004362:	b510      	push	{r4, lr}
 8004364:	4604      	mov	r4, r0
 8004366:	e9c0 3300 	strd	r3, r3, [r0]
 800436a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800436e:	6083      	str	r3, [r0, #8]
 8004370:	8181      	strh	r1, [r0, #12]
 8004372:	6643      	str	r3, [r0, #100]	; 0x64
 8004374:	81c2      	strh	r2, [r0, #14]
 8004376:	6183      	str	r3, [r0, #24]
 8004378:	4619      	mov	r1, r3
 800437a:	2208      	movs	r2, #8
 800437c:	305c      	adds	r0, #92	; 0x5c
 800437e:	f7ff fd9d 	bl	8003ebc <memset>
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <std+0x38>)
 8004384:	6224      	str	r4, [r4, #32]
 8004386:	6263      	str	r3, [r4, #36]	; 0x24
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <std+0x3c>)
 800438a:	62a3      	str	r3, [r4, #40]	; 0x28
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <std+0x40>)
 800438e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004390:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <std+0x44>)
 8004392:	6323      	str	r3, [r4, #48]	; 0x30
 8004394:	bd10      	pop	{r4, pc}
 8004396:	bf00      	nop
 8004398:	080047f5 	.word	0x080047f5
 800439c:	08004817 	.word	0x08004817
 80043a0:	0800484f 	.word	0x0800484f
 80043a4:	08004873 	.word	0x08004873

080043a8 <_cleanup_r>:
 80043a8:	4901      	ldr	r1, [pc, #4]	; (80043b0 <_cleanup_r+0x8>)
 80043aa:	f000 b8af 	b.w	800450c <_fwalk_reent>
 80043ae:	bf00      	nop
 80043b0:	080042e9 	.word	0x080042e9

080043b4 <__sfmoreglue>:
 80043b4:	2268      	movs	r2, #104	; 0x68
 80043b6:	b570      	push	{r4, r5, r6, lr}
 80043b8:	1e4d      	subs	r5, r1, #1
 80043ba:	4355      	muls	r5, r2
 80043bc:	460e      	mov	r6, r1
 80043be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043c2:	f000 f993 	bl	80046ec <_malloc_r>
 80043c6:	4604      	mov	r4, r0
 80043c8:	b140      	cbz	r0, 80043dc <__sfmoreglue+0x28>
 80043ca:	2100      	movs	r1, #0
 80043cc:	e9c0 1600 	strd	r1, r6, [r0]
 80043d0:	300c      	adds	r0, #12
 80043d2:	60a0      	str	r0, [r4, #8]
 80043d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043d8:	f7ff fd70 	bl	8003ebc <memset>
 80043dc:	4620      	mov	r0, r4
 80043de:	bd70      	pop	{r4, r5, r6, pc}

080043e0 <__sfp_lock_acquire>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__sfp_lock_acquire+0x8>)
 80043e2:	f000 b8b3 	b.w	800454c <__retarget_lock_acquire_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000ca5 	.word	0x20000ca5

080043ec <__sfp_lock_release>:
 80043ec:	4801      	ldr	r0, [pc, #4]	; (80043f4 <__sfp_lock_release+0x8>)
 80043ee:	f000 b8ae 	b.w	800454e <__retarget_lock_release_recursive>
 80043f2:	bf00      	nop
 80043f4:	20000ca5 	.word	0x20000ca5

080043f8 <__sinit_lock_acquire>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__sinit_lock_acquire+0x8>)
 80043fa:	f000 b8a7 	b.w	800454c <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	20000ca6 	.word	0x20000ca6

08004404 <__sinit_lock_release>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__sinit_lock_release+0x8>)
 8004406:	f000 b8a2 	b.w	800454e <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	20000ca6 	.word	0x20000ca6

08004410 <__sinit>:
 8004410:	b510      	push	{r4, lr}
 8004412:	4604      	mov	r4, r0
 8004414:	f7ff fff0 	bl	80043f8 <__sinit_lock_acquire>
 8004418:	69a3      	ldr	r3, [r4, #24]
 800441a:	b11b      	cbz	r3, 8004424 <__sinit+0x14>
 800441c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004420:	f7ff bff0 	b.w	8004404 <__sinit_lock_release>
 8004424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004428:	6523      	str	r3, [r4, #80]	; 0x50
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <__sinit+0x68>)
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <__sinit+0x6c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	62a2      	str	r2, [r4, #40]	; 0x28
 8004432:	42a3      	cmp	r3, r4
 8004434:	bf08      	it	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	4620      	mov	r0, r4
 800443a:	bf08      	it	eq
 800443c:	61a3      	streq	r3, [r4, #24]
 800443e:	f000 f81f 	bl	8004480 <__sfp>
 8004442:	6060      	str	r0, [r4, #4]
 8004444:	4620      	mov	r0, r4
 8004446:	f000 f81b 	bl	8004480 <__sfp>
 800444a:	60a0      	str	r0, [r4, #8]
 800444c:	4620      	mov	r0, r4
 800444e:	f000 f817 	bl	8004480 <__sfp>
 8004452:	2200      	movs	r2, #0
 8004454:	2104      	movs	r1, #4
 8004456:	60e0      	str	r0, [r4, #12]
 8004458:	6860      	ldr	r0, [r4, #4]
 800445a:	f7ff ff81 	bl	8004360 <std>
 800445e:	2201      	movs	r2, #1
 8004460:	2109      	movs	r1, #9
 8004462:	68a0      	ldr	r0, [r4, #8]
 8004464:	f7ff ff7c 	bl	8004360 <std>
 8004468:	2202      	movs	r2, #2
 800446a:	2112      	movs	r1, #18
 800446c:	68e0      	ldr	r0, [r4, #12]
 800446e:	f7ff ff77 	bl	8004360 <std>
 8004472:	2301      	movs	r3, #1
 8004474:	61a3      	str	r3, [r4, #24]
 8004476:	e7d1      	b.n	800441c <__sinit+0xc>
 8004478:	08004a74 	.word	0x08004a74
 800447c:	080043a9 	.word	0x080043a9

08004480 <__sfp>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	4607      	mov	r7, r0
 8004484:	f7ff ffac 	bl	80043e0 <__sfp_lock_acquire>
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <__sfp+0x84>)
 800448a:	681e      	ldr	r6, [r3, #0]
 800448c:	69b3      	ldr	r3, [r6, #24]
 800448e:	b913      	cbnz	r3, 8004496 <__sfp+0x16>
 8004490:	4630      	mov	r0, r6
 8004492:	f7ff ffbd 	bl	8004410 <__sinit>
 8004496:	3648      	adds	r6, #72	; 0x48
 8004498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800449c:	3b01      	subs	r3, #1
 800449e:	d503      	bpl.n	80044a8 <__sfp+0x28>
 80044a0:	6833      	ldr	r3, [r6, #0]
 80044a2:	b30b      	cbz	r3, 80044e8 <__sfp+0x68>
 80044a4:	6836      	ldr	r6, [r6, #0]
 80044a6:	e7f7      	b.n	8004498 <__sfp+0x18>
 80044a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044ac:	b9d5      	cbnz	r5, 80044e4 <__sfp+0x64>
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <__sfp+0x88>)
 80044b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044b4:	60e3      	str	r3, [r4, #12]
 80044b6:	6665      	str	r5, [r4, #100]	; 0x64
 80044b8:	f000 f847 	bl	800454a <__retarget_lock_init_recursive>
 80044bc:	f7ff ff96 	bl	80043ec <__sfp_lock_release>
 80044c0:	2208      	movs	r2, #8
 80044c2:	4629      	mov	r1, r5
 80044c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044cc:	6025      	str	r5, [r4, #0]
 80044ce:	61a5      	str	r5, [r4, #24]
 80044d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044d4:	f7ff fcf2 	bl	8003ebc <memset>
 80044d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044e0:	4620      	mov	r0, r4
 80044e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e4:	3468      	adds	r4, #104	; 0x68
 80044e6:	e7d9      	b.n	800449c <__sfp+0x1c>
 80044e8:	2104      	movs	r1, #4
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff ff62 	bl	80043b4 <__sfmoreglue>
 80044f0:	4604      	mov	r4, r0
 80044f2:	6030      	str	r0, [r6, #0]
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d1d5      	bne.n	80044a4 <__sfp+0x24>
 80044f8:	f7ff ff78 	bl	80043ec <__sfp_lock_release>
 80044fc:	230c      	movs	r3, #12
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	e7ee      	b.n	80044e0 <__sfp+0x60>
 8004502:	bf00      	nop
 8004504:	08004a74 	.word	0x08004a74
 8004508:	ffff0001 	.word	0xffff0001

0800450c <_fwalk_reent>:
 800450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004510:	4606      	mov	r6, r0
 8004512:	4688      	mov	r8, r1
 8004514:	2700      	movs	r7, #0
 8004516:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800451a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800451e:	f1b9 0901 	subs.w	r9, r9, #1
 8004522:	d505      	bpl.n	8004530 <_fwalk_reent+0x24>
 8004524:	6824      	ldr	r4, [r4, #0]
 8004526:	2c00      	cmp	r4, #0
 8004528:	d1f7      	bne.n	800451a <_fwalk_reent+0xe>
 800452a:	4638      	mov	r0, r7
 800452c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004530:	89ab      	ldrh	r3, [r5, #12]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d907      	bls.n	8004546 <_fwalk_reent+0x3a>
 8004536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800453a:	3301      	adds	r3, #1
 800453c:	d003      	beq.n	8004546 <_fwalk_reent+0x3a>
 800453e:	4629      	mov	r1, r5
 8004540:	4630      	mov	r0, r6
 8004542:	47c0      	blx	r8
 8004544:	4307      	orrs	r7, r0
 8004546:	3568      	adds	r5, #104	; 0x68
 8004548:	e7e9      	b.n	800451e <_fwalk_reent+0x12>

0800454a <__retarget_lock_init_recursive>:
 800454a:	4770      	bx	lr

0800454c <__retarget_lock_acquire_recursive>:
 800454c:	4770      	bx	lr

0800454e <__retarget_lock_release_recursive>:
 800454e:	4770      	bx	lr

08004550 <__swhatbuf_r>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	460e      	mov	r6, r1
 8004554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004558:	4614      	mov	r4, r2
 800455a:	2900      	cmp	r1, #0
 800455c:	461d      	mov	r5, r3
 800455e:	b096      	sub	sp, #88	; 0x58
 8004560:	da08      	bge.n	8004574 <__swhatbuf_r+0x24>
 8004562:	2200      	movs	r2, #0
 8004564:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	061a      	lsls	r2, r3, #24
 800456c:	d410      	bmi.n	8004590 <__swhatbuf_r+0x40>
 800456e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004572:	e00e      	b.n	8004592 <__swhatbuf_r+0x42>
 8004574:	466a      	mov	r2, sp
 8004576:	f000 f9a3 	bl	80048c0 <_fstat_r>
 800457a:	2800      	cmp	r0, #0
 800457c:	dbf1      	blt.n	8004562 <__swhatbuf_r+0x12>
 800457e:	9a01      	ldr	r2, [sp, #4]
 8004580:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004584:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004588:	425a      	negs	r2, r3
 800458a:	415a      	adcs	r2, r3
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	e7ee      	b.n	800456e <__swhatbuf_r+0x1e>
 8004590:	2340      	movs	r3, #64	; 0x40
 8004592:	2000      	movs	r0, #0
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	b016      	add	sp, #88	; 0x58
 8004598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800459c <__smakebuf_r>:
 800459c:	898b      	ldrh	r3, [r1, #12]
 800459e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045a0:	079d      	lsls	r5, r3, #30
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	d507      	bpl.n	80045b8 <__smakebuf_r+0x1c>
 80045a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	2301      	movs	r3, #1
 80045b2:	6163      	str	r3, [r4, #20]
 80045b4:	b002      	add	sp, #8
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	466a      	mov	r2, sp
 80045ba:	ab01      	add	r3, sp, #4
 80045bc:	f7ff ffc8 	bl	8004550 <__swhatbuf_r>
 80045c0:	9900      	ldr	r1, [sp, #0]
 80045c2:	4605      	mov	r5, r0
 80045c4:	4630      	mov	r0, r6
 80045c6:	f000 f891 	bl	80046ec <_malloc_r>
 80045ca:	b948      	cbnz	r0, 80045e0 <__smakebuf_r+0x44>
 80045cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d4ef      	bmi.n	80045b4 <__smakebuf_r+0x18>
 80045d4:	f023 0303 	bic.w	r3, r3, #3
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	e7e3      	b.n	80045a8 <__smakebuf_r+0xc>
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <__smakebuf_r+0x7c>)
 80045e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	6020      	str	r0, [r4, #0]
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	9b00      	ldr	r3, [sp, #0]
 80045f0:	6120      	str	r0, [r4, #16]
 80045f2:	6163      	str	r3, [r4, #20]
 80045f4:	9b01      	ldr	r3, [sp, #4]
 80045f6:	b15b      	cbz	r3, 8004610 <__smakebuf_r+0x74>
 80045f8:	4630      	mov	r0, r6
 80045fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045fe:	f000 f971 	bl	80048e4 <_isatty_r>
 8004602:	b128      	cbz	r0, 8004610 <__smakebuf_r+0x74>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	89a0      	ldrh	r0, [r4, #12]
 8004612:	4305      	orrs	r5, r0
 8004614:	81a5      	strh	r5, [r4, #12]
 8004616:	e7cd      	b.n	80045b4 <__smakebuf_r+0x18>
 8004618:	080043a9 	.word	0x080043a9

0800461c <_free_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	2900      	cmp	r1, #0
 8004622:	d040      	beq.n	80046a6 <_free_r+0x8a>
 8004624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004628:	1f0c      	subs	r4, r1, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfb8      	it	lt
 800462e:	18e4      	addlt	r4, r4, r3
 8004630:	f000 f97a 	bl	8004928 <__malloc_lock>
 8004634:	4a1c      	ldr	r2, [pc, #112]	; (80046a8 <_free_r+0x8c>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	b933      	cbnz	r3, 8004648 <_free_r+0x2c>
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	4628      	mov	r0, r5
 8004640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004644:	f000 b976 	b.w	8004934 <__malloc_unlock>
 8004648:	42a3      	cmp	r3, r4
 800464a:	d908      	bls.n	800465e <_free_r+0x42>
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	1821      	adds	r1, r4, r0
 8004650:	428b      	cmp	r3, r1
 8004652:	bf01      	itttt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	e7ed      	b.n	800463a <_free_r+0x1e>
 800465e:	461a      	mov	r2, r3
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b10b      	cbz	r3, 8004668 <_free_r+0x4c>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x42>
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	1850      	adds	r0, r2, r1
 800466c:	42a0      	cmp	r0, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x6c>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	4401      	add	r1, r0
 8004674:	1850      	adds	r0, r2, r1
 8004676:	4283      	cmp	r3, r0
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	d1e0      	bne.n	800463e <_free_r+0x22>
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4401      	add	r1, r0
 8004682:	6011      	str	r1, [r2, #0]
 8004684:	6053      	str	r3, [r2, #4]
 8004686:	e7da      	b.n	800463e <_free_r+0x22>
 8004688:	d902      	bls.n	8004690 <_free_r+0x74>
 800468a:	230c      	movs	r3, #12
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	e7d6      	b.n	800463e <_free_r+0x22>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	bf01      	itttt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	1809      	addeq	r1, r1, r0
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	6063      	str	r3, [r4, #4]
 80046a2:	6054      	str	r4, [r2, #4]
 80046a4:	e7cb      	b.n	800463e <_free_r+0x22>
 80046a6:	bd38      	pop	{r3, r4, r5, pc}
 80046a8:	20000ca8 	.word	0x20000ca8

080046ac <sbrk_aligned>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4e0e      	ldr	r6, [pc, #56]	; (80046e8 <sbrk_aligned+0x3c>)
 80046b0:	460c      	mov	r4, r1
 80046b2:	6831      	ldr	r1, [r6, #0]
 80046b4:	4605      	mov	r5, r0
 80046b6:	b911      	cbnz	r1, 80046be <sbrk_aligned+0x12>
 80046b8:	f000 f88c 	bl	80047d4 <_sbrk_r>
 80046bc:	6030      	str	r0, [r6, #0]
 80046be:	4621      	mov	r1, r4
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 f887 	bl	80047d4 <_sbrk_r>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d00a      	beq.n	80046e0 <sbrk_aligned+0x34>
 80046ca:	1cc4      	adds	r4, r0, #3
 80046cc:	f024 0403 	bic.w	r4, r4, #3
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d007      	beq.n	80046e4 <sbrk_aligned+0x38>
 80046d4:	1a21      	subs	r1, r4, r0
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 f87c 	bl	80047d4 <_sbrk_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	d101      	bne.n	80046e4 <sbrk_aligned+0x38>
 80046e0:	f04f 34ff 	mov.w	r4, #4294967295
 80046e4:	4620      	mov	r0, r4
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	20000cac 	.word	0x20000cac

080046ec <_malloc_r>:
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	1ccd      	adds	r5, r1, #3
 80046f2:	f025 0503 	bic.w	r5, r5, #3
 80046f6:	3508      	adds	r5, #8
 80046f8:	2d0c      	cmp	r5, #12
 80046fa:	bf38      	it	cc
 80046fc:	250c      	movcc	r5, #12
 80046fe:	2d00      	cmp	r5, #0
 8004700:	4607      	mov	r7, r0
 8004702:	db01      	blt.n	8004708 <_malloc_r+0x1c>
 8004704:	42a9      	cmp	r1, r5
 8004706:	d905      	bls.n	8004714 <_malloc_r+0x28>
 8004708:	230c      	movs	r3, #12
 800470a:	2600      	movs	r6, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4630      	mov	r0, r6
 8004710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004714:	4e2e      	ldr	r6, [pc, #184]	; (80047d0 <_malloc_r+0xe4>)
 8004716:	f000 f907 	bl	8004928 <__malloc_lock>
 800471a:	6833      	ldr	r3, [r6, #0]
 800471c:	461c      	mov	r4, r3
 800471e:	bb34      	cbnz	r4, 800476e <_malloc_r+0x82>
 8004720:	4629      	mov	r1, r5
 8004722:	4638      	mov	r0, r7
 8004724:	f7ff ffc2 	bl	80046ac <sbrk_aligned>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	4604      	mov	r4, r0
 800472c:	d14d      	bne.n	80047ca <_malloc_r+0xde>
 800472e:	6834      	ldr	r4, [r6, #0]
 8004730:	4626      	mov	r6, r4
 8004732:	2e00      	cmp	r6, #0
 8004734:	d140      	bne.n	80047b8 <_malloc_r+0xcc>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	4631      	mov	r1, r6
 800473a:	4638      	mov	r0, r7
 800473c:	eb04 0803 	add.w	r8, r4, r3
 8004740:	f000 f848 	bl	80047d4 <_sbrk_r>
 8004744:	4580      	cmp	r8, r0
 8004746:	d13a      	bne.n	80047be <_malloc_r+0xd2>
 8004748:	6821      	ldr	r1, [r4, #0]
 800474a:	3503      	adds	r5, #3
 800474c:	1a6d      	subs	r5, r5, r1
 800474e:	f025 0503 	bic.w	r5, r5, #3
 8004752:	3508      	adds	r5, #8
 8004754:	2d0c      	cmp	r5, #12
 8004756:	bf38      	it	cc
 8004758:	250c      	movcc	r5, #12
 800475a:	4638      	mov	r0, r7
 800475c:	4629      	mov	r1, r5
 800475e:	f7ff ffa5 	bl	80046ac <sbrk_aligned>
 8004762:	3001      	adds	r0, #1
 8004764:	d02b      	beq.n	80047be <_malloc_r+0xd2>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	442b      	add	r3, r5
 800476a:	6023      	str	r3, [r4, #0]
 800476c:	e00e      	b.n	800478c <_malloc_r+0xa0>
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	1b52      	subs	r2, r2, r5
 8004772:	d41e      	bmi.n	80047b2 <_malloc_r+0xc6>
 8004774:	2a0b      	cmp	r2, #11
 8004776:	d916      	bls.n	80047a6 <_malloc_r+0xba>
 8004778:	1961      	adds	r1, r4, r5
 800477a:	42a3      	cmp	r3, r4
 800477c:	6025      	str	r5, [r4, #0]
 800477e:	bf18      	it	ne
 8004780:	6059      	strne	r1, [r3, #4]
 8004782:	6863      	ldr	r3, [r4, #4]
 8004784:	bf08      	it	eq
 8004786:	6031      	streq	r1, [r6, #0]
 8004788:	5162      	str	r2, [r4, r5]
 800478a:	604b      	str	r3, [r1, #4]
 800478c:	4638      	mov	r0, r7
 800478e:	f104 060b 	add.w	r6, r4, #11
 8004792:	f000 f8cf 	bl	8004934 <__malloc_unlock>
 8004796:	f026 0607 	bic.w	r6, r6, #7
 800479a:	1d23      	adds	r3, r4, #4
 800479c:	1af2      	subs	r2, r6, r3
 800479e:	d0b6      	beq.n	800470e <_malloc_r+0x22>
 80047a0:	1b9b      	subs	r3, r3, r6
 80047a2:	50a3      	str	r3, [r4, r2]
 80047a4:	e7b3      	b.n	800470e <_malloc_r+0x22>
 80047a6:	6862      	ldr	r2, [r4, #4]
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	bf0c      	ite	eq
 80047ac:	6032      	streq	r2, [r6, #0]
 80047ae:	605a      	strne	r2, [r3, #4]
 80047b0:	e7ec      	b.n	800478c <_malloc_r+0xa0>
 80047b2:	4623      	mov	r3, r4
 80047b4:	6864      	ldr	r4, [r4, #4]
 80047b6:	e7b2      	b.n	800471e <_malloc_r+0x32>
 80047b8:	4634      	mov	r4, r6
 80047ba:	6876      	ldr	r6, [r6, #4]
 80047bc:	e7b9      	b.n	8004732 <_malloc_r+0x46>
 80047be:	230c      	movs	r3, #12
 80047c0:	4638      	mov	r0, r7
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	f000 f8b6 	bl	8004934 <__malloc_unlock>
 80047c8:	e7a1      	b.n	800470e <_malloc_r+0x22>
 80047ca:	6025      	str	r5, [r4, #0]
 80047cc:	e7de      	b.n	800478c <_malloc_r+0xa0>
 80047ce:	bf00      	nop
 80047d0:	20000ca8 	.word	0x20000ca8

080047d4 <_sbrk_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	2300      	movs	r3, #0
 80047d8:	4d05      	ldr	r5, [pc, #20]	; (80047f0 <_sbrk_r+0x1c>)
 80047da:	4604      	mov	r4, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7ff f9ba 	bl	8003b58 <_sbrk>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_sbrk_r+0x1a>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_sbrk_r+0x1a>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000cb0 	.word	0x20000cb0

080047f4 <__sread>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	460c      	mov	r4, r1
 80047f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047fc:	f000 f8a0 	bl	8004940 <_read_r>
 8004800:	2800      	cmp	r0, #0
 8004802:	bfab      	itete	ge
 8004804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004806:	89a3      	ldrhlt	r3, [r4, #12]
 8004808:	181b      	addge	r3, r3, r0
 800480a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800480e:	bfac      	ite	ge
 8004810:	6563      	strge	r3, [r4, #84]	; 0x54
 8004812:	81a3      	strhlt	r3, [r4, #12]
 8004814:	bd10      	pop	{r4, pc}

08004816 <__swrite>:
 8004816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481a:	461f      	mov	r7, r3
 800481c:	898b      	ldrh	r3, [r1, #12]
 800481e:	4605      	mov	r5, r0
 8004820:	05db      	lsls	r3, r3, #23
 8004822:	460c      	mov	r4, r1
 8004824:	4616      	mov	r6, r2
 8004826:	d505      	bpl.n	8004834 <__swrite+0x1e>
 8004828:	2302      	movs	r3, #2
 800482a:	2200      	movs	r2, #0
 800482c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004830:	f000 f868 	bl	8004904 <_lseek_r>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	4632      	mov	r2, r6
 8004838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	4628      	mov	r0, r5
 8004840:	463b      	mov	r3, r7
 8004842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800484a:	f000 b817 	b.w	800487c <_write_r>

0800484e <__sseek>:
 800484e:	b510      	push	{r4, lr}
 8004850:	460c      	mov	r4, r1
 8004852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004856:	f000 f855 	bl	8004904 <_lseek_r>
 800485a:	1c43      	adds	r3, r0, #1
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	bf15      	itete	ne
 8004860:	6560      	strne	r0, [r4, #84]	; 0x54
 8004862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800486a:	81a3      	strheq	r3, [r4, #12]
 800486c:	bf18      	it	ne
 800486e:	81a3      	strhne	r3, [r4, #12]
 8004870:	bd10      	pop	{r4, pc}

08004872 <__sclose>:
 8004872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004876:	f000 b813 	b.w	80048a0 <_close_r>
	...

0800487c <_write_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	2200      	movs	r2, #0
 8004886:	4d05      	ldr	r5, [pc, #20]	; (800489c <_write_r+0x20>)
 8004888:	602a      	str	r2, [r5, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f7ff f917 	bl	8003abe <_write>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_write_r+0x1e>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_write_r+0x1e>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000cb0 	.word	0x20000cb0

080048a0 <_close_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	2300      	movs	r3, #0
 80048a4:	4d05      	ldr	r5, [pc, #20]	; (80048bc <_close_r+0x1c>)
 80048a6:	4604      	mov	r4, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	f7ff f923 	bl	8003af6 <_close>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_close_r+0x1a>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_close_r+0x1a>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	20000cb0 	.word	0x20000cb0

080048c0 <_fstat_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	2300      	movs	r3, #0
 80048c4:	4d06      	ldr	r5, [pc, #24]	; (80048e0 <_fstat_r+0x20>)
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	602b      	str	r3, [r5, #0]
 80048ce:	f7ff f91d 	bl	8003b0c <_fstat>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d102      	bne.n	80048dc <_fstat_r+0x1c>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	b103      	cbz	r3, 80048dc <_fstat_r+0x1c>
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	20000cb0 	.word	0x20000cb0

080048e4 <_isatty_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	2300      	movs	r3, #0
 80048e8:	4d05      	ldr	r5, [pc, #20]	; (8004900 <_isatty_r+0x1c>)
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7ff f91b 	bl	8003b2a <_isatty>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_isatty_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_isatty_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000cb0 	.word	0x20000cb0

08004904 <_lseek_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	4611      	mov	r1, r2
 800490c:	2200      	movs	r2, #0
 800490e:	4d05      	ldr	r5, [pc, #20]	; (8004924 <_lseek_r+0x20>)
 8004910:	602a      	str	r2, [r5, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	f7ff f913 	bl	8003b3e <_lseek>
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d102      	bne.n	8004922 <_lseek_r+0x1e>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	b103      	cbz	r3, 8004922 <_lseek_r+0x1e>
 8004920:	6023      	str	r3, [r4, #0]
 8004922:	bd38      	pop	{r3, r4, r5, pc}
 8004924:	20000cb0 	.word	0x20000cb0

08004928 <__malloc_lock>:
 8004928:	4801      	ldr	r0, [pc, #4]	; (8004930 <__malloc_lock+0x8>)
 800492a:	f7ff be0f 	b.w	800454c <__retarget_lock_acquire_recursive>
 800492e:	bf00      	nop
 8004930:	20000ca4 	.word	0x20000ca4

08004934 <__malloc_unlock>:
 8004934:	4801      	ldr	r0, [pc, #4]	; (800493c <__malloc_unlock+0x8>)
 8004936:	f7ff be0a 	b.w	800454e <__retarget_lock_release_recursive>
 800493a:	bf00      	nop
 800493c:	20000ca4 	.word	0x20000ca4

08004940 <_read_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	4611      	mov	r1, r2
 8004948:	2200      	movs	r2, #0
 800494a:	4d05      	ldr	r5, [pc, #20]	; (8004960 <_read_r+0x20>)
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f7ff f898 	bl	8003a84 <_read>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_read_r+0x1e>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	b103      	cbz	r3, 800495e <_read_r+0x1e>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	20000cb0 	.word	0x20000cb0

08004964 <_init>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr

08004970 <_fini>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr
